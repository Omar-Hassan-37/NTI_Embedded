
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000030f6  0000318a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000a8  008000a8  000031d2  2**0
                  ALLOC
  3 .stab         0000306c  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a28  00000000  00000000  00006240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c020  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c462  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_1>
       8:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_2>
       c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_3>
      10:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__vector_4>
      14:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_7>
      20:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_8>
      24:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_9>
      28:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_10>
      2c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <main>
      8a:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXT_voidEnableGlobalInt>:
/* Description    :  This function used to enable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidEnableGlobalInt( void )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <EXT_voidDisableGlobalInt>:
/* Description    :  This function used to disable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidDisableGlobalInt( void )
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXT0_voidInit>:
/****************************************************************/



void EXT0_voidInit (void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	#elif EXT0_SENSE_MODE == RISING
	SET_BIT(MCUCR , 0);
	SET_BIT(MCUCR , 1);
	
	#elif EXT0_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 0);
     cde:	a5 e5       	ldi	r26, 0x55	; 85
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e5       	ldi	r30, 0x55	; 85
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1);
     cec:	a5 e5       	ldi	r26, 0x55	; 85
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e5       	ldi	r30, 0x55	; 85
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */

	
/** disable EXT0 in initialization function  **/
/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 6 );
     cfa:	ab e5       	ldi	r26, 0x5B	; 91
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e5       	ldi	r30, 0x5B	; 91
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7b       	andi	r24, 0xBF	; 191
     d06:	8c 93       	st	X, r24
	SET_BIT(GIFR , 6 ) ;
     d08:	aa e5       	ldi	r26, 0x5A	; 90
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e5       	ldi	r30, 0x5A	; 90
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24
	
	
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <EXT1_voidInit>:
/* Description    :  This function used to initialize EXT1      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT1_voidInit (void)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	#elif EXT1_SENSE_MODE == RISING
	SET_BIT(MCUCR , 2);
	SET_BIT(MCUCR , 3);

	#elif EXT1_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 2);
     d24:	a5 e5       	ldi	r26, 0x55	; 85
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e5       	ldi	r30, 0x55	; 85
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8b 7f       	andi	r24, 0xFB	; 251
     d30:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 3);
     d32:	a5 e5       	ldi	r26, 0x55	; 85
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e5       	ldi	r30, 0x55	; 85
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 7 );
     d40:	ab e5       	ldi	r26, 0x5B	; 91
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e5       	ldi	r30, 0x5B	; 91
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 77       	andi	r24, 0x7F	; 127
     d4c:	8c 93       	st	X, r24
	SET_BIT(GIFR , 7 ) ;
     d4e:	aa e5       	ldi	r26, 0x5A	; 90
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e5       	ldi	r30, 0x5A	; 90
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8c 93       	st	X, r24


}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <EXT2_voidInit>:



void EXT2_voidInit (void)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62

	/*  ( if / else if ) condition for Macros */

	#if EXT2_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCSR , 6);
     d6a:	a4 e5       	ldi	r26, 0x54	; 84
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e4 e5       	ldi	r30, 0x54	; 84
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7b       	andi	r24, 0xBF	; 191
     d76:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 5 );
     d78:	ab e5       	ldi	r26, 0x5B	; 91
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	eb e5       	ldi	r30, 0x5B	; 91
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8f 7d       	andi	r24, 0xDF	; 223
     d84:	8c 93       	st	X, r24
	SET_BIT(GIFR , 5 ) ;
     d86:	aa e5       	ldi	r26, 0x5A	; 90
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e5       	ldi	r30, 0x5A	; 90
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	8c 93       	st	X, r24


}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <EXT0_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidEnable()
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( GICR , 6 );
     da2:	ab e5       	ldi	r26, 0x5B	; 91
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e5       	ldi	r30, 0x5B	; 91
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 64       	ori	r24, 0x40	; 64
     dae:	8c 93       	st	X, r24
	
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <EXT0_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidDisable()
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( GICR , 6 );
     dbe:	ab e5       	ldi	r26, 0x5B	; 91
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e5       	ldi	r30, 0x5B	; 91
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7b       	andi	r24, 0xBF	; 191
     dca:	8c 93       	st	X, r24
	
}
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <EXT1_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidEnable()
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 7 );
     dda:	ab e5       	ldi	r26, 0x5B	; 91
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	eb e5       	ldi	r30, 0x5B	; 91
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 68       	ori	r24, 0x80	; 128
     de6:	8c 93       	st	X, r24

}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <EXT1_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidDisable()
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 7 );
     df6:	ab e5       	ldi	r26, 0x5B	; 91
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	eb e5       	ldi	r30, 0x5B	; 91
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8f 77       	andi	r24, 0x7F	; 127
     e02:	8c 93       	st	X, r24

}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <EXT2_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidEnable()
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 5 );
     e12:	ab e5       	ldi	r26, 0x5B	; 91
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	eb e5       	ldi	r30, 0x5B	; 91
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	8c 93       	st	X, r24

}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <EXT2_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidDisable()
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 5 );
     e2e:	ab e5       	ldi	r26, 0x5B	; 91
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	eb e5       	ldi	r30, 0x5B	; 91
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7d       	andi	r24, 0xDF	; 223
     e3a:	8c 93       	st	X, r24

}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <EXT0_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidCallBack(void (*addresscpy)(void))
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <EXT0_voidCallBack+0x6>
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <EXT0_voidCallBack+0x22>
	{
		pf1 = addresscpy;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	90 93 b8 00 	sts	0x00B8, r25
     e60:	80 93 b7 00 	sts	0x00B7, r24
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <EXT1_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidCallBack(void (*addresscpy)(void))
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <EXT1_voidCallBack+0x6>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	31 f0       	breq	.+12     	; 0xe90 <EXT1_voidCallBack+0x22>
	{
		pf2 = addresscpy;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	90 93 ba 00 	sts	0x00BA, r25
     e8c:	80 93 b9 00 	sts	0x00B9, r24
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <EXT2_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidCallBack(void (*addresscpy)(void))
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <EXT2_voidCallBack+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	31 f0       	breq	.+12     	; 0xebc <EXT2_voidCallBack+0x22>
	{
		pf3 = addresscpy;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	90 93 bc 00 	sts	0x00BC, r25
     eb8:	80 93 bb 00 	sts	0x00BB, r24
	}
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <EXT0_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <EXT0_voidSetSignalch+0x6>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	
	switch(SenseCpy)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3b 83       	std	Y+3, r19	; 0x03
     edc:	2a 83       	std	Y+2, r18	; 0x02
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	91 05       	cpc	r25, r1
     ee6:	a1 f1       	breq	.+104    	; 0xf50 <EXT0_voidSetSignalch+0x8a>
     ee8:	2a 81       	ldd	r18, Y+2	; 0x02
     eea:	3b 81       	ldd	r19, Y+3	; 0x03
     eec:	25 30       	cpi	r18, 0x05	; 5
     eee:	31 05       	cpc	r19, r1
     ef0:	34 f4       	brge	.+12     	; 0xefe <EXT0_voidSetSignalch+0x38>
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 05       	cpc	r25, r1
     efa:	61 f0       	breq	.+24     	; 0xf14 <EXT0_voidSetSignalch+0x4e>
     efc:	46 c0       	rjmp	.+140    	; 0xf8a <EXT0_voidSetSignalch+0xc4>
     efe:	2a 81       	ldd	r18, Y+2	; 0x02
     f00:	3b 81       	ldd	r19, Y+3	; 0x03
     f02:	27 30       	cpi	r18, 0x07	; 7
     f04:	31 05       	cpc	r19, r1
     f06:	a9 f0       	breq	.+42     	; 0xf32 <EXT0_voidSetSignalch+0x6c>
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	9b 81       	ldd	r25, Y+3	; 0x03
     f0c:	8a 30       	cpi	r24, 0x0A	; 10
     f0e:	91 05       	cpc	r25, r1
     f10:	71 f1       	breq	.+92     	; 0xf6e <EXT0_voidSetSignalch+0xa8>
     f12:	3b c0       	rjmp	.+118    	; 0xf8a <EXT0_voidSetSignalch+0xc4>
	{
		case IOC:
			SET_BIT(MCUCR , 0);
     f14:	a5 e5       	ldi	r26, 0x55	; 85
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e5       	ldi	r30, 0x55	; 85
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
     f22:	a5 e5       	ldi	r26, 0x55	; 85
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e5       	ldi	r30, 0x55	; 85
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	8c 93       	st	X, r24
     f30:	2c c0       	rjmp	.+88     	; 0xf8a <EXT0_voidSetSignalch+0xc4>
			break;

		case RISING:
			SET_BIT(MCUCR , 0);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
     f4e:	1d c0       	rjmp	.+58     	; 0xf8a <EXT0_voidSetSignalch+0xc4>
			break;

		case FALLING:
			CLEAR_BIT(MCUCR , 0);
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
     f5c:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
     f5e:	a5 e5       	ldi	r26, 0x55	; 85
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e5       	ldi	r30, 0x55	; 85
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8c 93       	st	X, r24
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <EXT0_voidSetSignalch+0xc4>
			break;

		case LOW_LEVEL:
			CLEAR_BIT(MCUCR , 0);
     f6e:	a5 e5       	ldi	r26, 0x55	; 85
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e5       	ldi	r30, 0x55	; 85
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8e 7f       	andi	r24, 0xFE	; 254
     f7a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
     f7c:	a5 e5       	ldi	r26, 0x55	; 85
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e5       	ldi	r30, 0x55	; 85
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <EXT1_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT1_voidSetSignalch(u8 SenseCpy)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <EXT1_voidSetSignalch+0x6>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3b 83       	std	Y+3, r19	; 0x03
     fac:	2a 83       	std	Y+2, r18	; 0x02
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	91 05       	cpc	r25, r1
     fb6:	a1 f1       	breq	.+104    	; 0x1020 <EXT1_voidSetSignalch+0x8a>
     fb8:	2a 81       	ldd	r18, Y+2	; 0x02
     fba:	3b 81       	ldd	r19, Y+3	; 0x03
     fbc:	25 30       	cpi	r18, 0x05	; 5
     fbe:	31 05       	cpc	r19, r1
     fc0:	34 f4       	brge	.+12     	; 0xfce <EXT1_voidSetSignalch+0x38>
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	9b 81       	ldd	r25, Y+3	; 0x03
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	61 f0       	breq	.+24     	; 0xfe4 <EXT1_voidSetSignalch+0x4e>
     fcc:	46 c0       	rjmp	.+140    	; 0x105a <EXT1_voidSetSignalch+0xc4>
     fce:	2a 81       	ldd	r18, Y+2	; 0x02
     fd0:	3b 81       	ldd	r19, Y+3	; 0x03
     fd2:	27 30       	cpi	r18, 0x07	; 7
     fd4:	31 05       	cpc	r19, r1
     fd6:	a9 f0       	breq	.+42     	; 0x1002 <EXT1_voidSetSignalch+0x6c>
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	8a 30       	cpi	r24, 0x0A	; 10
     fde:	91 05       	cpc	r25, r1
     fe0:	71 f1       	breq	.+92     	; 0x103e <EXT1_voidSetSignalch+0xa8>
     fe2:	3b c0       	rjmp	.+118    	; 0x105a <EXT1_voidSetSignalch+0xc4>
	{
		case IOC:
		SET_BIT(MCUCR , 2);
     fe4:	a5 e5       	ldi	r26, 0x55	; 85
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e5       	ldi	r30, 0x55	; 85
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
     ff2:	a5 e5       	ldi	r26, 0x55	; 85
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e5       	ldi	r30, 0x55	; 85
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	8c 93       	st	X, r24
    1000:	2c c0       	rjmp	.+88     	; 0x105a <EXT1_voidSetSignalch+0xc4>
		break;

		case RISING:
		SET_BIT(MCUCR , 2);
    1002:	a5 e5       	ldi	r26, 0x55	; 85
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e5       	ldi	r30, 0x55	; 85
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    1010:	a5 e5       	ldi	r26, 0x55	; 85
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e5       	ldi	r30, 0x55	; 85
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	8c 93       	st	X, r24
    101e:	1d c0       	rjmp	.+58     	; 0x105a <EXT1_voidSetSignalch+0xc4>
		break;

		case FALLING:
		CLEAR_BIT(MCUCR , 2);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8b 7f       	andi	r24, 0xFB	; 251
    102c:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	8c 93       	st	X, r24
    103c:	0e c0       	rjmp	.+28     	; 0x105a <EXT1_voidSetSignalch+0xc4>
		break;

		case LOW_LEVEL:
		CLEAR_BIT(MCUCR , 2);
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8b 7f       	andi	r24, 0xFB	; 251
    104a:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	87 7f       	andi	r24, 0xF7	; 247
    1058:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <EXT2_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <EXT2_voidSetSignalch+0x6>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3b 83       	std	Y+3, r19	; 0x03
    107c:	2a 83       	std	Y+2, r18	; 0x02
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	91 05       	cpc	r25, r1
    1086:	69 f0       	breq	.+26     	; 0x10a2 <EXT2_voidSetSignalch+0x3c>
    1088:	2a 81       	ldd	r18, Y+2	; 0x02
    108a:	3b 81       	ldd	r19, Y+3	; 0x03
    108c:	27 30       	cpi	r18, 0x07	; 7
    108e:	31 05       	cpc	r19, r1
    1090:	79 f4       	brne	.+30     	; 0x10b0 <EXT2_voidSetSignalch+0x4a>
	{
		case RISING:
		SET_BIT(MCUCSR , 6);
    1092:	a4 e5       	ldi	r26, 0x54	; 84
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 e5       	ldi	r30, 0x54	; 84
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	8c 93       	st	X, r24
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <EXT2_voidSetSignalch+0x4a>
		break;

		case FALLING:
		CLEAR_BIT(MCUCSR , 6);
    10a2:	a4 e5       	ldi	r26, 0x54	; 84
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e5       	ldi	r30, 0x54	; 84
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	8c 93       	st	X, r24
	}
	
	/* End ( if ) condition for Macros */
	

}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <__vector_1>:
*/
/** Linker Problem solved */


void __vector_1(void)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	pf1();
    10e6:	e0 91 b7 00 	lds	r30, 0x00B7
    10ea:	f0 91 b8 00 	lds	r31, 0x00B8
    10ee:	09 95       	icall
}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_2>:



void __vector_2(void)
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	pf2();
    1140:	e0 91 b9 00 	lds	r30, 0x00B9
    1144:	f0 91 ba 00 	lds	r31, 0x00BA
    1148:	09 95       	icall
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <__vector_3>:


void __vector_3(void)
{
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
	pf3();
    119a:	e0 91 bb 00 	lds	r30, 0x00BB
    119e:	f0 91 bc 00 	lds	r31, 0x00BC
    11a2:	09 95       	icall
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <TIMER0_void_Init>:

static void (*TIMER2_OV_CallBack) (void) ;
static void (*TIMER2_CTC_CallBack) (void) ;

void TIMER0_void_Init(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	#elif(TIMER0_MODE == TIMER0_CTC)
		CLEAR_BIT(TCCR0 , TCCR0_WGM00);
		SET_BIT(TCCR0 , TCCR0_WGM01);
		
	#elif(TIMER0_MODE == TIMER0_FAST_PWM )
		SET_BIT(TCCR0 , TCCR0_WGM00);
    11d2:	a3 e5       	ldi	r26, 0x53	; 83
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 64       	ori	r24, 0x40	; 64
    11de:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , TCCR0_WGM01);
    11e0:	a3 e5       	ldi	r26, 0x53	; 83
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e3 e5       	ldi	r30, 0x53	; 83
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	88 60       	ori	r24, 0x08	; 8
    11ec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , TCCR0_CS00);
		CLEAR_BIT(TCCR0 , TCCR0_CS01);
		SET_BIT(TCCR0 , TCCR0_CS03);

	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_1024 )
		SET_BIT(TCCR0 , TCCR0_CS00);
    11ee:	a3 e5       	ldi	r26, 0x53	; 83
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e3 e5       	ldi	r30, 0x53	; 83
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , TCCR0_CS01);
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8d 7f       	andi	r24, 0xFD	; 253
    1208:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , TCCR0_CS02);
    120a:	a3 e5       	ldi	r26, 0x53	; 83
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	84 60       	ori	r24, 0x04	; 4
    1216:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , TCCR0_COM01);
	#elif(TIMER0_COM_EVENT == TIMER0_CLEAR )
		CLEAR_BIT(TCCR0 , TCCR0_COM00);
		SET_BIT(TCCR0 , TCCR0_COM01);
	#elif(TIMER0_COM_EVENT == TIMER0_SET )
		SET_BIT(TCCR0 , TCCR0_COM00);
    1218:	a3 e5       	ldi	r26, 0x53	; 83
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e3 e5       	ldi	r30, 0x53	; 83
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 61       	ori	r24, 0x10	; 16
    1224:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , TCCR0_COM01);
    1226:	a3 e5       	ldi	r26, 0x53	; 83
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e3 e5       	ldi	r30, 0x53	; 83
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 62       	ori	r24, 0x20	; 32
    1232:	8c 93       	st	X, r24

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , TIMSK_TOIE0);
    1234:	a9 e5       	ldi	r26, 0x59	; 89
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e9 e5       	ldi	r30, 0x59	; 89
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	8e 7f       	andi	r24, 0xFE	; 254
    1240:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , TIMSK_OCIE0);
    1242:	a9 e5       	ldi	r26, 0x59	; 89
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e9 e5       	ldi	r30, 0x59	; 89
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	8c 93       	st	X, r24
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , TIFR_TOV0);
    1250:	a8 e5       	ldi	r26, 0x58	; 88
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e5       	ldi	r30, 0x58	; 88
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	8c 93       	st	X, r24
	SET_BIT(TIFR , TIFR_OCF0);
    125e:	a8 e5       	ldi	r26, 0x58	; 88
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e5       	ldi	r30, 0x58	; 88
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	82 60       	ori	r24, 0x02	; 2
    126a:	8c 93       	st	X, r24
	/*Clear register*/
	TCNT0 = 0 ;
    126c:	e2 e5       	ldi	r30, 0x52	; 82
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
	OCR0 = 0 ;
    1272:	ec e5       	ldi	r30, 0x5C	; 92
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
	
	
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <TIMER0_void_SetTimerReg>:

void TIMER0_void_SetTimerReg(u8 Copy_uint8Val)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_uint8Val ;
    128a:	e2 e5       	ldi	r30, 0x52	; 82
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	80 83       	st	Z, r24
}
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <TIMER0_void_SetCompareVal>:

void TIMER0_void_SetCompareVal(u8 Copy_uint8Val)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_uint8Val ;
    12a6:	ec e5       	ldi	r30, 0x5C	; 92
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	80 83       	st	Z, r24
}
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TOIE0);
    12be:	a9 e5       	ldi	r26, 0x59	; 89
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e9 e5       	ldi	r30, 0x59	; 89
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	8c 93       	st	X, r24
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TIMSK_TOIE0);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TIMER0_void_EnableCTCInt>:

void TIMER0_void_EnableCTCInt(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_OCIE0);
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	82 60       	ori	r24, 0x02	; 2
    1302:	8c 93       	st	X, r24
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TIMSK_OCIE0);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8d 7f       	andi	r24, 0xFD	; 253
    131e:	8c 93       	st	X, r24
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <TIMER0_void_SetOVCallBack>:

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <TIMER0_void_SetOVCallBack+0x6>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OV_CallBack = Copy_ptr ;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	90 93 a9 00 	sts	0x00A9, r25
    133c:	80 93 a8 00 	sts	0x00A8, r24
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <TIMER0_void_SetCTCCallBack+0x6>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_CallBack = Copy_ptr ;
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	90 93 ab 00 	sts	0x00AB, r25
    1360:	80 93 aa 00 	sts	0x00AA, r24
	
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	
	TIMER0_OV_CallBack();
    1398:	e0 91 a8 00 	lds	r30, 0x00A8
    139c:	f0 91 a9 00 	lds	r31, 0x00A9
    13a0:	09 95       	icall
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	
	TIMER0_CTC_CallBack();
    13f2:	e0 91 aa 00 	lds	r30, 0x00AA
    13f6:	f0 91 ab 00 	lds	r31, 0x00AB
    13fa:	09 95       	icall
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <TIMER1_void_Init>:

/************************************************************************************************************************************************/

void TIMER1_void_Init(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	/*Set TIMER1 mode*/
#if TIMER1_MODE == TIMER1_NORMAL
	CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    142a:	af e4       	ldi	r26, 0x4F	; 79
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ef e4       	ldi	r30, 0x4F	; 79
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8e 7f       	andi	r24, 0xFE	; 254
    1436:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    1438:	af e4       	ldi	r26, 0x4F	; 79
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ef e4       	ldi	r30, 0x4F	; 79
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8d 7f       	andi	r24, 0xFD	; 253
    1444:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    1446:	ae e4       	ldi	r26, 0x4E	; 78
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ee e4       	ldi	r30, 0x4E	; 78
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	87 7f       	andi	r24, 0xF7	; 247
    1452:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
    1454:	ae e4       	ldi	r26, 0x4E	; 78
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ee e4       	ldi	r30, 0x4E	; 78
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7e       	andi	r24, 0xEF	; 239
    1460:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B , TCCR1B_CS10);
	CLEAR_BIT(TCCR1B , TCCR1B_CS11);
	SET_BIT(TCCR1B , TCCR1B_CS12);

#elif(TIMER1_PRESCALER == TIMER1_DIV_BY_1024 )
	SET_BIT(TCCR1B , TCCR1B_CS10);
    1462:	ae e4       	ldi	r26, 0x4E	; 78
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ee e4       	ldi	r30, 0x4E	; 78
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B , TCCR1B_CS11);
    1470:	ae e4       	ldi	r26, 0x4E	; 78
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e4       	ldi	r30, 0x4E	; 78
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8d 7f       	andi	r24, 0xFD	; 253
    147c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_CS12);
    147e:	ae e4       	ldi	r26, 0x4E	; 78
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	84 60       	ori	r24, 0x04	; 4
    148a:	8c 93       	st	X, r24

#endif

/*Set TIMER1 event*/
#if(TIMER1_COM_EVENT == TIMER1_NORMAL_PORT_OPER)
	CLEAR_BIT(TCCR1A , TCCR1A_COM1A0);
    148c:	af e4       	ldi	r26, 0x4F	; 79
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ef e4       	ldi	r30, 0x4F	; 79
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8f 7b       	andi	r24, 0xBF	; 191
    1498:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A , TCCR1A_COM1B0);
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A , TCCR1A_COM1A1);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 77       	andi	r24, 0x7F	; 127
    14b4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A , TCCR1A_COM1B1);
    14b6:	af e4       	ldi	r26, 0x4F	; 79
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ef e4       	ldi	r30, 0x4F	; 79
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8f 7d       	andi	r24, 0xDF	; 223
    14c2:	8c 93       	st	X, r24


#endif

	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , TIMSK_TOIE1);		/*Timer/Counter1 Overflow Interrupt Disable*/
    14c4:	a9 e5       	ldi	r26, 0x59	; 89
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e9 e5       	ldi	r30, 0x59	; 89
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , TIMSK_OCIE1A);	/*Timer/Counter1 Output Compare Channel A Match Interrupt Disable*/
    14d2:	a9 e5       	ldi	r26, 0x59	; 89
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e9 e5       	ldi	r30, 0x59	; 89
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 7e       	andi	r24, 0xEF	; 239
    14de:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , TIMSK_OCIE1B);	/*Timer/Counter1 Output Compare Channel B Match Interrupt Enable*/
    14e0:	a9 e5       	ldi	r26, 0x59	; 89
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e9 e5       	ldi	r30, 0x59	; 89
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	8c 93       	st	X, r24

	/*CLEAR FLAGS*/
	SET_BIT(TIFR , TIFR_TOV1);			/*Timer/Counter1 Overflow Flag*/
    14ee:	a8 e5       	ldi	r26, 0x58	; 88
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e8 e5       	ldi	r30, 0x58	; 88
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8c 93       	st	X, r24
	SET_BIT(TIFR , TIFR_OCF1A);			/*Timer/Counter1 Output Compare Channel A Match Flag*/
    14fc:	a8 e5       	ldi	r26, 0x58	; 88
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e8 e5       	ldi	r30, 0x58	; 88
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 61       	ori	r24, 0x10	; 16
    1508:	8c 93       	st	X, r24
	SET_BIT(TIFR , TIFR_OCF1B);			/*Timer/Counter1 Output Compare Channel B Match Flag*/
    150a:	a8 e5       	ldi	r26, 0x58	; 88
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e8 e5       	ldi	r30, 0x58	; 88
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	88 60       	ori	r24, 0x08	; 8
    1516:	8c 93       	st	X, r24

	/*Clear register*/
	TCNT1 = 0 ;							/*Timer/Countrer1 Register*/
    1518:	ec e4       	ldi	r30, 0x4C	; 76
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	11 82       	std	Z+1, r1	; 0x01
    151e:	10 82       	st	Z, r1
	OCR1A = 0 ;							/*Timer/Counter1 Output Compare Register channel A*/
    1520:	ea e4       	ldi	r30, 0x4A	; 74
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	11 82       	std	Z+1, r1	; 0x01
    1526:	10 82       	st	Z, r1
	OCR1B = 0 ;							/*Timer/Counter1 Output Compare Register channel B*/
    1528:	e8 e4       	ldi	r30, 0x48	; 72
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	11 82       	std	Z+1, r1	; 0x01
    152e:	10 82       	st	Z, r1

}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <TIMER1_void_SetTimerReg>:

void TIMER1_void_SetTimerReg(u8 Copy_uint8Val)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_uint8Val;
    1542:	ec e4       	ldi	r30, 0x4C	; 76
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
}
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <TIMER1_void_SetCompareVal_A>:

void TIMER1_void_SetCompareVal_A(u8 Copy_uint8Val)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_uint8Val;
    1564:	ea e4       	ldi	r30, 0x4A	; 74
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
}
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <TIMER1_void_SetCompareVal_B>:

void TIMER1_void_SetCompareVal_B(u8 Copy_uint8Val)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_uint8Val;
    1586:	e8 e4       	ldi	r30, 0x48	; 72
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
}
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <TIMER1_void_EnableOVInt>:

void TIMER1_void_EnableOVInt(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_TOIE1);
    15a4:	a9 e5       	ldi	r26, 0x59	; 89
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e9 e5       	ldi	r30, 0x59	; 89
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	8c 93       	st	X, r24
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <TIMER1_void_DisableOVInt>:

void TIMER1_void_DisableOVInt(void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TIMSK_TOIE1);
    15c0:	a9 e5       	ldi	r26, 0x59	; 89
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e9 e5       	ldi	r30, 0x59	; 89
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8b 7f       	andi	r24, 0xFB	; 251
    15cc:	8c 93       	st	X, r24
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <TIMER1_void_EnableCTCInt_A>:

void TIMER1_void_EnableCTCInt_A(void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_OCIE1A);
    15dc:	a9 e5       	ldi	r26, 0x59	; 89
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e9 e5       	ldi	r30, 0x59	; 89
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 61       	ori	r24, 0x10	; 16
    15e8:	8c 93       	st	X, r24
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <TIMER1_void_DisableCTCInt_A>:

void TIMER1_void_DisableCTCInt_A(void)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TIMSK_OCIE1A);
    15f8:	a9 e5       	ldi	r26, 0x59	; 89
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e9 e5       	ldi	r30, 0x59	; 89
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 7e       	andi	r24, 0xEF	; 239
    1604:	8c 93       	st	X, r24
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <TIMER1_void_EnableCTCInt_B>:

void TIMER1_void_EnableCTCInt_B(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_OCIE1B);
    1614:	a9 e5       	ldi	r26, 0x59	; 89
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e9 e5       	ldi	r30, 0x59	; 89
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	88 60       	ori	r24, 0x08	; 8
    1620:	8c 93       	st	X, r24
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <TIMER1_void_DisableCTCInt_B>:

void TIMER1_void_DisableCTCInt_B(void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TIMSK_OCIE1B);
    1630:	a9 e5       	ldi	r26, 0x59	; 89
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e9 e5       	ldi	r30, 0x59	; 89
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	87 7f       	andi	r24, 0xF7	; 247
    163c:	8c 93       	st	X, r24
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <TIMER1_void_SetOVCallBack>:

void TIMER1_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <TIMER1_void_SetOVCallBack+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptr != NULL)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	31 f0       	breq	.+12     	; 0x1666 <TIMER1_void_SetOVCallBack+0x22>
	{
		TIMER1_OV_CallBack = Copy_ptr;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	90 93 ad 00 	sts	0x00AD, r25
    1662:	80 93 ac 00 	sts	0x00AC, r24
	}
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <TIMER1_void_SetCTCCallBack_A>:

void TIMER1_void_SetCTCCallBack_A(void (*Copy_ptr) (void) )
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <TIMER1_void_SetCTCCallBack_A+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptr != NULL)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	31 f0       	breq	.+12     	; 0x1692 <TIMER1_void_SetCTCCallBack_A+0x22>
	{
		TIMER1_CTC_CallBack_A = Copy_ptr;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	90 93 af 00 	sts	0x00AF, r25
    168e:	80 93 ae 00 	sts	0x00AE, r24
	}
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <TIMER1_void_SetCTCCallBack_B>:

void TIMER1_void_SetCTCCallBack_B(void (*Copy_ptr) (void) )
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <TIMER1_void_SetCTCCallBack_B+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptr != NULL)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	31 f0       	breq	.+12     	; 0x16be <TIMER1_void_SetCTCCallBack_B+0x22>
	{
		TIMER1_CTC_CallBack_B = Copy_ptr;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	90 93 b1 00 	sts	0x00B1, r25
    16ba:	80 93 b0 00 	sts	0x00B0, r24
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <__vector_9>:

void __vector_9(void) __attribute__((signal , used));
void __vector_9(void)
{
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	11 24       	eor	r1, r1
    16d2:	2f 93       	push	r18
    16d4:	3f 93       	push	r19
    16d6:	4f 93       	push	r20
    16d8:	5f 93       	push	r21
    16da:	6f 93       	push	r22
    16dc:	7f 93       	push	r23
    16de:	8f 93       	push	r24
    16e0:	9f 93       	push	r25
    16e2:	af 93       	push	r26
    16e4:	bf 93       	push	r27
    16e6:	ef 93       	push	r30
    16e8:	ff 93       	push	r31
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62

	TIMER1_OV_CallBack();
    16f2:	e0 91 ac 00 	lds	r30, 0x00AC
    16f6:	f0 91 ad 00 	lds	r31, 0x00AD
    16fa:	09 95       	icall
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	ff 91       	pop	r31
    1702:	ef 91       	pop	r30
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	7f 91       	pop	r23
    170e:	6f 91       	pop	r22
    1710:	5f 91       	pop	r21
    1712:	4f 91       	pop	r20
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_7>:

void __vector_7(void) __attribute__((signal , used));
void __vector_7(void)
{
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	2f 93       	push	r18
    172e:	3f 93       	push	r19
    1730:	4f 93       	push	r20
    1732:	5f 93       	push	r21
    1734:	6f 93       	push	r22
    1736:	7f 93       	push	r23
    1738:	8f 93       	push	r24
    173a:	9f 93       	push	r25
    173c:	af 93       	push	r26
    173e:	bf 93       	push	r27
    1740:	ef 93       	push	r30
    1742:	ff 93       	push	r31
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CTC_CallBack_A();
    174c:	e0 91 ae 00 	lds	r30, 0x00AE
    1750:	f0 91 af 00 	lds	r31, 0x00AF
    1754:	09 95       	icall
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_8>:

void __vector_8(void) __attribute__((signal , used));
void __vector_8(void)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CTC_CallBack_B();
    17a6:	e0 91 b0 00 	lds	r30, 0x00B0
    17aa:	f0 91 b1 00 	lds	r31, 0x00B1
    17ae:	09 95       	icall
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <TIMER2_void_Init>:

/************************************************************************************************************************************************/

void TIMER2_void_Init(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
#if(TIMER2_MODE == TIMER2_NORMAL)
	CLEAR_BIT(TCCR2 , TCCR2_WGM20);
    17de:	a5 e4       	ldi	r26, 0x45	; 69
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 e4       	ldi	r30, 0x45	; 69
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 7b       	andi	r24, 0xBF	; 191
    17ea:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2 , TCCR2_WGM21);
    17ec:	a5 e4       	ldi	r26, 0x45	; 69
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e4       	ldi	r30, 0x45	; 69
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2 , TCCR2_CS20);
	SET_BIT(TCCR2 , TCCR2_CS21);
	SET_BIT(TCCR2 , TCCR2_CS23);

#elif(TIMER2_PRESCALER == TIMER2_DIV_BY_1024 )
	SET_BIT(TCCR2 , TCCR2_CS20);
    17fa:	a5 e4       	ldi	r26, 0x45	; 69
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e4       	ldi	r30, 0x45	; 69
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_CS21);
    1808:	a5 e4       	ldi	r26, 0x45	; 69
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e4       	ldi	r30, 0x45	; 69
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	82 60       	ori	r24, 0x02	; 2
    1814:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_CS22);
    1816:	a5 e4       	ldi	r26, 0x45	; 69
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e4       	ldi	r30, 0x45	; 69
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	8c 93       	st	X, r24

#endif

#if(TIMER2_COM_EVENT == TIMER2_NO_ACTION)
	CLEAR_BIT(TCCR2 , TCCR2_COM20);
    1824:	a5 e4       	ldi	r26, 0x45	; 69
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e4       	ldi	r30, 0x45	; 69
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8f 7e       	andi	r24, 0xEF	; 239
    1830:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2 , TCCR2_COM21);
    1832:	a5 e4       	ldi	r26, 0x45	; 69
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e4       	ldi	r30, 0x45	; 69
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 7d       	andi	r24, 0xDF	; 223
    183e:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , TCCR2_COM21);

	#endif

	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , TIMSK_TOIE2);			/*Timer/Counter2 Overflow Interrupt Enable*/
    1840:	a9 e5       	ldi	r26, 0x59	; 89
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 e5       	ldi	r30, 0x59	; 89
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7b       	andi	r24, 0xBF	; 191
    184c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , TIMSK_OCIE2);			/*Timer/Counter2 Output Compare Match Interrupt Enable*/
    184e:	a9 e5       	ldi	r26, 0x59	; 89
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e9 e5       	ldi	r30, 0x59	; 89
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 77       	andi	r24, 0x7F	; 127
    185a:	8c 93       	st	X, r24

	/*CLEAR FLAGS*/
	SET_BIT(TIFR , TIFR_TOV2);				/*Timer/Counter2 Overflow Flag*/
    185c:	a8 e5       	ldi	r26, 0x58	; 88
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e8 e5       	ldi	r30, 0x58	; 88
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 64       	ori	r24, 0x40	; 64
    1868:	8c 93       	st	X, r24
	SET_BIT(TIFR , TIFR_OCF2);				/*Timer/Counter2 Output Compare Flag*/
    186a:	a8 e5       	ldi	r26, 0x58	; 88
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e5       	ldi	r30, 0x58	; 88
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 68       	ori	r24, 0x80	; 128
    1876:	8c 93       	st	X, r24

	/*Clear register*/
	TCNT2 = 0 ;								/*Timer/Countrer2 Register*/
    1878:	e4 e4       	ldi	r30, 0x44	; 68
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	10 82       	st	Z, r1
	OCR2 = 0 ;								/*Timer/Counter2 Output Compare Register*/
    187e:	e3 e4       	ldi	r30, 0x43	; 67
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	10 82       	st	Z, r1


}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <TIMER2_void_SetTimerReg>:

void TIMER2_void_SetTimerReg(u8 Copy_uint8Val)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	0f 92       	push	r0
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_uint8Val;
    1896:	e4 e4       	ldi	r30, 0x44	; 68
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	80 83       	st	Z, r24
}
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <TIMER2_void_SetCompareVal>:

void TIMER2_void_SetCompareVal(u8 Copy_uint8Val)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_uint8Val;
    18b2:	e3 e4       	ldi	r30, 0x43	; 67
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	80 83       	st	Z, r24
}
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <TIMER2_void_EnableOVInt>:

void TIMER2_void_EnableOVInt(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_TOIE2);
    18ca:	a9 e5       	ldi	r26, 0x59	; 89
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e9 e5       	ldi	r30, 0x59	; 89
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 64       	ori	r24, 0x40	; 64
    18d6:	8c 93       	st	X, r24
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <TIMER2_void_DisableOVInt>:

void TIMER2_void_DisableOVInt(void)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TIMSK_TOIE2);
    18e6:	a9 e5       	ldi	r26, 0x59	; 89
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e9 e5       	ldi	r30, 0x59	; 89
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7b       	andi	r24, 0xBF	; 191
    18f2:	8c 93       	st	X, r24
}
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <TIMER2_void_EnableCTCInt>:

void TIMER2_void_EnableCTCInt(void)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TIMSK_OCIE2);
    1902:	a9 e5       	ldi	r26, 0x59	; 89
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e9 e5       	ldi	r30, 0x59	; 89
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 68       	ori	r24, 0x80	; 128
    190e:	8c 93       	st	X, r24
}
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <TIMER2_void_DisableCTCInt>:

void TIMER2_void_DisableCTCInt(void)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TIMSK_OCIE2);
    191e:	a9 e5       	ldi	r26, 0x59	; 89
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e9 e5       	ldi	r30, 0x59	; 89
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8f 77       	andi	r24, 0x7F	; 127
    192a:	8c 93       	st	X, r24
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <TIMER2_void_SetOVCallBack>:

void TIMER2_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <TIMER2_void_SetOVCallBack+0x6>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptr != NULL)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	31 f0       	breq	.+12     	; 0x1954 <TIMER2_void_SetOVCallBack+0x22>
	{
		TIMER2_OV_CallBack = Copy_ptr;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	90 93 b3 00 	sts	0x00B3, r25
    1950:	80 93 b2 00 	sts	0x00B2, r24
	}
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <TIMER2_void_SetCTCCallBack>:

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <TIMER2_void_SetCTCCallBack+0x6>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptr != NULL)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	31 f0       	breq	.+12     	; 0x1980 <TIMER2_void_SetCTCCallBack+0x22>
	{
		TIMER2_CTC_CallBack = Copy_ptr;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	90 93 b5 00 	sts	0x00B5, r25
    197c:	80 93 b4 00 	sts	0x00B4, r24
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <__vector_5>:

void __vector_5(void) __attribute__((signal , used));
void __vector_5(void)
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62

	TIMER2_OV_CallBack();
    19b4:	e0 91 b2 00 	lds	r30, 0x00B2
    19b8:	f0 91 b3 00 	lds	r31, 0x00B3
    19bc:	09 95       	icall
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <__vector_4>:

void __vector_4(void) __attribute__((signal , used));
void __vector_4(void)
{
    19e4:	1f 92       	push	r1
    19e6:	0f 92       	push	r0
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	0f 92       	push	r0
    19ec:	11 24       	eor	r1, r1
    19ee:	2f 93       	push	r18
    19f0:	3f 93       	push	r19
    19f2:	4f 93       	push	r20
    19f4:	5f 93       	push	r21
    19f6:	6f 93       	push	r22
    19f8:	7f 93       	push	r23
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	af 93       	push	r26
    1a00:	bf 93       	push	r27
    1a02:	ef 93       	push	r30
    1a04:	ff 93       	push	r31
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CTC_CallBack();
    1a0e:	e0 91 b4 00 	lds	r30, 0x00B4
    1a12:	f0 91 b5 00 	lds	r31, 0x00B5
    1a16:	09 95       	icall
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <button_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                            
* \Return value:   : None                                
*******************************************************************************/
void button_vidInit(void)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	dio_vidConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	67 e0       	ldi	r22, 0x07	; 7
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	66 e0       	ldi	r22, 0x06	; 6
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	65 e0       	ldi	r22, 0x05	; 5
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <Button_GetStatus>:
* \Parameters (in) : button  -> button ID                                                                       
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <Button_GetStatus+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <Button_GetStatus+0x8>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
	button_status_t status = RELEASED;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3c 83       	std	Y+4, r19	; 0x04
    1a94:	2b 83       	std	Y+3, r18	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	a1 f0       	breq	.+40     	; 0x1ac8 <Button_GetStatus+0x4c>
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	d1 f0       	breq	.+52     	; 0x1ade <Button_GetStatus+0x62>
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	01 f5       	brne	.+64     	; 0x1af2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_LOW)
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	0e 94 14 10 	call	0x2028	; 0x2028 <dio_dioLevelReadChannel>
    1aba:	88 23       	and	r24, r24
    1abc:	19 f4       	brne	.+6      	; 0x1ac4 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	17 c0       	rjmp	.+46     	; 0x1af2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    1ac6:	15 c0       	rjmp	.+42     	; 0x1af2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_LOW)
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	66 e0       	ldi	r22, 0x06	; 6
    1acc:	0e 94 14 10 	call	0x2028	; 0x2028 <dio_dioLevelReadChannel>
    1ad0:	88 23       	and	r24, r24
    1ad2:	19 f4       	brne	.+6      	; 0x1ada <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0c c0       	rjmp	.+24     	; 0x1af2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_LOW)
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	65 e0       	ldi	r22, 0x05	; 5
    1ae2:	0e 94 14 10 	call	0x2028	; 0x2028 <dio_dioLevelReadChannel>
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <Button_GetStatus+0x74>
		{
			status = PRESSED;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1af0:	19 82       	std	Y+1, r1	; 0x01
		}
#endif
		break;
	}
	return status;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <dio_vidConfigChannel+0x6>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <dio_vidConfigChannel+0x8>
    1b0a:	0f 92       	push	r0
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	6a 83       	std	Y+2, r22	; 0x02
    1b14:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3d 83       	std	Y+5, r19	; 0x05
    1b1e:	2c 83       	std	Y+4, r18	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <dio_vidConfigChannel+0x2a>
    1b2a:	43 c0       	rjmp	.+134    	; 0x1bb2 <dio_vidConfigChannel+0xb0>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <dio_vidConfigChannel+0x3e>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <dio_vidConfigChannel+0x58>
    1b3e:	bc c0       	rjmp	.+376    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <dio_vidConfigChannel+0x4a>
    1b4a:	5f c0       	rjmp	.+190    	; 0x1c0a <dio_vidConfigChannel+0x108>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <dio_vidConfigChannel+0x56>
    1b56:	85 c0       	rjmp	.+266    	; 0x1c62 <dio_vidConfigChannel+0x160>
    1b58:	af c0       	rjmp	.+350    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	a1 f4       	brne	.+40     	; 0x1b88 <dio_vidConfigChannel+0x86>
		{
			SET_BIT (DIO_DDRA_REG,channel);
    1b60:	aa e3       	ldi	r26, 0x3A	; 58
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ea e3       	ldi	r30, 0x3A	; 58
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <dio_vidConfigChannel+0x7c>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <dio_vidConfigChannel+0x78>
    1b82:	84 2b       	or	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	98 c0       	rjmp	.+304    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
    1b88:	aa e3       	ldi	r26, 0x3A	; 58
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ea e3       	ldi	r30, 0x3A	; 58
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <dio_vidConfigChannel+0xa4>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <dio_vidConfigChannel+0xa0>
    1baa:	80 95       	com	r24
    1bac:	84 23       	and	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	83 c0       	rjmp	.+262    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	a1 f4       	brne	.+40     	; 0x1be0 <dio_vidConfigChannel+0xde>
		{
			SET_BIT (DIO_DDRB_REG,channel);
    1bb8:	a7 e3       	ldi	r26, 0x37	; 55
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e7 e3       	ldi	r30, 0x37	; 55
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <dio_vidConfigChannel+0xd4>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <dio_vidConfigChannel+0xd0>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	6c c0       	rjmp	.+216    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
    1be0:	a7 e3       	ldi	r26, 0x37	; 55
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <dio_vidConfigChannel+0xfc>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <dio_vidConfigChannel+0xf8>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	57 c0       	rjmp	.+174    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	a1 f4       	brne	.+40     	; 0x1c38 <dio_vidConfigChannel+0x136>
		{
			SET_BIT (DIO_DDRC_REG,channel);
    1c10:	a4 e3       	ldi	r26, 0x34	; 52
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e4 e3       	ldi	r30, 0x34	; 52
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <dio_vidConfigChannel+0x12c>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <dio_vidConfigChannel+0x128>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	40 c0       	rjmp	.+128    	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
    1c38:	a4 e3       	ldi	r26, 0x34	; 52
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e4 e3       	ldi	r30, 0x34	; 52
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <dio_vidConfigChannel+0x154>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <dio_vidConfigChannel+0x150>
    1c5a:	80 95       	com	r24
    1c5c:	84 23       	and	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	2b c0       	rjmp	.+86     	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	a1 f4       	brne	.+40     	; 0x1c90 <dio_vidConfigChannel+0x18e>
		{
			SET_BIT (DIO_DDRD_REG,channel);
    1c68:	a1 e3       	ldi	r26, 0x31	; 49
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e1 e3       	ldi	r30, 0x31	; 49
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <dio_vidConfigChannel+0x184>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <dio_vidConfigChannel+0x180>
    1c8a:	84 2b       	or	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
    1c90:	a1 e3       	ldi	r26, 0x31	; 49
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e1 e3       	ldi	r30, 0x31	; 49
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <dio_vidConfigChannel+0x1ac>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <dio_vidConfigChannel+0x1a8>
    1cb2:	80 95       	com	r24
    1cb4:	84 23       	and	r24, r20
    1cb6:	8c 93       	st	X, r24
		}
		break;
	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <dio_vidWriteChannel+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <dio_vidWriteChannel+0x8>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	6a 83       	std	Y+2, r22	; 0x02
    1cda:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	3d 83       	std	Y+5, r19	; 0x05
    1ce4:	2c 83       	std	Y+4, r18	; 0x04
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <dio_vidWriteChannel+0x2a>
    1cf0:	43 c0       	rjmp	.+134    	; 0x1d78 <dio_vidWriteChannel+0xb0>
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <dio_vidWriteChannel+0x3e>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	71 f0       	breq	.+28     	; 0x1d20 <dio_vidWriteChannel+0x58>
    1d04:	bc c0       	rjmp	.+376    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
    1d06:	2c 81       	ldd	r18, Y+4	; 0x04
    1d08:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0a:	22 30       	cpi	r18, 0x02	; 2
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <dio_vidWriteChannel+0x4a>
    1d10:	5f c0       	rjmp	.+190    	; 0x1dd0 <dio_vidWriteChannel+0x108>
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <dio_vidWriteChannel+0x56>
    1d1c:	85 c0       	rjmp	.+266    	; 0x1e28 <dio_vidWriteChannel+0x160>
    1d1e:	af c0       	rjmp	.+350    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 23       	and	r24, r24
    1d24:	a9 f4       	brne	.+42     	; 0x1d50 <dio_vidWriteChannel+0x88>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
    1d26:	ab e3       	ldi	r26, 0x3B	; 59
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <dio_vidWriteChannel+0x7c>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <dio_vidWriteChannel+0x78>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	97 c0       	rjmp	.+302    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
    1d50:	ab e3       	ldi	r26, 0x3B	; 59
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	eb e3       	ldi	r30, 0x3B	; 59
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <dio_vidWriteChannel+0xa6>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <dio_vidWriteChannel+0xa2>
    1d72:	84 2b       	or	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	83 c0       	rjmp	.+262    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	88 23       	and	r24, r24
    1d7c:	a9 f4       	brne	.+42     	; 0x1da8 <dio_vidWriteChannel+0xe0>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
    1d7e:	a8 e3       	ldi	r26, 0x38	; 56
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <dio_vidWriteChannel+0xd4>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <dio_vidWriteChannel+0xd0>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	6b c0       	rjmp	.+214    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
    1da8:	a8 e3       	ldi	r26, 0x38	; 56
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e8 e3       	ldi	r30, 0x38	; 56
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <dio_vidWriteChannel+0xfe>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <dio_vidWriteChannel+0xfa>
    1dca:	84 2b       	or	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	57 c0       	rjmp	.+174    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	88 23       	and	r24, r24
    1dd4:	a9 f4       	brne	.+42     	; 0x1e00 <dio_vidWriteChannel+0x138>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
    1dd6:	a5 e3       	ldi	r26, 0x35	; 53
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e5 e3       	ldi	r30, 0x35	; 53
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <dio_vidWriteChannel+0x12c>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <dio_vidWriteChannel+0x128>
    1df8:	80 95       	com	r24
    1dfa:	84 23       	and	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
    1e00:	a5 e3       	ldi	r26, 0x35	; 53
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e3       	ldi	r30, 0x35	; 53
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <dio_vidWriteChannel+0x156>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <dio_vidWriteChannel+0x152>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	2b c0       	rjmp	.+86     	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 23       	and	r24, r24
    1e2c:	a9 f4       	brne	.+42     	; 0x1e58 <dio_vidWriteChannel+0x190>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
    1e2e:	a2 e3       	ldi	r26, 0x32	; 50
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e2 e3       	ldi	r30, 0x32	; 50
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <dio_vidWriteChannel+0x184>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <dio_vidWriteChannel+0x180>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	13 c0       	rjmp	.+38     	; 0x1e7e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
    1e58:	a2 e3       	ldi	r26, 0x32	; 50
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e2 e3       	ldi	r30, 0x32	; 50
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <dio_vidWriteChannel+0x1ae>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <dio_vidWriteChannel+0x1aa>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
		}
		break;
	}
}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <dio_vidSetPortValue>:
					 mask  -> data mask
* \Return value:   : None                            
*******************************************************************************/

void dio_vidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <dio_vidSetPortValue+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <dio_vidSetPortValue+0x8>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	6a 83       	std	Y+2, r22	; 0x02

    switch(Copy_u8Port)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3c 83       	std	Y+4, r19	; 0x04
    1ea6:	2b 83       	std	Y+3, r18	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	91 05       	cpc	r25, r1
    1eb0:	d1 f0       	breq	.+52     	; 0x1ee6 <dio_vidSetPortValue+0x58>
    1eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb6:	22 30       	cpi	r18, 0x02	; 2
    1eb8:	31 05       	cpc	r19, r1
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <dio_vidSetPortValue+0x38>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	61 f0       	breq	.+24     	; 0x1edc <dio_vidSetPortValue+0x4e>
    1ec4:	1e c0       	rjmp	.+60     	; 0x1f02 <dio_vidSetPortValue+0x74>
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	22 30       	cpi	r18, 0x02	; 2
    1ecc:	31 05       	cpc	r19, r1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <dio_vidSetPortValue+0x62>
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	81 f0       	breq	.+32     	; 0x1efa <dio_vidSetPortValue+0x6c>
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <dio_vidSetPortValue+0x74>
    {
        case DIO_PORTA:  DIO_PORTA_REG = Copy_u8Value; break;
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	80 83       	st	Z, r24
    1ee4:	0e c0       	rjmp	.+28     	; 0x1f02 <dio_vidSetPortValue+0x74>
        case DIO_PORTB:  DIO_PORTB_REG = Copy_u8Value; break;
    1ee6:	e8 e3       	ldi	r30, 0x38	; 56
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	80 83       	st	Z, r24
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <dio_vidSetPortValue+0x74>
        case DIO_PORTC:  DIO_PORTC_REG = Copy_u8Value; break;
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 83       	st	Z, r24
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <dio_vidSetPortValue+0x74>
        case DIO_PORTD:  DIO_PORTD_REG = Copy_u8Value; break;
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
        default: break;
    }
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <dio_vidWriteChannelGroup>:

void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <dio_vidWriteChannelGroup+0x6>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6a 83       	std	Y+2, r22	; 0x02
    1f20:	4b 83       	std	Y+3, r20	; 0x03

}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/

void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <dio_vidFlipChannel+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <dio_vidFlipChannel+0x8>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3c 83       	std	Y+4, r19	; 0x04
    1f46:	2b 83       	std	Y+3, r18	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	49 f1       	breq	.+82     	; 0x1fa4 <dio_vidFlipChannel+0x76>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <dio_vidFlipChannel+0x38>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <dio_vidFlipChannel+0x4e>
    1f64:	5a c0       	rjmp	.+180    	; 0x201a <dio_vidFlipChannel+0xec>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	71 f1       	breq	.+92     	; 0x1fcc <dio_vidFlipChannel+0x9e>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	e9 f1       	breq	.+122    	; 0x1ff4 <dio_vidFlipChannel+0xc6>
    1f7a:	4f c0       	rjmp	.+158    	; 0x201a <dio_vidFlipChannel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
    1f7c:	ab e3       	ldi	r26, 0x3B	; 59
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	eb e3       	ldi	r30, 0x3B	; 59
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <dio_vidFlipChannel+0x6c>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <dio_vidFlipChannel+0x68>
    1f9e:	84 27       	eor	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	3b c0       	rjmp	.+118    	; 0x201a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
    1fa4:	a8 e3       	ldi	r26, 0x38	; 56
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e8 e3       	ldi	r30, 0x38	; 56
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <dio_vidFlipChannel+0x94>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <dio_vidFlipChannel+0x90>
    1fc6:	84 27       	eor	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	27 c0       	rjmp	.+78     	; 0x201a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
    1fcc:	a5 e3       	ldi	r26, 0x35	; 53
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e3       	ldi	r30, 0x35	; 53
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <dio_vidFlipChannel+0xbc>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <dio_vidFlipChannel+0xb8>
    1fee:	84 27       	eor	r24, r20
    1ff0:	8c 93       	st	X, r24
    1ff2:	13 c0       	rjmp	.+38     	; 0x201a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
    1ff4:	a2 e3       	ldi	r26, 0x32	; 50
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e2 e3       	ldi	r30, 0x32	; 50
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 2e       	mov	r0, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <dio_vidFlipChannel+0xe4>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	0a 94       	dec	r0
    2014:	e2 f7       	brpl	.-8      	; 0x200e <dio_vidFlipChannel+0xe0>
    2016:	84 27       	eor	r24, r20
    2018:	8c 93       	st	X, r24
		break;
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <dio_dioLevelReadChannel>:
* \Parameters (in) : port     -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <dio_dioLevelReadChannel+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <dio_dioLevelReadChannel+0x8>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	8a 83       	std	Y+2, r24	; 0x02
    2038:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_pinRead = STD_LOW;
    203a:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	2c 83       	std	Y+4, r18	; 0x04
    2046:	4c 81       	ldd	r20, Y+4	; 0x04
    2048:	5d 81       	ldd	r21, Y+5	; 0x05
    204a:	41 30       	cpi	r20, 0x01	; 1
    204c:	51 05       	cpc	r21, r1
    204e:	41 f1       	breq	.+80     	; 0x20a0 <dio_dioLevelReadChannel+0x78>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	91 05       	cpc	r25, r1
    2058:	34 f4       	brge	.+12     	; 0x2066 <dio_dioLevelReadChannel+0x3e>
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	21 15       	cp	r18, r1
    2060:	31 05       	cpc	r19, r1
    2062:	61 f0       	breq	.+24     	; 0x207c <dio_dioLevelReadChannel+0x54>
    2064:	52 c0       	rjmp	.+164    	; 0x210a <dio_dioLevelReadChannel+0xe2>
    2066:	4c 81       	ldd	r20, Y+4	; 0x04
    2068:	5d 81       	ldd	r21, Y+5	; 0x05
    206a:	42 30       	cpi	r20, 0x02	; 2
    206c:	51 05       	cpc	r21, r1
    206e:	51 f1       	breq	.+84     	; 0x20c4 <dio_dioLevelReadChannel+0x9c>
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	b9 f1       	breq	.+110    	; 0x20e8 <dio_dioLevelReadChannel+0xc0>
    207a:	47 c0       	rjmp	.+142    	; 0x210a <dio_dioLevelReadChannel+0xe2>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
    207c:	e9 e3       	ldi	r30, 0x39	; 57
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a9 01       	movw	r20, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <dio_dioLevelReadChannel+0x6c>
    2090:	55 95       	asr	r21
    2092:	47 95       	ror	r20
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <dio_dioLevelReadChannel+0x68>
    2098:	ca 01       	movw	r24, r20
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	35 c0       	rjmp	.+106    	; 0x210a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
    20a0:	e6 e3       	ldi	r30, 0x36	; 54
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a9 01       	movw	r20, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <dio_dioLevelReadChannel+0x90>
    20b4:	55 95       	asr	r21
    20b6:	47 95       	ror	r20
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <dio_dioLevelReadChannel+0x8c>
    20bc:	ca 01       	movw	r24, r20
    20be:	81 70       	andi	r24, 0x01	; 1
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	23 c0       	rjmp	.+70     	; 0x210a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
    20c4:	e3 e3       	ldi	r30, 0x33	; 51
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a9 01       	movw	r20, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <dio_dioLevelReadChannel+0xb4>
    20d8:	55 95       	asr	r21
    20da:	47 95       	ror	r20
    20dc:	8a 95       	dec	r24
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <dio_dioLevelReadChannel+0xb0>
    20e0:	ca 01       	movw	r24, r20
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	11 c0       	rjmp	.+34     	; 0x210a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
    20e8:	e0 e3       	ldi	r30, 0x30	; 48
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a9 01       	movw	r20, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <dio_dioLevelReadChannel+0xd8>
    20fc:	55 95       	asr	r21
    20fe:	47 95       	ror	r20
    2100:	8a 95       	dec	r24
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <dio_dioLevelReadChannel+0xd4>
    2104:	ca 01       	movw	r24, r20
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	89 83       	std	Y+1, r24	; 0x01
		break;
    }
	return loc_pinRead;
    210a:	89 81       	ldd	r24, Y+1	; 0x01
}
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <dio_vidEnablePullUp>:
* \Parameters (in) : port  -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <dio_vidEnablePullUp+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	6a 83       	std	Y+2, r22	; 0x02
	/*	show me your code */	
	
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <enablePulse>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	a6 97       	sbiw	r28, 0x26	; 38
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	62 e0       	ldi	r22, 0x02	; 2
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e8       	ldi	r26, 0x80	; 128
    2158:	bf e3       	ldi	r27, 0x3F	; 63
    215a:	8b a3       	std	Y+35, r24	; 0x23
    215c:	9c a3       	std	Y+36, r25	; 0x24
    215e:	ad a3       	std	Y+37, r26	; 0x25
    2160:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2162:	6b a1       	ldd	r22, Y+35	; 0x23
    2164:	7c a1       	ldd	r23, Y+36	; 0x24
    2166:	8d a1       	ldd	r24, Y+37	; 0x25
    2168:	9e a1       	ldd	r25, Y+38	; 0x26
    216a:	2b ea       	ldi	r18, 0xAB	; 171
    216c:	3a ea       	ldi	r19, 0xAA	; 170
    216e:	4a ea       	ldi	r20, 0xAA	; 170
    2170:	50 e4       	ldi	r21, 0x40	; 64
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
    217c:	98 a3       	std	Y+32, r25	; 0x20
    217e:	a9 a3       	std	Y+33, r26	; 0x21
    2180:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2182:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2184:	78 a1       	ldd	r23, Y+32	; 0x20
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	9a a1       	ldd	r25, Y+34	; 0x22
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	1c f4       	brge	.+6      	; 0x21a0 <enablePulse+0x6c>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	8e 8f       	std	Y+30, r24	; 0x1e
    219e:	91 c0       	rjmp	.+290    	; 0x22c2 <enablePulse+0x18e>
	else if (__tmp > 255)
    21a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21a2:	78 a1       	ldd	r23, Y+32	; 0x20
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	53 e4       	ldi	r21, 0x43	; 67
    21b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <enablePulse+0x86>
    21b8:	7b c0       	rjmp	.+246    	; 0x22b0 <enablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    21ba:	6b a1       	ldd	r22, Y+35	; 0x23
    21bc:	7c a1       	ldd	r23, Y+36	; 0x24
    21be:	8d a1       	ldd	r24, Y+37	; 0x25
    21c0:	9e a1       	ldd	r25, Y+38	; 0x26
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a e7       	ldi	r20, 0x7A	; 122
    21c8:	54 e4       	ldi	r21, 0x44	; 68
    21ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8a 8f       	std	Y+26, r24	; 0x1a
    21d4:	9b 8f       	std	Y+27, r25	; 0x1b
    21d6:	ac 8f       	std	Y+28, r26	; 0x1c
    21d8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4a e7       	ldi	r20, 0x7A	; 122
    21e8:	55 e4       	ldi	r21, 0x45	; 69
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	8e 8b       	std	Y+22, r24	; 0x16
    21f4:	9f 8b       	std	Y+23, r25	; 0x17
    21f6:	a8 8f       	std	Y+24, r26	; 0x18
    21f8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21fa:	6e 89       	ldd	r22, Y+22	; 0x16
    21fc:	7f 89       	ldd	r23, Y+23	; 0x17
    21fe:	88 8d       	ldd	r24, Y+24	; 0x18
    2200:	99 8d       	ldd	r25, Y+25	; 0x19
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	2c f4       	brge	.+10     	; 0x221c <enablePulse+0xe8>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9d 8b       	std	Y+21, r25	; 0x15
    2218:	8c 8b       	std	Y+20, r24	; 0x14
    221a:	3f c0       	rjmp	.+126    	; 0x229a <enablePulse+0x166>
	else if (__tmp > 65535)
    221c:	6e 89       	ldd	r22, Y+22	; 0x16
    221e:	7f 89       	ldd	r23, Y+23	; 0x17
    2220:	88 8d       	ldd	r24, Y+24	; 0x18
    2222:	99 8d       	ldd	r25, Y+25	; 0x19
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	4c f5       	brge	.+82     	; 0x2286 <enablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2234:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2236:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2238:	8c 8d       	ldd	r24, Y+28	; 0x1c
    223a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9d 8b       	std	Y+21, r25	; 0x15
    225a:	8c 8b       	std	Y+20, r24	; 0x14
    225c:	0f c0       	rjmp	.+30     	; 0x227c <enablePulse+0x148>
    225e:	80 e9       	ldi	r24, 0x90	; 144
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	9b 8b       	std	Y+19, r25	; 0x13
    2264:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2266:	8a 89       	ldd	r24, Y+18	; 0x12
    2268:	9b 89       	ldd	r25, Y+19	; 0x13
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <enablePulse+0x136>
    226e:	9b 8b       	std	Y+19, r25	; 0x13
    2270:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	8c 89       	ldd	r24, Y+20	; 0x14
    2274:	9d 89       	ldd	r25, Y+21	; 0x15
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	9d 8b       	std	Y+21, r25	; 0x15
    227a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	8c 89       	ldd	r24, Y+20	; 0x14
    227e:	9d 89       	ldd	r25, Y+21	; 0x15
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	69 f7       	brne	.-38     	; 0x225e <enablePulse+0x12a>
    2284:	24 c0       	rjmp	.+72     	; 0x22ce <enablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	6e 89       	ldd	r22, Y+22	; 0x16
    2288:	7f 89       	ldd	r23, Y+23	; 0x17
    228a:	88 8d       	ldd	r24, Y+24	; 0x18
    228c:	99 8d       	ldd	r25, Y+25	; 0x19
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9d 8b       	std	Y+21, r25	; 0x15
    2298:	8c 8b       	std	Y+20, r24	; 0x14
    229a:	8c 89       	ldd	r24, Y+20	; 0x14
    229c:	9d 89       	ldd	r25, Y+21	; 0x15
    229e:	99 8b       	std	Y+17, r25	; 0x11
    22a0:	88 8b       	std	Y+16, r24	; 0x10
    22a2:	88 89       	ldd	r24, Y+16	; 0x10
    22a4:	99 89       	ldd	r25, Y+17	; 0x11
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <enablePulse+0x172>
    22aa:	99 8b       	std	Y+17, r25	; 0x11
    22ac:	88 8b       	std	Y+16, r24	; 0x10
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <enablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22b2:	78 a1       	ldd	r23, Y+32	; 0x20
    22b4:	89 a1       	ldd	r24, Y+33	; 0x21
    22b6:	9a a1       	ldd	r25, Y+34	; 0x22
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8e 8f       	std	Y+30, r24	; 0x1e
    22c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c8:	8a 95       	dec	r24
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <enablePulse+0x194>
    22cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e4       	ldi	r27, 0x40	; 64
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	55 e4       	ldi	r21, 0x45	; 69
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <enablePulse+0x1f6>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <enablePulse+0x274>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <enablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <enablePulse+0x256>
    236c:	80 e9       	ldi	r24, 0x90	; 144
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <enablePulse+0x244>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <enablePulse+0x238>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <enablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <enablePulse+0x280>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23bc:	a6 96       	adiw	r28, 0x26	; 38
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <lcd_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	e4 97       	sbiw	r28, 0x34	; 52
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	63 e0       	ldi	r22, 0x03	; 3
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	//dio_vidConfigChannel(LCD_RW_PORT, LCD_RW_CHANNEL, OUTPUT);
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
    2432:	82 e0       	ldi	r24, 0x02	; 2
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	66 e0       	ldi	r22, 0x06	; 6
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e7       	ldi	r26, 0x70	; 112
    2448:	b1 e4       	ldi	r27, 0x41	; 65
    244a:	89 ab       	std	Y+49, r24	; 0x31
    244c:	9a ab       	std	Y+50, r25	; 0x32
    244e:	ab ab       	std	Y+51, r26	; 0x33
    2450:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	69 a9       	ldd	r22, Y+49	; 0x31
    2454:	7a a9       	ldd	r23, Y+50	; 0x32
    2456:	8b a9       	ldd	r24, Y+51	; 0x33
    2458:	9c a9       	ldd	r25, Y+52	; 0x34
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8d a7       	std	Y+45, r24	; 0x2d
    246c:	9e a7       	std	Y+46, r25	; 0x2e
    246e:	af a7       	std	Y+47, r26	; 0x2f
    2470:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2472:	6d a5       	ldd	r22, Y+45	; 0x2d
    2474:	7e a5       	ldd	r23, Y+46	; 0x2e
    2476:	8f a5       	ldd	r24, Y+47	; 0x2f
    2478:	98 a9       	ldd	r25, Y+48	; 0x30
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <lcd_vidInit+0xc6>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c a7       	std	Y+44, r25	; 0x2c
    2490:	8b a7       	std	Y+43, r24	; 0x2b
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <lcd_vidInit+0x144>
	else if (__tmp > 65535)
    2494:	6d a5       	ldd	r22, Y+45	; 0x2d
    2496:	7e a5       	ldd	r23, Y+46	; 0x2e
    2498:	8f a5       	ldd	r24, Y+47	; 0x2f
    249a:	98 a9       	ldd	r25, Y+48	; 0x30
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <lcd_vidInit+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	69 a9       	ldd	r22, Y+49	; 0x31
    24ae:	7a a9       	ldd	r23, Y+50	; 0x32
    24b0:	8b a9       	ldd	r24, Y+51	; 0x33
    24b2:	9c a9       	ldd	r25, Y+52	; 0x34
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <lcd_vidInit+0x126>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	9a a7       	std	Y+42, r25	; 0x2a
    24dc:	89 a7       	std	Y+41, r24	; 0x29
    24de:	89 a5       	ldd	r24, Y+41	; 0x29
    24e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <lcd_vidInit+0x114>
    24e6:	9a a7       	std	Y+42, r25	; 0x2a
    24e8:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9c a7       	std	Y+44, r25	; 0x2c
    24f2:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <lcd_vidInit+0x108>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <lcd_vidInit+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2500:	7e a5       	ldd	r23, Y+46	; 0x2e
    2502:	8f a5       	ldd	r24, Y+47	; 0x2f
    2504:	98 a9       	ldd	r25, Y+48	; 0x30
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c a7       	std	Y+44, r25	; 0x2c
    2510:	8b a7       	std	Y+43, r24	; 0x2b
    2512:	8b a5       	ldd	r24, Y+43	; 0x2b
    2514:	9c a5       	ldd	r25, Y+44	; 0x2c
    2516:	98 a7       	std	Y+40, r25	; 0x28
    2518:	8f a3       	std	Y+39, r24	; 0x27
    251a:	8f a1       	ldd	r24, Y+39	; 0x27
    251c:	98 a5       	ldd	r25, Y+40	; 0x28
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <lcd_vidInit+0x150>
    2522:	98 a7       	std	Y+40, r25	; 0x28
    2524:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	lcd_vidSendCmd(0x03);
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 ea       	ldi	r26, 0xA0	; 160
    2532:	b0 e4       	ldi	r27, 0x40	; 64
    2534:	8b a3       	std	Y+35, r24	; 0x23
    2536:	9c a3       	std	Y+36, r25	; 0x24
    2538:	ad a3       	std	Y+37, r26	; 0x25
    253a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	55 e4       	ldi	r21, 0x45	; 69
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8f 8f       	std	Y+31, r24	; 0x1f
    2556:	98 a3       	std	Y+32, r25	; 0x20
    2558:	a9 a3       	std	Y+33, r26	; 0x21
    255a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    255c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    255e:	78 a1       	ldd	r23, Y+32	; 0x20
    2560:	89 a1       	ldd	r24, Y+33	; 0x21
    2562:	9a a1       	ldd	r25, Y+34	; 0x22
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <lcd_vidInit+0x1b0>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9e 8f       	std	Y+30, r25	; 0x1e
    257a:	8d 8f       	std	Y+29, r24	; 0x1d
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <lcd_vidInit+0x22e>
	else if (__tmp > 65535)
    257e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2580:	78 a1       	ldd	r23, Y+32	; 0x20
    2582:	89 a1       	ldd	r24, Y+33	; 0x21
    2584:	9a a1       	ldd	r25, Y+34	; 0x22
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <lcd_vidInit+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9e 8f       	std	Y+30, r25	; 0x1e
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
    25be:	0f c0       	rjmp	.+30     	; 0x25de <lcd_vidInit+0x210>
    25c0:	80 e9       	ldi	r24, 0x90	; 144
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	9c 8f       	std	Y+28, r25	; 0x1c
    25c6:	8b 8f       	std	Y+27, r24	; 0x1b
    25c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <lcd_vidInit+0x1fe>
    25d0:	9c 8f       	std	Y+28, r25	; 0x1c
    25d2:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9e 8f       	std	Y+30, r25	; 0x1e
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <lcd_vidInit+0x1f2>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <lcd_vidInit+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25ea:	78 a1       	ldd	r23, Y+32	; 0x20
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9e 8f       	std	Y+30, r25	; 0x1e
    25fa:	8d 8f       	std	Y+29, r24	; 0x1d
    25fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2600:	9a 8f       	std	Y+26, r25	; 0x1a
    2602:	89 8f       	std	Y+25, r24	; 0x19
    2604:	89 8d       	ldd	r24, Y+25	; 0x19
    2606:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <lcd_vidInit+0x23a>
    260c:	9a 8f       	std	Y+26, r25	; 0x1a
    260e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a8 ec       	ldi	r26, 0xC8	; 200
    261c:	b2 e4       	ldi	r27, 0x42	; 66
    261e:	8d 8b       	std	Y+21, r24	; 0x15
    2620:	9e 8b       	std	Y+22, r25	; 0x16
    2622:	af 8b       	std	Y+23, r26	; 0x17
    2624:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2626:	6d 89       	ldd	r22, Y+21	; 0x15
    2628:	7e 89       	ldd	r23, Y+22	; 0x16
    262a:	8f 89       	ldd	r24, Y+23	; 0x17
    262c:	98 8d       	ldd	r25, Y+24	; 0x18
    262e:	2b ea       	ldi	r18, 0xAB	; 171
    2630:	3a ea       	ldi	r19, 0xAA	; 170
    2632:	4a ea       	ldi	r20, 0xAA	; 170
    2634:	50 e4       	ldi	r21, 0x40	; 64
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	89 8b       	std	Y+17, r24	; 0x11
    2640:	9a 8b       	std	Y+18, r25	; 0x12
    2642:	ab 8b       	std	Y+19, r26	; 0x13
    2644:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2646:	69 89       	ldd	r22, Y+17	; 0x11
    2648:	7a 89       	ldd	r23, Y+18	; 0x12
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	1c f4       	brge	.+6      	; 0x2664 <lcd_vidInit+0x296>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	88 8b       	std	Y+16, r24	; 0x10
    2662:	91 c0       	rjmp	.+290    	; 0x2786 <lcd_vidInit+0x3b8>
	else if (__tmp > 255)
    2664:	69 89       	ldd	r22, Y+17	; 0x11
    2666:	7a 89       	ldd	r23, Y+18	; 0x12
    2668:	8b 89       	ldd	r24, Y+19	; 0x13
    266a:	9c 89       	ldd	r25, Y+20	; 0x14
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	53 e4       	ldi	r21, 0x43	; 67
    2674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	0c f0       	brlt	.+2      	; 0x267e <lcd_vidInit+0x2b0>
    267c:	7b c0       	rjmp	.+246    	; 0x2774 <lcd_vidInit+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    267e:	6d 89       	ldd	r22, Y+21	; 0x15
    2680:	7e 89       	ldd	r23, Y+22	; 0x16
    2682:	8f 89       	ldd	r24, Y+23	; 0x17
    2684:	98 8d       	ldd	r25, Y+24	; 0x18
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8c 87       	std	Y+12, r24	; 0x0c
    2698:	9d 87       	std	Y+13, r25	; 0x0d
    269a:	ae 87       	std	Y+14, r26	; 0x0e
    269c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	6c 85       	ldd	r22, Y+12	; 0x0c
    26a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    26a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a e7       	ldi	r20, 0x7A	; 122
    26ac:	55 e4       	ldi	r21, 0x45	; 69
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	88 87       	std	Y+8, r24	; 0x08
    26b8:	99 87       	std	Y+9, r25	; 0x09
    26ba:	aa 87       	std	Y+10, r26	; 0x0a
    26bc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26be:	68 85       	ldd	r22, Y+8	; 0x08
    26c0:	79 85       	ldd	r23, Y+9	; 0x09
    26c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <lcd_vidInit+0x312>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9f 83       	std	Y+7, r25	; 0x07
    26dc:	8e 83       	std	Y+6, r24	; 0x06
    26de:	3f c0       	rjmp	.+126    	; 0x275e <lcd_vidInit+0x390>
	else if (__tmp > 65535)
    26e0:	68 85       	ldd	r22, Y+8	; 0x08
    26e2:	79 85       	ldd	r23, Y+9	; 0x09
    26e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <lcd_vidInit+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    26fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    26fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    26fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9f 83       	std	Y+7, r25	; 0x07
    271e:	8e 83       	std	Y+6, r24	; 0x06
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <lcd_vidInit+0x372>
    2722:	80 e9       	ldi	r24, 0x90	; 144
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	9d 83       	std	Y+5, r25	; 0x05
    2728:	8c 83       	std	Y+4, r24	; 0x04
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <lcd_vidInit+0x360>
    2732:	9d 83       	std	Y+5, r25	; 0x05
    2734:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	9f 81       	ldd	r25, Y+7	; 0x07
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9f 83       	std	Y+7, r25	; 0x07
    273e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9f 81       	ldd	r25, Y+7	; 0x07
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <lcd_vidInit+0x354>
    2748:	24 c0       	rjmp	.+72     	; 0x2792 <lcd_vidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	68 85       	ldd	r22, Y+8	; 0x08
    274c:	79 85       	ldd	r23, Y+9	; 0x09
    274e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2750:	9b 85       	ldd	r25, Y+11	; 0x0b
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	8e 83       	std	Y+6, r24	; 0x06
    275e:	8e 81       	ldd	r24, Y+6	; 0x06
    2760:	9f 81       	ldd	r25, Y+7	; 0x07
    2762:	9b 83       	std	Y+3, r25	; 0x03
    2764:	8a 83       	std	Y+2, r24	; 0x02
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <lcd_vidInit+0x39c>
    276e:	9b 83       	std	Y+3, r25	; 0x03
    2770:	8a 83       	std	Y+2, r24	; 0x02
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <lcd_vidInit+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2774:	69 89       	ldd	r22, Y+17	; 0x11
    2776:	7a 89       	ldd	r23, Y+18	; 0x12
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	88 8b       	std	Y+16, r24	; 0x10
    2786:	88 89       	ldd	r24, Y+16	; 0x10
    2788:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	8a 95       	dec	r24
    278e:	f1 f7       	brne	.-4      	; 0x278c <lcd_vidInit+0x3be>
    2790:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	lcd_vidSendCmd(0x03);
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
    279e:	88 e2       	ldi	r24, 0x28	; 40
    27a0:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
	// lcd_vidCustomWrite();
	// lcd_vidGotoRowColumn(0, 0);
	lcd_vidSendCmd(_LCD_CLEAR);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
}
    27aa:	e4 96       	adiw	r28, 0x34	; 52
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Command Mode	*/
	//dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	82 95       	swap	r24
    27d6:	8f 70       	andi	r24, 0x0F	; 15
    27d8:	98 2f       	mov	r25, r24
    27da:	91 70       	andi	r25, 0x01	; 1
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	49 2f       	mov	r20, r25
    27e2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	82 95       	swap	r24
    27ea:	86 95       	lsr	r24
    27ec:	87 70       	andi	r24, 0x07	; 7
    27ee:	98 2f       	mov	r25, r24
    27f0:	91 70       	andi	r25, 0x01	; 1
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	49 2f       	mov	r20, r25
    27f8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	82 95       	swap	r24
    2800:	86 95       	lsr	r24
    2802:	86 95       	lsr	r24
    2804:	83 70       	andi	r24, 0x03	; 3
    2806:	98 2f       	mov	r25, r24
    2808:	91 70       	andi	r25, 0x01	; 1
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	62 e0       	ldi	r22, 0x02	; 2
    280e:	49 2f       	mov	r20, r25
    2810:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	98 2f       	mov	r25, r24
    2818:	99 1f       	adc	r25, r25
    281a:	99 27       	eor	r25, r25
    281c:	99 1f       	adc	r25, r25
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	66 e0       	ldi	r22, 0x06	; 6
    2822:	49 2f       	mov	r20, r25
    2824:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	
	enablePulse();
    2828:	0e 94 9a 10 	call	0x2134	; 0x2134 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	98 2f       	mov	r25, r24
    2830:	91 70       	andi	r25, 0x01	; 1
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	49 2f       	mov	r20, r25
    2838:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	86 95       	lsr	r24
    2840:	98 2f       	mov	r25, r24
    2842:	91 70       	andi	r25, 0x01	; 1
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	61 e0       	ldi	r22, 0x01	; 1
    2848:	49 2f       	mov	r20, r25
    284a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	86 95       	lsr	r24
    2852:	86 95       	lsr	r24
    2854:	98 2f       	mov	r25, r24
    2856:	91 70       	andi	r25, 0x01	; 1
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	62 e0       	ldi	r22, 0x02	; 2
    285c:	49 2f       	mov	r20, r25
    285e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	86 95       	lsr	r24
    2866:	86 95       	lsr	r24
    2868:	86 95       	lsr	r24
    286a:	98 2f       	mov	r25, r24
    286c:	91 70       	andi	r25, 0x01	; 1
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	66 e0       	ldi	r22, 0x06	; 6
    2872:	49 2f       	mov	r20, r25
    2874:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	
	enablePulse();
    2878:	0e 94 9a 10 	call	0x2134	; 0x2134 <enablePulse>
}
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Data Mode	*/
	//dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	63 e0       	ldi	r22, 0x03	; 3
    2894:	41 e0       	ldi	r20, 0x01	; 1
    2896:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	82 95       	swap	r24
    289e:	8f 70       	andi	r24, 0x0F	; 15
    28a0:	98 2f       	mov	r25, r24
    28a2:	91 70       	andi	r25, 0x01	; 1
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	49 2f       	mov	r20, r25
    28aa:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	82 95       	swap	r24
    28b2:	86 95       	lsr	r24
    28b4:	87 70       	andi	r24, 0x07	; 7
    28b6:	98 2f       	mov	r25, r24
    28b8:	91 70       	andi	r25, 0x01	; 1
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	49 2f       	mov	r20, r25
    28c0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	82 95       	swap	r24
    28c8:	86 95       	lsr	r24
    28ca:	86 95       	lsr	r24
    28cc:	83 70       	andi	r24, 0x03	; 3
    28ce:	98 2f       	mov	r25, r24
    28d0:	91 70       	andi	r25, 0x01	; 1
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	62 e0       	ldi	r22, 0x02	; 2
    28d6:	49 2f       	mov	r20, r25
    28d8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	98 2f       	mov	r25, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	99 27       	eor	r25, r25
    28e4:	99 1f       	adc	r25, r25
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	66 e0       	ldi	r22, 0x06	; 6
    28ea:	49 2f       	mov	r20, r25
    28ec:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	
	enablePulse();
    28f0:	0e 94 9a 10 	call	0x2134	; 0x2134 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	98 2f       	mov	r25, r24
    28f8:	91 70       	andi	r25, 0x01	; 1
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	49 2f       	mov	r20, r25
    2900:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	86 95       	lsr	r24
    2908:	98 2f       	mov	r25, r24
    290a:	91 70       	andi	r25, 0x01	; 1
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	49 2f       	mov	r20, r25
    2912:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	86 95       	lsr	r24
    291a:	86 95       	lsr	r24
    291c:	98 2f       	mov	r25, r24
    291e:	91 70       	andi	r25, 0x01	; 1
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	49 2f       	mov	r20, r25
    2926:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	86 95       	lsr	r24
    292e:	86 95       	lsr	r24
    2930:	86 95       	lsr	r24
    2932:	98 2f       	mov	r25, r24
    2934:	91 70       	andi	r25, 0x01	; 1
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	66 e0       	ldi	r22, 0x06	; 6
    293a:	49 2f       	mov	r20, r25
    293c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
	
	enablePulse();
    2940:	0e 94 9a 10 	call	0x2134	; 0x2134 <enablePulse>
	
}
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <lcd_vidGotoRowColumn>:
* \Parameters (in) : row	-> LCD row ID
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <lcd_vidGotoRowColumn+0x6>
    2952:	00 d0       	rcall	.+0      	; 0x2954 <lcd_vidGotoRowColumn+0x8>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	3c 83       	std	Y+4, r19	; 0x04
    2964:	2b 83       	std	Y+3, r18	; 0x03
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	31 f0       	breq	.+12     	; 0x297a <lcd_vidGotoRowColumn+0x2e>
    296e:	2b 81       	ldd	r18, Y+3	; 0x03
    2970:	3c 81       	ldd	r19, Y+4	; 0x04
    2972:	21 30       	cpi	r18, 0x01	; 1
    2974:	31 05       	cpc	r19, r1
    2976:	31 f0       	breq	.+12     	; 0x2984 <lcd_vidGotoRowColumn+0x38>
    2978:	09 c0       	rjmp	.+18     	; 0x298c <lcd_vidGotoRowColumn+0x40>
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	80 58       	subi	r24, 0x80	; 128
    297e:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
    2982:	04 c0       	rjmp	.+8      	; 0x298c <lcd_vidGotoRowColumn+0x40>
		break;

	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	80 54       	subi	r24, 0x40	; 64
    2988:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
		break;
	}	
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <LCD_voidGotoXY>:

void LCD_voidGotoXY(lcd_row_t Copy_u8XPos, lcd_column_t Copy_u8YPos)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <LCD_voidGotoXY+0x6>
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	8a 83       	std	Y+2, r24	; 0x02
    29a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

//	Adresses start with address 0
	if(Copy_u8XPos == LCD_u8_FIRST_LINE)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	88 23       	and	r24, r24
    29ae:	19 f4       	brne	.+6      	; 0x29b6 <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	06 c0       	rjmp	.+12     	; 0x29c2 <LCD_voidGotoXY+0x28>
	}

//	Adresses start with address 0x40
	else if(Copy_u8XPos == LCD_u8_SECOND_LINE)
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <LCD_voidGotoXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8YPos;
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	80 5c       	subi	r24, 0xC0	; 192
    29c0:	89 83       	std	Y+1, r24	; 0x01
	}

//	Setting the 8th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 7);
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	80 68       	ori	r24, 0x80	; 128
    29c6:	89 83       	std	Y+1, r24	; 0x01
//	Sending the SET DDRAM address command
	lcd_vidSendCmd(Local_u8Address);
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <lcd_vidDisplyChar>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
	lcd_vidSendData(chr);
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	0e 94 42 14 	call	0x2884	; 0x2884 <lcd_vidSendData>
}
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <lcd_vidDisplyStr+0x6>
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	0a c0       	rjmp	.+20     	; 0x2a18 <lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		lcd_vidDisplyChar(*str);
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	80 81       	ld	r24, Z
    2a0a:	0e 94 ed 14 	call	0x29da	; 0x29da <lcd_vidDisplyChar>
		str++;
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	80 81       	ld	r24, Z
    2a1e:	88 23       	and	r24, r24
    2a20:	89 f7       	brne	.-30     	; 0x2a04 <lcd_vidDisplyStr+0x10>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <lcd_vidDisplyNum>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : num	-> number to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	c9 56       	subi	r28, 0x69	; 105
    2a3a:	d0 40       	sbci	r29, 0x00	; 0
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	fe 01       	movw	r30, r28
    2a48:	ea 59       	subi	r30, 0x9A	; 154
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 83       	st	Z, r22
    2a4e:	71 83       	std	Z+1, r23	; 0x01
    2a50:	82 83       	std	Z+2, r24	; 0x02
    2a52:	93 83       	std	Z+3, r25	; 0x03
	u8 num_to_char_array[100], iterator = 0;
    2a54:	19 82       	std	Y+1, r1	; 0x01
    2a56:	37 c0       	rjmp	.+110    	; 0x2ac6 <lcd_vidDisplyNum+0x9a>
	while(num != 0)
	{
		num_to_char_array[iterator] = (u8)(num % 10);
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	08 2f       	mov	r16, r24
    2a5c:	10 e0       	ldi	r17, 0x00	; 0
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ea 59       	subi	r30, 0x9A	; 154
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	a2 81       	ldd	r26, Z+2	; 0x02
    2a6a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a6c:	2a e0       	ldi	r18, 0x0A	; 10
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 20 18 	call	0x3040	; 0x3040 <__udivmodsi4>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	28 2f       	mov	r18, r24
    2a82:	ce 01       	movw	r24, r28
    2a84:	02 96       	adiw	r24, 0x02	; 2
    2a86:	fc 01       	movw	r30, r24
    2a88:	e0 0f       	add	r30, r16
    2a8a:	f1 1f       	adc	r31, r17
    2a8c:	20 83       	st	Z, r18
		num /= 10;
    2a8e:	8e 01       	movw	r16, r28
    2a90:	0a 59       	subi	r16, 0x9A	; 154
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	fe 01       	movw	r30, r28
    2a96:	ea 59       	subi	r30, 0x9A	; 154
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
    2a9e:	a2 81       	ldd	r26, Z+2	; 0x02
    2aa0:	b3 81       	ldd	r27, Z+3	; 0x03
    2aa2:	2a e0       	ldi	r18, 0x0A	; 10
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 20 18 	call	0x3040	; 0x3040 <__udivmodsi4>
    2ab2:	da 01       	movw	r26, r20
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	80 83       	st	Z, r24
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	a2 83       	std	Z+2, r26	; 0x02
    2abe:	b3 83       	std	Z+3, r27	; 0x03
		iterator++;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	89 83       	std	Y+1, r24	; 0x01
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
	u8 num_to_char_array[100], iterator = 0;
	while(num != 0)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ea 59       	subi	r30, 0x9A	; 154
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	a2 81       	ldd	r26, Z+2	; 0x02
    2ad2:	b3 81       	ldd	r27, Z+3	; 0x03
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	a1 05       	cpc	r26, r1
    2ad8:	b1 05       	cpc	r27, r1
    2ada:	09 f0       	breq	.+2      	; 0x2ade <lcd_vidDisplyNum+0xb2>
    2adc:	bd cf       	rjmp	.-134    	; 0x2a58 <lcd_vidDisplyNum+0x2c>
    2ade:	12 c0       	rjmp	.+36     	; 0x2b04 <lcd_vidDisplyNum+0xd8>
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9c 01       	movw	r18, r24
    2ae8:	21 50       	subi	r18, 0x01	; 1
    2aea:	30 40       	sbci	r19, 0x00	; 0
    2aec:	ce 01       	movw	r24, r28
    2aee:	02 96       	adiw	r24, 0x02	; 2
    2af0:	fc 01       	movw	r30, r24
    2af2:	e2 0f       	add	r30, r18
    2af4:	f3 1f       	adc	r31, r19
    2af6:	80 81       	ld	r24, Z
    2af8:	80 5d       	subi	r24, 0xD0	; 208
    2afa:	0e 94 42 14 	call	0x2884	; 0x2884 <lcd_vidSendData>
	{
		num_to_char_array[iterator] = (u8)(num % 10);
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	81 50       	subi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	88 23       	and	r24, r24
    2b08:	59 f7       	brne	.-42     	; 0x2ae0 <lcd_vidDisplyNum+0xb4>
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
	}
}
    2b0a:	c7 59       	subi	r28, 0x97	; 151
    2b0c:	df 4f       	sbci	r29, 0xFF	; 255
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <lcd_vidCustomWrite+0x6>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    2b2c:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    2b2e:	19 82       	std	Y+1, r1	; 0x01
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	2c c0       	rjmp	.+88     	; 0x2b8c <lcd_vidCustomWrite+0x6a>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	08 96       	adiw	r24, 0x08	; 8
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2b4c:	1a 82       	std	Y+2, r1	; 0x02
    2b4e:	18 c0       	rjmp	.+48     	; 0x2b80 <lcd_vidCustomWrite+0x5e>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	48 2f       	mov	r20, r24
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	ca 01       	movw	r24, r20
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	88 0f       	add	r24, r24
    2b68:	99 1f       	adc	r25, r25
    2b6a:	82 0f       	add	r24, r18
    2b6c:	93 1f       	adc	r25, r19
    2b6e:	fc 01       	movw	r30, r24
    2b70:	e8 59       	subi	r30, 0x98	; 152
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	0e 94 ed 14 	call	0x29da	; 0x29da <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	88 30       	cpi	r24, 0x08	; 8
    2b84:	28 f3       	brcs	.-54     	; 0x2b50 <lcd_vidCustomWrite+0x2e>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	88 30       	cpi	r24, 0x08	; 8
    2b90:	88 f2       	brcs	.-94     	; 0x2b34 <lcd_vidCustomWrite+0x12>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_XPos, u8 Copy_YPos)
{
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	27 97       	sbiw	r28, 0x07	; 7
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	6d 83       	std	Y+5, r22	; 0x05
    2bb6:	4e 83       	std	Y+6, r20	; 0x06
    2bb8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

//	1- Calculate the required address of CGRAM
	Local_u8Address = Copy_u8PatternNumber * 8;
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	8a 83       	std	Y+2, r24	; 0x02

//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
	lcd_vidSendCmd(Local_u8Address);
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	0e 94 de 13 	call	0x27bc	; 0x27bc <lcd_vidSendCmd>

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    2bda:	19 82       	std	Y+1, r1	; 0x01
    2bdc:	0e c0       	rjmp	.+28     	; 0x2bfa <LCD_voidWriteSpecialCharacter+0x5e>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	fc 01       	movw	r30, r24
    2bea:	e2 0f       	add	r30, r18
    2bec:	f3 1f       	adc	r31, r19
    2bee:	80 81       	ld	r24, Z
    2bf0:	0e 94 42 14 	call	0x2884	; 0x2884 <lcd_vidSendData>
//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
	lcd_vidSendCmd(Local_u8Address);

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	8f 5f       	subi	r24, 0xFF	; 255
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 30       	cpi	r24, 0x08	; 8
    2bfe:	78 f3       	brcs	.-34     	; 0x2bde <LCD_voidWriteSpecialCharacter+0x42>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
	}

//	4- Shift the address counter to the DDRAM
	LCD_voidGotoXY(Copy_XPos, Copy_YPos);
    2c00:	8e 81       	ldd	r24, Y+6	; 0x06
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_voidGotoXY>

//	5- Display the CGRAM pattern on the LCD
	lcd_vidSendData(Copy_u8PatternNumber);
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	0e 94 42 14 	call	0x2884	; 0x2884 <lcd_vidSendData>
}
    2c0e:	27 96       	adiw	r28, 0x07	; 7
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <led_init>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_init(void)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
	dio_vidConfigChannel(LED_RED_PORT,LED_RED_CHANNEL,OUTPUT);
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	67 e0       	ldi	r22, 0x07	; 7
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,OUTPUT);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	64 e0       	ldi	r22, 0x04	; 4
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,OUTPUT);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	65 e0       	ldi	r22, 0x05	; 5
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,OUTPUT);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	66 e0       	ldi	r22, 0x06	; 6
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
}
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <led_on>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_on(led_id_t ledId)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <led_on+0x6>
    2c74:	0f 92       	push	r0
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	3b 83       	std	Y+3, r19	; 0x03
    2c84:	2a 83       	std	Y+2, r18	; 0x02
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	d9 f0       	breq	.+54     	; 0x2cc6 <led_on+0x58>
    2c90:	2a 81       	ldd	r18, Y+2	; 0x02
    2c92:	3b 81       	ldd	r19, Y+3	; 0x03
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <led_on+0x36>
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	61 f0       	breq	.+24     	; 0x2cba <led_on+0x4c>
    2ca2:	22 c0       	rjmp	.+68     	; 0x2ce8 <led_on+0x7a>
    2ca4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	91 f0       	breq	.+36     	; 0x2cd2 <led_on+0x64>
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	99 f0       	breq	.+38     	; 0x2cde <led_on+0x70>
    2cb8:	17 c0       	rjmp	.+46     	; 0x2ce8 <led_on+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	67 e0       	ldi	r22, 0x07	; 7
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2cc4:	11 c0       	rjmp	.+34     	; 0x2ce8 <led_on+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	64 e0       	ldi	r22, 0x04	; 4
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2cd0:	0b c0       	rjmp	.+22     	; 0x2ce8 <led_on+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	65 e0       	ldi	r22, 0x05	; 5
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <led_on+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	66 e0       	ldi	r22, 0x06	; 6
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
		#endif
		break;
	}
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <led_off>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_off(led_id_t ledId)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <led_off+0x6>
    2cfa:	0f 92       	push	r0
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	3b 83       	std	Y+3, r19	; 0x03
    2d0a:	2a 83       	std	Y+2, r18	; 0x02
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	91 05       	cpc	r25, r1
    2d14:	d9 f0       	breq	.+54     	; 0x2d4c <led_off+0x58>
    2d16:	2a 81       	ldd	r18, Y+2	; 0x02
    2d18:	3b 81       	ldd	r19, Y+3	; 0x03
    2d1a:	22 30       	cpi	r18, 0x02	; 2
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <led_off+0x36>
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	61 f0       	breq	.+24     	; 0x2d40 <led_off+0x4c>
    2d28:	22 c0       	rjmp	.+68     	; 0x2d6e <led_off+0x7a>
    2d2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d2c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	31 05       	cpc	r19, r1
    2d32:	91 f0       	breq	.+36     	; 0x2d58 <led_off+0x64>
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	83 30       	cpi	r24, 0x03	; 3
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	99 f0       	breq	.+38     	; 0x2d64 <led_off+0x70>
    2d3e:	17 c0       	rjmp	.+46     	; 0x2d6e <led_off+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	67 e0       	ldi	r22, 0x07	; 7
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2d4a:	11 c0       	rjmp	.+34     	; 0x2d6e <led_off+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	64 e0       	ldi	r22, 0x04	; 4
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2d56:	0b c0       	rjmp	.+22     	; 0x2d6e <led_off+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	65 e0       	ldi	r22, 0x05	; 5
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
    2d62:	05 c0       	rjmp	.+10     	; 0x2d6e <led_off+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	66 e0       	ldi	r22, 0x06	; 6
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
		#endif
		break;
	}
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <led_toggle>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <led_toggle+0x6>
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	3b 83       	std	Y+3, r19	; 0x03
    2d90:	2a 83       	std	Y+2, r18	; 0x02
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	91 05       	cpc	r25, r1
    2d9a:	d1 f0       	breq	.+52     	; 0x2dd0 <led_toggle+0x56>
    2d9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d9e:	3b 81       	ldd	r19, Y+3	; 0x03
    2da0:	22 30       	cpi	r18, 0x02	; 2
    2da2:	31 05       	cpc	r19, r1
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <led_toggle+0x36>
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	61 f0       	breq	.+24     	; 0x2dc6 <led_toggle+0x4c>
    2dae:	1e c0       	rjmp	.+60     	; 0x2dec <led_toggle+0x72>
    2db0:	2a 81       	ldd	r18, Y+2	; 0x02
    2db2:	3b 81       	ldd	r19, Y+3	; 0x03
    2db4:	22 30       	cpi	r18, 0x02	; 2
    2db6:	31 05       	cpc	r19, r1
    2db8:	81 f0       	breq	.+32     	; 0x2dda <led_toggle+0x60>
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	83 30       	cpi	r24, 0x03	; 3
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	81 f0       	breq	.+32     	; 0x2de4 <led_toggle+0x6a>
    2dc4:	13 c0       	rjmp	.+38     	; 0x2dec <led_toggle+0x72>
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	67 e0       	ldi	r22, 0x07	; 7
    2dca:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dio_vidFlipChannel>
    2dce:	0e c0       	rjmp	.+28     	; 0x2dec <led_toggle+0x72>
		break;
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	64 e0       	ldi	r22, 0x04	; 4
    2dd4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dio_vidFlipChannel>
    2dd8:	09 c0       	rjmp	.+18     	; 0x2dec <led_toggle+0x72>
		break;
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dio_vidFlipChannel>
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <led_toggle+0x72>

		break;
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	66 e0       	ldi	r22, 0x06	; 6
    2de8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <dio_vidFlipChannel>
		break;
	}
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <main>:
/* Description   : Guard to protect this File from include more */
/*                 than one time .                              */
/****************************************************************/

int main(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	6e 97       	sbiw	r28, 0x1e	; 30
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
	led_init();
    2e0c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <led_init>

	dio_vidConfigChannel(TIMER0_PWM_PORT, TIMER0_PWM_PIN, OUTPUT);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	63 e0       	ldi	r22, 0x03	; 3
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <dio_vidConfigChannel>
//	led_on(LED_RED);
//	TIMER0_void_SetOVCallBack(IS_voidLedOn);
//	TIMER0_void_SetCTCCallBack(IS_voidLedOn);

	TIMER0_void_Init();
    2e20:	0e 94 e5 08 	call	0x11ca	; 0x11ca <TIMER0_void_Init>
//	TIMER0_void_SetCompareVal(50);
//	EXT_voidEnableGlobalInt();

	while(1)
	{
		for(u8 i = 0; i < 255; i++)
    2e24:	1e 8e       	std	Y+30, r1	; 0x1e
    2e26:	78 c0       	rjmp	.+240    	; 0x2f18 <main+0x120>
		{
			TIMER0_void_SetCompareVal(i);
    2e28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e2a:	0e 94 4d 09 	call	0x129a	; 0x129a <TIMER0_void_SetCompareVal>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 ea       	ldi	r26, 0xA0	; 160
    2e34:	b0 e4       	ldi	r27, 0x40	; 64
    2e36:	89 8f       	std	Y+25, r24	; 0x19
    2e38:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a e7       	ldi	r20, 0x7A	; 122
    2e4c:	55 e4       	ldi	r21, 0x45	; 69
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8d 8b       	std	Y+21, r24	; 0x15
    2e58:	9e 8b       	std	Y+22, r25	; 0x16
    2e5a:	af 8b       	std	Y+23, r26	; 0x17
    2e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <main+0x88>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <main+0x106>
	else if (__tmp > 65535)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	69 8d       	ldd	r22, Y+25	; 0x19
    2e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <main+0xe8>
    2ec2:	80 e9       	ldi	r24, 0x90	; 144
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	9a 8b       	std	Y+18, r25	; 0x12
    2ec8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eca:	89 89       	ldd	r24, Y+17	; 0x11
    2ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <main+0xd6>
    2ed2:	9a 8b       	std	Y+18, r25	; 0x12
    2ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <main+0xca>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	8b 89       	ldd	r24, Y+19	; 0x13
    2f00:	9c 89       	ldd	r25, Y+20	; 0x14
    2f02:	98 8b       	std	Y+16, r25	; 0x10
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	98 89       	ldd	r25, Y+16	; 0x10
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <main+0x112>
    2f0e:	98 8b       	std	Y+16, r25	; 0x10
    2f10:	8f 87       	std	Y+15, r24	; 0x0f
//	TIMER0_void_SetCompareVal(50);
//	EXT_voidEnableGlobalInt();

	while(1)
	{
		for(u8 i = 0; i < 255; i++)
    2f12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f14:	8f 5f       	subi	r24, 0xFF	; 255
    2f16:	8e 8f       	std	Y+30, r24	; 0x1e
    2f18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <main+0x128>
    2f1e:	84 cf       	rjmp	.-248    	; 0x2e28 <main+0x30>
		{
			TIMER0_void_SetCompareVal(i);
			_delay_ms(5);
		}
		for(u8 i = 255; i >= 0; i--)
    2f20:	8f ef       	ldi	r24, 0xFF	; 255
    2f22:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			TIMER0_void_SetCompareVal(i);
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	0e 94 4d 09 	call	0x129a	; 0x129a <TIMER0_void_SetCompareVal>
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 ea       	ldi	r26, 0xA0	; 160
    2f30:	b0 e4       	ldi	r27, 0x40	; 64
    2f32:	8b 87       	std	Y+11, r24	; 0x0b
    2f34:	9c 87       	std	Y+12, r25	; 0x0c
    2f36:	ad 87       	std	Y+13, r26	; 0x0d
    2f38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a e7       	ldi	r20, 0x7A	; 122
    2f48:	55 e4       	ldi	r21, 0x45	; 69
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8f 83       	std	Y+7, r24	; 0x07
    2f54:	98 87       	std	Y+8, r25	; 0x08
    2f56:	a9 87       	std	Y+9, r26	; 0x09
    2f58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <main+0x184>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9e 83       	std	Y+6, r25	; 0x06
    2f78:	8d 83       	std	Y+5, r24	; 0x05
    2f7a:	3f c0       	rjmp	.+126    	; 0x2ffa <main+0x202>
	else if (__tmp > 65535)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <main+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e2       	ldi	r20, 0x20	; 32
    2fa2:	51 e4       	ldi	r21, 0x41	; 65
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <main+0x1e4>
    2fbe:	80 e9       	ldi	r24, 0x90	; 144
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	9c 83       	std	Y+4, r25	; 0x04
    2fc4:	8b 83       	std	Y+3, r24	; 0x03
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <main+0x1d2>
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <main+0x1c6>
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe8:	78 85       	ldd	r23, Y+8	; 0x08
    2fea:	89 85       	ldd	r24, Y+9	; 0x09
    2fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	9a 83       	std	Y+2, r25	; 0x02
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <main+0x20e>
    300a:	9a 83       	std	Y+2, r25	; 0x02
    300c:	89 83       	std	Y+1, r24	; 0x01
		for(u8 i = 0; i < 255; i++)
		{
			TIMER0_void_SetCompareVal(i);
			_delay_ms(5);
		}
		for(u8 i = 255; i >= 0; i--)
    300e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3010:	81 50       	subi	r24, 0x01	; 1
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
    3014:	87 cf       	rjmp	.-242    	; 0x2f24 <main+0x12c>

00003016 <IS_voidLedOn>:
}


/*  */
void IS_voidLedOn(void)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
//	led_on(LED_RED);
	counter++;
    301e:	80 91 b6 00 	lds	r24, 0x00B6
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	80 93 b6 00 	sts	0x00B6, r24

	if(counter == 40)
    3028:	80 91 b6 00 	lds	r24, 0x00B6
    302c:	88 32       	cpi	r24, 0x28	; 40
    302e:	29 f4       	brne	.+10     	; 0x303a <IS_voidLedOn+0x24>
	{
		led_toggle(LED_BLUE);
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <led_toggle>
		counter = 0;
    3036:	10 92 b6 00 	sts	0x00B6, r1
	}

}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <__udivmodsi4>:
    3040:	a1 e2       	ldi	r26, 0x21	; 33
    3042:	1a 2e       	mov	r1, r26
    3044:	aa 1b       	sub	r26, r26
    3046:	bb 1b       	sub	r27, r27
    3048:	fd 01       	movw	r30, r26
    304a:	0d c0       	rjmp	.+26     	; 0x3066 <__udivmodsi4_ep>

0000304c <__udivmodsi4_loop>:
    304c:	aa 1f       	adc	r26, r26
    304e:	bb 1f       	adc	r27, r27
    3050:	ee 1f       	adc	r30, r30
    3052:	ff 1f       	adc	r31, r31
    3054:	a2 17       	cp	r26, r18
    3056:	b3 07       	cpc	r27, r19
    3058:	e4 07       	cpc	r30, r20
    305a:	f5 07       	cpc	r31, r21
    305c:	20 f0       	brcs	.+8      	; 0x3066 <__udivmodsi4_ep>
    305e:	a2 1b       	sub	r26, r18
    3060:	b3 0b       	sbc	r27, r19
    3062:	e4 0b       	sbc	r30, r20
    3064:	f5 0b       	sbc	r31, r21

00003066 <__udivmodsi4_ep>:
    3066:	66 1f       	adc	r22, r22
    3068:	77 1f       	adc	r23, r23
    306a:	88 1f       	adc	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	1a 94       	dec	r1
    3070:	69 f7       	brne	.-38     	; 0x304c <__udivmodsi4_loop>
    3072:	60 95       	com	r22
    3074:	70 95       	com	r23
    3076:	80 95       	com	r24
    3078:	90 95       	com	r25
    307a:	9b 01       	movw	r18, r22
    307c:	ac 01       	movw	r20, r24
    307e:	bd 01       	movw	r22, r26
    3080:	cf 01       	movw	r24, r30
    3082:	08 95       	ret

00003084 <__prologue_saves__>:
    3084:	2f 92       	push	r2
    3086:	3f 92       	push	r3
    3088:	4f 92       	push	r4
    308a:	5f 92       	push	r5
    308c:	6f 92       	push	r6
    308e:	7f 92       	push	r7
    3090:	8f 92       	push	r8
    3092:	9f 92       	push	r9
    3094:	af 92       	push	r10
    3096:	bf 92       	push	r11
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	ca 1b       	sub	r28, r26
    30ae:	db 0b       	sbc	r29, r27
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	09 94       	ijmp

000030bc <__epilogue_restores__>:
    30bc:	2a 88       	ldd	r2, Y+18	; 0x12
    30be:	39 88       	ldd	r3, Y+17	; 0x11
    30c0:	48 88       	ldd	r4, Y+16	; 0x10
    30c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    30cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ce:	b9 84       	ldd	r11, Y+9	; 0x09
    30d0:	c8 84       	ldd	r12, Y+8	; 0x08
    30d2:	df 80       	ldd	r13, Y+7	; 0x07
    30d4:	ee 80       	ldd	r14, Y+6	; 0x06
    30d6:	fd 80       	ldd	r15, Y+5	; 0x05
    30d8:	0c 81       	ldd	r16, Y+4	; 0x04
    30da:	1b 81       	ldd	r17, Y+3	; 0x03
    30dc:	aa 81       	ldd	r26, Y+2	; 0x02
    30de:	b9 81       	ldd	r27, Y+1	; 0x01
    30e0:	ce 0f       	add	r28, r30
    30e2:	d1 1d       	adc	r29, r1
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	ed 01       	movw	r28, r26
    30f0:	08 95       	ret

000030f2 <_exit>:
    30f2:	f8 94       	cli

000030f4 <__stop_program>:
    30f4:	ff cf       	rjmp	.-2      	; 0x30f4 <__stop_program>
