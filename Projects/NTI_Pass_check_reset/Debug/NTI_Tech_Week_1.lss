
NTI_Tech_Week_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  000037e4  00003878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800118  00800118  00003930  2**0
                  ALLOC
  3 .stab         00003870  00000000  00000000  00003930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ff  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000add3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ce58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_1>
       8:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_2>
       c:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 17 	call	0x2e66	; 0x2e66 <main>
      8a:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ea       	ldi	r26, 0xA9	; 169
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ea       	ldi	r24, 0xA9	; 169
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ea       	ldi	r22, 0xA9	; 169
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void ADC_voidInit (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	#if VOLTAGE_REFERENCE == AREF
	CLEAR_BIT(ADMUX, REFS0);
	CLEAR_BIT(ADMUX, REFS1);

	#elif VOLTAGE_REFERENCE == AVCC
	SET_BIT(ADMUX, REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX, REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
	/* Adjustment option = LEFT_ADJUSTMENT */
	#if ADJUSTMENT == RIGHT_ADJUSTMENT
	CLEAR_BIT(ADMUX, ADLAR);

	#elif ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 62       	ori	r24, 0x20	; 32
     cce:	8c 93       	st	X, r24
	/* ADC_AUTO_TRIGGER_ENABLE option = DISABLED */
	#if ADC_AUTO_TRIGGER_ENABLE == ENABLED
	SET_BIT(ADCSRA, ADATE);
	
	#elif ADC_AUTO_TRIGGER_ENABLE == DISABLED
	CLEAR_BIT(ADCSRA, ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	/* ADC_INTERRUPT_ENABLE option = DISABLED */
	#if ADC_INTERRUPT_ENABLE == ENABLED
	SET_BIT(ADCSRA, ADIE);

	#elif ADC_INTERRUPT_ENABLE == DISABLED
	CLEAR_BIT(ADCSRA, ADIE);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 7f       	andi	r24, 0xF7	; 247
     cea:	8c 93       	st	X, r24

	#endif


	/* configure prescaler bits */
	ADCSRA &= PRESCALER_MASK;
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 7f       	andi	r24, 0xF8	; 248
     cf8:	8c 93       	st	X, r24
	ADCSRA |= DIVID_BY_128;
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 60       	ori	r24, 0x07	; 7
     d06:	8c 93       	st	X, r24

	/* ADC Enable */
	ADC_voidEnable();
     d08:	0e 94 89 06 	call	0xd12	; 0xd12 <ADC_voidEnable>

}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <ADC_voidEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidEnable()
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , ADEN );
     d1a:	a6 e2       	ldi	r26, 0x26	; 38
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e6 e2       	ldi	r30, 0x26	; 38
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	8c 93       	st	X, r24
	
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <ADC_voidInterrputEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidInterrputEnable()
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62

	
	SET_BIT( ADCSRA , ADIE );
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	8c 93       	st	X, r24
	
}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <ADC_voidDisable>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidDisable()
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( ADCSRA , ADEN );
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 77       	andi	r24, 0x7F	; 127
     d5e:	8c 93       	st	X, r24
	
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <ADC_voidStartConversion>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidStartConversion()
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , ADSC );
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 64       	ori	r24, 0x40	; 64
     d7a:	8c 93       	st	X, r24
	
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <ADC_voidAutoTrigger>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidAutoTrigger()
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62

	
	/** Enable ADC Auto Trigger	 							   **/
	/** ADATE = 1 =====> 	SET_BIT( ADATE , 5 ); 			   **/

    SET_BIT( ADCSRA , 5 );
     d8a:	a6 e2       	ldi	r26, 0x26	; 38
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 0 );
	CLEAR_BIT( SFIOR , 1 );
	CLEAR_BIT( SFIOR , 2 );
	
	#elif ADC_AUTO_TRIGGER_SOURCE == EXTERNAL_INTERRPUT_REQUEST_0
	CLEAR_BIT( SFIOR , 5 );
     d98:	a0 e5       	ldi	r26, 0x50	; 80
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e0 e5       	ldi	r30, 0x50	; 80
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 6 );
     da6:	a0 e5       	ldi	r26, 0x50	; 80
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e0 e5       	ldi	r30, 0x50	; 80
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
	CLEAR_BIT( SFIOR , 7 );
     db4:	a0 e5       	ldi	r26, 0x50	; 80
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e0 e5       	ldi	r30, 0x50	; 80
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 77       	andi	r24, 0x7F	; 127
     dc0:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 2 );	
	
	#endif
	/* End ( if ) condition for Macros */
	
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <ADC_u16ReadADCInMV>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

u16 ADC_u16ReadADCInMV(u8 channel)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= CHANNEL_MASK;
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 7e       	andi	r24, 0xE0	; 224
     de0:	8c 93       	st	X, r24
	ADMUX |= channel;
     de2:	a7 e2       	ldi	r26, 0x27	; 39
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e2       	ldi	r30, 0x27	; 39
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	90 81       	ld	r25, Z
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	89 2b       	or	r24, r25
     df0:	8c 93       	st	X, r24
	
	/* start conversion */
	ADC_voidStartConversion();
     df2:	0e 94 b3 06 	call	0xd66	; 0xd66 <ADC_voidStartConversion>

	/* wait until the conversion is clear */
	while(CHECK_BIT(ADCSRA, ADIF) == 0);
     df6:	e6 e2       	ldi	r30, 0x26	; 38
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	82 95       	swap	r24
     dfe:	8f 70       	andi	r24, 0x0F	; 15
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	81 70       	andi	r24, 0x01	; 1
     e06:	90 70       	andi	r25, 0x00	; 0
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	a9 f3       	breq	.-22     	; 0xdf6 <ADC_u16ReadADCInMV+0x2e>

	/* clear the conversion flag */
	SET_BIT(ADCSRA, ADIF);
     e0c:	a6 e2       	ldi	r26, 0x26	; 38
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e6 e2       	ldi	r30, 0x26	; 38
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	8c 93       	st	X, r24

	/* check if left Adjustment or right (8 bit or 10 bit) */
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	return ADCH;
     e1a:	e5 e2       	ldi	r30, 0x25	; 37
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	return ADC;

	#endif
	
}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(u8 channel)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= CHANNEL_MASK;
     e38:	a7 e2       	ldi	r26, 0x27	; 39
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 7e       	andi	r24, 0xE0	; 224
     e44:	8c 93       	st	X, r24
	ADMUX |= channel;
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	90 81       	ld	r25, Z
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	89 2b       	or	r24, r25
     e54:	8c 93       	st	X, r24

	/* check if left Adjustment or right (8 bit or 10 bit) */
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	return ADCH;
     e56:	e5 e2       	ldi	r30, 0x25	; 37
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0

	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	return ADC;

	#endif
}
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <ADC_voidCallBack>:

void ADC_voidCallBack(void (*addresscpy)(void), u8 channel)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <ADC_voidCallBack+0x6>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6b 83       	std	Y+3, r22	; 0x03
	ADMUX &= CHANNEL_MASK;
     e7a:	a7 e2       	ldi	r26, 0x27	; 39
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e2       	ldi	r30, 0x27	; 39
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	8c 93       	st	X, r24
	ADMUX |= channel;
     e88:	a7 e2       	ldi	r26, 0x27	; 39
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e2       	ldi	r30, 0x27	; 39
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	90 81       	ld	r25, Z
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	89 2b       	or	r24, r25
     e96:	8c 93       	st	X, r24
	if(addresscpy != NULL)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	31 f0       	breq	.+12     	; 0xeac <ADC_voidCallBack+0x44>
	{
		pf1 = addresscpy;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	90 93 1a 01 	sts	0x011A, r25
     ea8:	80 93 19 01 	sts	0x0119, r24
	}
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <__vector_16>:

void __vector_16(void)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	pf1();
     ee2:	e0 91 19 01 	lds	r30, 0x0119
     ee6:	f0 91 1a 01 	lds	r31, 0x011A
     eea:	09 95       	icall
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <EXT_voidEnableGlobalInt>:
/* Description    :  This function used to enable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidEnableGlobalInt( void )
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
     f1a:	af e5       	ldi	r26, 0x5F	; 95
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ef e5       	ldi	r30, 0x5F	; 95
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 68       	ori	r24, 0x80	; 128
     f26:	8c 93       	st	X, r24
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <EXT_voidDisableGlobalInt>:
/* Description    :  This function used to disable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidDisableGlobalInt( void )
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);
     f36:	af e5       	ldi	r26, 0x5F	; 95
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ef e5       	ldi	r30, 0x5F	; 95
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 77       	andi	r24, 0x7F	; 127
     f42:	8c 93       	st	X, r24
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <EXT0_voidInit>:
/****************************************************************/



void EXT0_voidInit (void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	#elif EXT0_SENSE_MODE == RISING
	SET_BIT(MCUCR , 0);
	SET_BIT(MCUCR , 1);
	
	#elif EXT0_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 0);
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */

	
/** disable EXT0 in initialization function  **/
/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 6 );
     f6e:	ab e5       	ldi	r26, 0x5B	; 91
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e5       	ldi	r30, 0x5B	; 91
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7b       	andi	r24, 0xBF	; 191
     f7a:	8c 93       	st	X, r24
	SET_BIT(GIFR , 6 ) ;
     f7c:	aa e5       	ldi	r26, 0x5A	; 90
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e5       	ldi	r30, 0x5A	; 90
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	8c 93       	st	X, r24
	
	
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <EXT1_voidInit>:
/* Description    :  This function used to initialize EXT1      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT1_voidInit (void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	#elif EXT1_SENSE_MODE == RISING
	SET_BIT(MCUCR , 2);
	SET_BIT(MCUCR , 3);

	#elif EXT1_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 2);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 3);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 60       	ori	r24, 0x08	; 8
     fb2:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 7 );
     fb4:	ab e5       	ldi	r26, 0x5B	; 91
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e5       	ldi	r30, 0x5B	; 91
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 77       	andi	r24, 0x7F	; 127
     fc0:	8c 93       	st	X, r24
	SET_BIT(GIFR , 7 ) ;
     fc2:	aa e5       	ldi	r26, 0x5A	; 90
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ea e5       	ldi	r30, 0x5A	; 90
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	8c 93       	st	X, r24


}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <EXT2_voidInit>:



void EXT2_voidInit (void)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62

	/*  ( if / else if ) condition for Macros */

	#if EXT2_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCSR , 6);
     fde:	a4 e5       	ldi	r26, 0x54	; 84
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e5       	ldi	r30, 0x54	; 84
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7b       	andi	r24, 0xBF	; 191
     fea:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 5 );
     fec:	ab e5       	ldi	r26, 0x5B	; 91
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb e5       	ldi	r30, 0x5B	; 91
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 7d       	andi	r24, 0xDF	; 223
     ff8:	8c 93       	st	X, r24
	SET_BIT(GIFR , 5 ) ;
     ffa:	aa e5       	ldi	r26, 0x5A	; 90
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e5       	ldi	r30, 0x5A	; 90
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 62       	ori	r24, 0x20	; 32
    1006:	8c 93       	st	X, r24


}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <EXT0_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidEnable()
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( GICR , 6 );
    1016:	ab e5       	ldi	r26, 0x5B	; 91
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	eb e5       	ldi	r30, 0x5B	; 91
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	8c 93       	st	X, r24
	
}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <EXT0_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidDisable()
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( GICR , 6 );
    1032:	ab e5       	ldi	r26, 0x5B	; 91
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e5       	ldi	r30, 0x5B	; 91
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	8c 93       	st	X, r24
	
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <EXT1_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidEnable()
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 7 );
    104e:	ab e5       	ldi	r26, 0x5B	; 91
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	eb e5       	ldi	r30, 0x5B	; 91
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24

}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <EXT1_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidDisable()
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 7 );
    106a:	ab e5       	ldi	r26, 0x5B	; 91
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e5       	ldi	r30, 0x5B	; 91
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 77       	andi	r24, 0x7F	; 127
    1076:	8c 93       	st	X, r24

}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <EXT2_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidEnable()
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 5 );
    1086:	ab e5       	ldi	r26, 0x5B	; 91
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e5       	ldi	r30, 0x5B	; 91
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 62       	ori	r24, 0x20	; 32
    1092:	8c 93       	st	X, r24

}
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <EXT2_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidDisable()
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 5 );
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7d       	andi	r24, 0xDF	; 223
    10ae:	8c 93       	st	X, r24

}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <EXT0_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidCallBack(void (*addresscpy)(void))
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <EXT0_voidCallBack+0x6>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <EXT0_voidCallBack+0x22>
	{
		pf1 = addresscpy;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	90 93 1a 01 	sts	0x011A, r25
    10d4:	80 93 19 01 	sts	0x0119, r24
	}
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <EXT1_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidCallBack(void (*addresscpy)(void))
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <EXT1_voidCallBack+0x6>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	31 f0       	breq	.+12     	; 0x1104 <EXT1_voidCallBack+0x22>
	{
		pf2 = addresscpy;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	90 93 1c 01 	sts	0x011C, r25
    1100:	80 93 1b 01 	sts	0x011B, r24
	}
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <EXT2_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidCallBack(void (*addresscpy)(void))
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <EXT2_voidCallBack+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	31 f0       	breq	.+12     	; 0x1130 <EXT2_voidCallBack+0x22>
	{
		pf3 = addresscpy;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	90 93 1e 01 	sts	0x011E, r25
    112c:	80 93 1d 01 	sts	0x011D, r24
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <EXT0_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <EXT0_voidSetSignalch+0x6>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	
	switch(SenseCpy)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3b 83       	std	Y+3, r19	; 0x03
    1150:	2a 83       	std	Y+2, r18	; 0x02
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	91 05       	cpc	r25, r1
    115a:	a1 f1       	breq	.+104    	; 0x11c4 <EXT0_voidSetSignalch+0x8a>
    115c:	2a 81       	ldd	r18, Y+2	; 0x02
    115e:	3b 81       	ldd	r19, Y+3	; 0x03
    1160:	25 30       	cpi	r18, 0x05	; 5
    1162:	31 05       	cpc	r19, r1
    1164:	34 f4       	brge	.+12     	; 0x1172 <EXT0_voidSetSignalch+0x38>
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	9b 81       	ldd	r25, Y+3	; 0x03
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	61 f0       	breq	.+24     	; 0x1188 <EXT0_voidSetSignalch+0x4e>
    1170:	46 c0       	rjmp	.+140    	; 0x11fe <EXT0_voidSetSignalch+0xc4>
    1172:	2a 81       	ldd	r18, Y+2	; 0x02
    1174:	3b 81       	ldd	r19, Y+3	; 0x03
    1176:	27 30       	cpi	r18, 0x07	; 7
    1178:	31 05       	cpc	r19, r1
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <EXT0_voidSetSignalch+0x6c>
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	8a 30       	cpi	r24, 0x0A	; 10
    1182:	91 05       	cpc	r25, r1
    1184:	71 f1       	breq	.+92     	; 0x11e2 <EXT0_voidSetSignalch+0xa8>
    1186:	3b c0       	rjmp	.+118    	; 0x11fe <EXT0_voidSetSignalch+0xc4>
	{
		case IOC:
			SET_BIT(MCUCR , 0);
    1188:	a5 e5       	ldi	r26, 0x55	; 85
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e5       	ldi	r30, 0x55	; 85
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
    1196:	a5 e5       	ldi	r26, 0x55	; 85
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e5 e5       	ldi	r30, 0x55	; 85
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	8c 93       	st	X, r24
    11a4:	2c c0       	rjmp	.+88     	; 0x11fe <EXT0_voidSetSignalch+0xc4>
			break;

		case RISING:
			SET_BIT(MCUCR , 0);
    11a6:	a5 e5       	ldi	r26, 0x55	; 85
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e5       	ldi	r30, 0x55	; 85
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
    11b4:	a5 e5       	ldi	r26, 0x55	; 85
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e5       	ldi	r30, 0x55	; 85
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	8c 93       	st	X, r24
    11c2:	1d c0       	rjmp	.+58     	; 0x11fe <EXT0_voidSetSignalch+0xc4>
			break;

		case FALLING:
			CLEAR_BIT(MCUCR , 0);
    11c4:	a5 e5       	ldi	r26, 0x55	; 85
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e5       	ldi	r30, 0x55	; 85
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
    11d2:	a5 e5       	ldi	r26, 0x55	; 85
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e5       	ldi	r30, 0x55	; 85
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	8c 93       	st	X, r24
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <EXT0_voidSetSignalch+0xc4>
			break;

		case LOW_LEVEL:
			CLEAR_BIT(MCUCR , 0);
    11e2:	a5 e5       	ldi	r26, 0x55	; 85
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e5       	ldi	r30, 0x55	; 85
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8e 7f       	andi	r24, 0xFE	; 254
    11ee:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
    11f0:	a5 e5       	ldi	r26, 0x55	; 85
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e5       	ldi	r30, 0x55	; 85
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8d 7f       	andi	r24, 0xFD	; 253
    11fc:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <EXT1_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT1_voidSetSignalch(u8 SenseCpy)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <EXT1_voidSetSignalch+0x6>
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3b 83       	std	Y+3, r19	; 0x03
    1220:	2a 83       	std	Y+2, r18	; 0x02
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	91 05       	cpc	r25, r1
    122a:	a1 f1       	breq	.+104    	; 0x1294 <EXT1_voidSetSignalch+0x8a>
    122c:	2a 81       	ldd	r18, Y+2	; 0x02
    122e:	3b 81       	ldd	r19, Y+3	; 0x03
    1230:	25 30       	cpi	r18, 0x05	; 5
    1232:	31 05       	cpc	r19, r1
    1234:	34 f4       	brge	.+12     	; 0x1242 <EXT1_voidSetSignalch+0x38>
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	61 f0       	breq	.+24     	; 0x1258 <EXT1_voidSetSignalch+0x4e>
    1240:	46 c0       	rjmp	.+140    	; 0x12ce <EXT1_voidSetSignalch+0xc4>
    1242:	2a 81       	ldd	r18, Y+2	; 0x02
    1244:	3b 81       	ldd	r19, Y+3	; 0x03
    1246:	27 30       	cpi	r18, 0x07	; 7
    1248:	31 05       	cpc	r19, r1
    124a:	a9 f0       	breq	.+42     	; 0x1276 <EXT1_voidSetSignalch+0x6c>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	91 05       	cpc	r25, r1
    1254:	71 f1       	breq	.+92     	; 0x12b2 <EXT1_voidSetSignalch+0xa8>
    1256:	3b c0       	rjmp	.+118    	; 0x12ce <EXT1_voidSetSignalch+0xc4>
	{
		case IOC:
		SET_BIT(MCUCR , 2);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
    1266:	a5 e5       	ldi	r26, 0x55	; 85
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e5       	ldi	r30, 0x55	; 85
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	8c 93       	st	X, r24
    1274:	2c c0       	rjmp	.+88     	; 0x12ce <EXT1_voidSetSignalch+0xc4>
		break;

		case RISING:
		SET_BIT(MCUCR , 2);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    1284:	a5 e5       	ldi	r26, 0x55	; 85
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e5       	ldi	r30, 0x55	; 85
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	8c 93       	st	X, r24
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <EXT1_voidSetSignalch+0xc4>
		break;

		case FALLING:
		CLEAR_BIT(MCUCR , 2);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	88 60       	ori	r24, 0x08	; 8
    12ae:	8c 93       	st	X, r24
    12b0:	0e c0       	rjmp	.+28     	; 0x12ce <EXT1_voidSetSignalch+0xc4>
		break;

		case LOW_LEVEL:
		CLEAR_BIT(MCUCR , 2);
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8b 7f       	andi	r24, 0xFB	; 251
    12be:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
    12c0:	a5 e5       	ldi	r26, 0x55	; 85
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e5       	ldi	r30, 0x55	; 85
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	87 7f       	andi	r24, 0xF7	; 247
    12cc:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <EXT2_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <EXT2_voidSetSignalch+0x6>
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3b 83       	std	Y+3, r19	; 0x03
    12f0:	2a 83       	std	Y+2, r18	; 0x02
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	84 30       	cpi	r24, 0x04	; 4
    12f8:	91 05       	cpc	r25, r1
    12fa:	69 f0       	breq	.+26     	; 0x1316 <EXT2_voidSetSignalch+0x3c>
    12fc:	2a 81       	ldd	r18, Y+2	; 0x02
    12fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1300:	27 30       	cpi	r18, 0x07	; 7
    1302:	31 05       	cpc	r19, r1
    1304:	79 f4       	brne	.+30     	; 0x1324 <EXT2_voidSetSignalch+0x4a>
	{
		case RISING:
		SET_BIT(MCUCSR , 6);
    1306:	a4 e5       	ldi	r26, 0x54	; 84
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e4 e5       	ldi	r30, 0x54	; 84
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	8c 93       	st	X, r24
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <EXT2_voidSetSignalch+0x4a>
		break;

		case FALLING:
		CLEAR_BIT(MCUCSR , 6);
    1316:	a4 e5       	ldi	r26, 0x54	; 84
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e4 e5       	ldi	r30, 0x54	; 84
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	8c 93       	st	X, r24
	}
	
	/* End ( if ) condition for Macros */
	

}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <__vector_1>:
*/
/** Linker Problem solved */


void __vector_1(void)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	pf1();
    135a:	e0 91 19 01 	lds	r30, 0x0119
    135e:	f0 91 1a 01 	lds	r31, 0x011A
    1362:	09 95       	icall
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_2>:



void __vector_2(void)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	pf2();
    13b4:	e0 91 1b 01 	lds	r30, 0x011B
    13b8:	f0 91 1c 01 	lds	r31, 0x011C
    13bc:	09 95       	icall
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <__vector_3>:


void __vector_3(void)
{
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	2f 93       	push	r18
    13f0:	3f 93       	push	r19
    13f2:	4f 93       	push	r20
    13f4:	5f 93       	push	r21
    13f6:	6f 93       	push	r22
    13f8:	7f 93       	push	r23
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	af 93       	push	r26
    1400:	bf 93       	push	r27
    1402:	ef 93       	push	r30
    1404:	ff 93       	push	r31
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	pf3();
    140e:	e0 91 1d 01 	lds	r30, 0x011D
    1412:	f0 91 1e 01 	lds	r31, 0x011E
    1416:	09 95       	icall
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <button_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                            
* \Return value:   : None                                
*******************************************************************************/
void button_vidInit(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	dio_vidConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	67 e0       	ldi	r22, 0x07	; 7
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <Button_GetStatus>:
* \Parameters (in) : button  -> button ID                                                                       
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <Button_GetStatus+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <Button_GetStatus+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
	button_status_t status = RELEASED;
    148a:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3c 83       	std	Y+4, r19	; 0x04
    1494:	2b 83       	std	Y+3, r18	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	a1 f0       	breq	.+40     	; 0x14c8 <Button_GetStatus+0x4c>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	d1 f0       	breq	.+52     	; 0x14de <Button_GetStatus+0x62>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	01 f5       	brne	.+64     	; 0x14f2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_LOW)
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	67 e0       	ldi	r22, 0x07	; 7
    14b6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    14ba:	88 23       	and	r24, r24
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	17 c0       	rjmp	.+46     	; 0x14f2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	15 c0       	rjmp	.+42     	; 0x14f2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_LOW)
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	66 e0       	ldi	r22, 0x06	; 6
    14cc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    14d0:	88 23       	and	r24, r24
    14d2:	19 f4       	brne	.+6      	; 0x14da <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <Button_GetStatus+0x76>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_LOW)
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	65 e0       	ldi	r22, 0x05	; 5
    14e2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    14e6:	88 23       	and	r24, r24
    14e8:	19 f4       	brne	.+6      	; 0x14f0 <Button_GetStatus+0x74>
		{
			status = PRESSED;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    14f0:	19 82       	std	Y+1, r1	; 0x01
		}
#endif
		break;
	}
	return status;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <dio_vidConfigChannel+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <dio_vidConfigChannel+0x8>
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
    1514:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3d 83       	std	Y+5, r19	; 0x05
    151e:	2c 83       	std	Y+4, r18	; 0x04
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <dio_vidConfigChannel+0x2a>
    152a:	43 c0       	rjmp	.+134    	; 0x15b2 <dio_vidConfigChannel+0xb0>
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	3d 81       	ldd	r19, Y+5	; 0x05
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	2c f4       	brge	.+10     	; 0x1540 <dio_vidConfigChannel+0x3e>
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	71 f0       	breq	.+28     	; 0x155a <dio_vidConfigChannel+0x58>
    153e:	bc c0       	rjmp	.+376    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
    1540:	2c 81       	ldd	r18, Y+4	; 0x04
    1542:	3d 81       	ldd	r19, Y+5	; 0x05
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <dio_vidConfigChannel+0x4a>
    154a:	5f c0       	rjmp	.+190    	; 0x160a <dio_vidConfigChannel+0x108>
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <dio_vidConfigChannel+0x56>
    1556:	85 c0       	rjmp	.+266    	; 0x1662 <dio_vidConfigChannel+0x160>
    1558:	af c0       	rjmp	.+350    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	a1 f4       	brne	.+40     	; 0x1588 <dio_vidConfigChannel+0x86>
		{
			SET_BIT (DIO_DDRA_REG,channel);
    1560:	aa e3       	ldi	r26, 0x3A	; 58
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ea e3       	ldi	r30, 0x3A	; 58
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <dio_vidConfigChannel+0x7c>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <dio_vidConfigChannel+0x78>
    1582:	84 2b       	or	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	98 c0       	rjmp	.+304    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
    1588:	aa e3       	ldi	r26, 0x3A	; 58
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <dio_vidConfigChannel+0xa4>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <dio_vidConfigChannel+0xa0>
    15aa:	80 95       	com	r24
    15ac:	84 23       	and	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	83 c0       	rjmp	.+262    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	a1 f4       	brne	.+40     	; 0x15e0 <dio_vidConfigChannel+0xde>
		{
			SET_BIT (DIO_DDRB_REG,channel);
    15b8:	a7 e3       	ldi	r26, 0x37	; 55
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e7 e3       	ldi	r30, 0x37	; 55
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <dio_vidConfigChannel+0xd4>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <dio_vidConfigChannel+0xd0>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	6c c0       	rjmp	.+216    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
    15e0:	a7 e3       	ldi	r26, 0x37	; 55
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e7 e3       	ldi	r30, 0x37	; 55
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <dio_vidConfigChannel+0xfc>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <dio_vidConfigChannel+0xf8>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	57 c0       	rjmp	.+174    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	a1 f4       	brne	.+40     	; 0x1638 <dio_vidConfigChannel+0x136>
		{
			SET_BIT (DIO_DDRC_REG,channel);
    1610:	a4 e3       	ldi	r26, 0x34	; 52
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e3       	ldi	r30, 0x34	; 52
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <dio_vidConfigChannel+0x12c>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <dio_vidConfigChannel+0x128>
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	40 c0       	rjmp	.+128    	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
    1638:	a4 e3       	ldi	r26, 0x34	; 52
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e4 e3       	ldi	r30, 0x34	; 52
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <dio_vidConfigChannel+0x154>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <dio_vidConfigChannel+0x150>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	2b c0       	rjmp	.+86     	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	a1 f4       	brne	.+40     	; 0x1690 <dio_vidConfigChannel+0x18e>
		{
			SET_BIT (DIO_DDRD_REG,channel);
    1668:	a1 e3       	ldi	r26, 0x31	; 49
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e1 e3       	ldi	r30, 0x31	; 49
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <dio_vidConfigChannel+0x184>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <dio_vidConfigChannel+0x180>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
    1690:	a1 e3       	ldi	r26, 0x31	; 49
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <dio_vidConfigChannel+0x1ac>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <dio_vidConfigChannel+0x1a8>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
		}
		break;
	}
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <dio_vidWriteChannel+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <dio_vidWriteChannel+0x8>
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	6a 83       	std	Y+2, r22	; 0x02
    16da:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3d 83       	std	Y+5, r19	; 0x05
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <dio_vidWriteChannel+0x2a>
    16f0:	43 c0       	rjmp	.+134    	; 0x1778 <dio_vidWriteChannel+0xb0>
    16f2:	2c 81       	ldd	r18, Y+4	; 0x04
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	2c f4       	brge	.+10     	; 0x1706 <dio_vidWriteChannel+0x3e>
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	71 f0       	breq	.+28     	; 0x1720 <dio_vidWriteChannel+0x58>
    1704:	bc c0       	rjmp	.+376    	; 0x187e <dio_vidWriteChannel+0x1b6>
    1706:	2c 81       	ldd	r18, Y+4	; 0x04
    1708:	3d 81       	ldd	r19, Y+5	; 0x05
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <dio_vidWriteChannel+0x4a>
    1710:	5f c0       	rjmp	.+190    	; 0x17d0 <dio_vidWriteChannel+0x108>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <dio_vidWriteChannel+0x56>
    171c:	85 c0       	rjmp	.+266    	; 0x1828 <dio_vidWriteChannel+0x160>
    171e:	af c0       	rjmp	.+350    	; 0x187e <dio_vidWriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 23       	and	r24, r24
    1724:	a9 f4       	brne	.+42     	; 0x1750 <dio_vidWriteChannel+0x88>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
    1726:	ab e3       	ldi	r26, 0x3B	; 59
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	eb e3       	ldi	r30, 0x3B	; 59
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <dio_vidWriteChannel+0x7c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <dio_vidWriteChannel+0x78>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	97 c0       	rjmp	.+302    	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
    1750:	ab e3       	ldi	r26, 0x3B	; 59
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	eb e3       	ldi	r30, 0x3B	; 59
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <dio_vidWriteChannel+0xa6>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <dio_vidWriteChannel+0xa2>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	83 c0       	rjmp	.+262    	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 23       	and	r24, r24
    177c:	a9 f4       	brne	.+42     	; 0x17a8 <dio_vidWriteChannel+0xe0>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <dio_vidWriteChannel+0xd4>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <dio_vidWriteChannel+0xd0>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	6b c0       	rjmp	.+214    	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
    17a8:	a8 e3       	ldi	r26, 0x38	; 56
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <dio_vidWriteChannel+0xfe>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <dio_vidWriteChannel+0xfa>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	57 c0       	rjmp	.+174    	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 23       	and	r24, r24
    17d4:	a9 f4       	brne	.+42     	; 0x1800 <dio_vidWriteChannel+0x138>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
    17d6:	a5 e3       	ldi	r26, 0x35	; 53
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e3       	ldi	r30, 0x35	; 53
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <dio_vidWriteChannel+0x12c>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <dio_vidWriteChannel+0x128>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
    1800:	a5 e3       	ldi	r26, 0x35	; 53
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e3       	ldi	r30, 0x35	; 53
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <dio_vidWriteChannel+0x156>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <dio_vidWriteChannel+0x152>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	2b c0       	rjmp	.+86     	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 23       	and	r24, r24
    182c:	a9 f4       	brne	.+42     	; 0x1858 <dio_vidWriteChannel+0x190>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
    182e:	a2 e3       	ldi	r26, 0x32	; 50
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <dio_vidWriteChannel+0x184>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <dio_vidWriteChannel+0x180>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	13 c0       	rjmp	.+38     	; 0x187e <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
    1858:	a2 e3       	ldi	r26, 0x32	; 50
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <dio_vidWriteChannel+0x1ae>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <dio_vidWriteChannel+0x1aa>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
		}
		break;
	}
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <dio_vidSetPortValue>:
					 mask  -> data mask
* \Return value:   : None                            
*******************************************************************************/

void dio_vidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <dio_vidSetPortValue+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <dio_vidSetPortValue+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02

    switch(Copy_u8Port)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	d1 f0       	breq	.+52     	; 0x18e6 <dio_vidSetPortValue+0x58>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <dio_vidSetPortValue+0x38>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <dio_vidSetPortValue+0x4e>
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <dio_vidSetPortValue+0x74>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <dio_vidSetPortValue+0x62>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <dio_vidSetPortValue+0x6c>
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <dio_vidSetPortValue+0x74>
    {
        case DIO_PORTA:  DIO_PORTA_REG = Copy_u8Value; break;
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	80 83       	st	Z, r24
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <dio_vidSetPortValue+0x74>
        case DIO_PORTB:  DIO_PORTB_REG = Copy_u8Value; break;
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 83       	st	Z, r24
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <dio_vidSetPortValue+0x74>
        case DIO_PORTC:  DIO_PORTC_REG = Copy_u8Value; break;
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <dio_vidSetPortValue+0x74>
        case DIO_PORTD:  DIO_PORTD_REG = Copy_u8Value; break;
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
        default: break;
    }
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <dio_vidWriteChannelGroup>:

void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <dio_vidWriteChannelGroup+0x6>
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
    1920:	4b 83       	std	Y+3, r20	; 0x03

}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/

void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <dio_vidFlipChannel+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <dio_vidFlipChannel+0x8>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	49 f1       	breq	.+82     	; 0x19a4 <dio_vidFlipChannel+0x76>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	2c f4       	brge	.+10     	; 0x1966 <dio_vidFlipChannel+0x38>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f0       	breq	.+24     	; 0x197c <dio_vidFlipChannel+0x4e>
    1964:	5a c0       	rjmp	.+180    	; 0x1a1a <dio_vidFlipChannel+0xec>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	71 f1       	breq	.+92     	; 0x19cc <dio_vidFlipChannel+0x9e>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	e9 f1       	breq	.+122    	; 0x19f4 <dio_vidFlipChannel+0xc6>
    197a:	4f c0       	rjmp	.+158    	; 0x1a1a <dio_vidFlipChannel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
    197c:	ab e3       	ldi	r26, 0x3B	; 59
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e3       	ldi	r30, 0x3B	; 59
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <dio_vidFlipChannel+0x6c>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <dio_vidFlipChannel+0x68>
    199e:	84 27       	eor	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	3b c0       	rjmp	.+118    	; 0x1a1a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
    19a4:	a8 e3       	ldi	r26, 0x38	; 56
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 e3       	ldi	r30, 0x38	; 56
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <dio_vidFlipChannel+0x94>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <dio_vidFlipChannel+0x90>
    19c6:	84 27       	eor	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	27 c0       	rjmp	.+78     	; 0x1a1a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
    19cc:	a5 e3       	ldi	r26, 0x35	; 53
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e5 e3       	ldi	r30, 0x35	; 53
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <dio_vidFlipChannel+0xbc>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <dio_vidFlipChannel+0xb8>
    19ee:	84 27       	eor	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
    19f4:	a2 e3       	ldi	r26, 0x32	; 50
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e2 e3       	ldi	r30, 0x32	; 50
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <dio_vidFlipChannel+0xe4>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <dio_vidFlipChannel+0xe0>
    1a16:	84 27       	eor	r24, r20
    1a18:	8c 93       	st	X, r24
		break;
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <dio_dioLevelReadChannel>:
* \Parameters (in) : port     -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <dio_dioLevelReadChannel+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <dio_dioLevelReadChannel+0x8>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	8a 83       	std	Y+2, r24	; 0x02
    1a38:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_pinRead = STD_LOW;
    1a3a:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3d 83       	std	Y+5, r19	; 0x05
    1a44:	2c 83       	std	Y+4, r18	; 0x04
    1a46:	4c 81       	ldd	r20, Y+4	; 0x04
    1a48:	5d 81       	ldd	r21, Y+5	; 0x05
    1a4a:	41 30       	cpi	r20, 0x01	; 1
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	41 f1       	breq	.+80     	; 0x1aa0 <dio_dioLevelReadChannel+0x78>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	91 05       	cpc	r25, r1
    1a58:	34 f4       	brge	.+12     	; 0x1a66 <dio_dioLevelReadChannel+0x3e>
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <dio_dioLevelReadChannel+0x54>
    1a64:	52 c0       	rjmp	.+164    	; 0x1b0a <dio_dioLevelReadChannel+0xe2>
    1a66:	4c 81       	ldd	r20, Y+4	; 0x04
    1a68:	5d 81       	ldd	r21, Y+5	; 0x05
    1a6a:	42 30       	cpi	r20, 0x02	; 2
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	51 f1       	breq	.+84     	; 0x1ac4 <dio_dioLevelReadChannel+0x9c>
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	b9 f1       	breq	.+110    	; 0x1ae8 <dio_dioLevelReadChannel+0xc0>
    1a7a:	47 c0       	rjmp	.+142    	; 0x1b0a <dio_dioLevelReadChannel+0xe2>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
    1a7c:	e9 e3       	ldi	r30, 0x39	; 57
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <dio_dioLevelReadChannel+0x6c>
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	8a 95       	dec	r24
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <dio_dioLevelReadChannel+0x68>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	35 c0       	rjmp	.+106    	; 0x1b0a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
    1aa0:	e6 e3       	ldi	r30, 0x36	; 54
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <dio_dioLevelReadChannel+0x90>
    1ab4:	55 95       	asr	r21
    1ab6:	47 95       	ror	r20
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <dio_dioLevelReadChannel+0x8c>
    1abc:	ca 01       	movw	r24, r20
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	23 c0       	rjmp	.+70     	; 0x1b0a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
    1ac4:	e3 e3       	ldi	r30, 0x33	; 51
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <dio_dioLevelReadChannel+0xb4>
    1ad8:	55 95       	asr	r21
    1ada:	47 95       	ror	r20
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <dio_dioLevelReadChannel+0xb0>
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	11 c0       	rjmp	.+34     	; 0x1b0a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
    1ae8:	e0 e3       	ldi	r30, 0x30	; 48
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <dio_dioLevelReadChannel+0xd8>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <dio_dioLevelReadChannel+0xd4>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
		break;
    }
	return loc_pinRead;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <dio_vidEnablePullUp>:
* \Parameters (in) : port  -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <dio_vidEnablePullUp+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	6a 83       	std	Y+2, r22	; 0x02
	/*	show me your code */	
	
}
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <keypad_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                         
* \Return value:   : None                               
*******************************************************************************/
void keypad_vidInit(void)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	/*	ROW channel direction -> output	*/
	dio_vidConfigChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,INPUT);
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,INPUT);
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,INPUT);
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,INPUT);
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	63 e0       	ldi	r22, 0x03	; 3
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	
	/*	COLUMN channel direction -> input	*/
	dio_vidConfigChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL,OUTPUT);
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	64 e0       	ldi	r22, 0x04	; 4
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL,OUTPUT);
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	65 e0       	ldi	r22, 0x05	; 5
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL,OUTPUT);
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	66 e0       	ldi	r22, 0x06	; 6
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL,OUTPUT);
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	67 e0       	ldi	r22, 0x07	; 7
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	
	dio_vidWriteChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL,STD_HIGH);
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	64 e0       	ldi	r22, 0x04	; 4
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL,STD_HIGH);
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	65 e0       	ldi	r22, 0x05	; 5
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL,STD_HIGH);
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	66 e0       	ldi	r22, 0x06	; 6
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL,STD_HIGH);
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	67 e0       	ldi	r22, 0x07	; 7
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>

	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	62 e0       	ldi	r22, 0x02	; 2
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	63 e0       	ldi	r22, 0x03	; 3
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <keypad_bolIsPressed>:


static boolean keypad_bolIsPressed(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	if (
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	64 e0       	ldi	r22, 0x04	; 4
    1c20:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c24:	88 23       	and	r24, r24
    1c26:	91 f0       	breq	.+36     	; 0x1c4c <keypad_bolIsPressed+0x3a>
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	65 e0       	ldi	r22, 0x05	; 5
    1c2c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c30:	88 23       	and	r24, r24
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <keypad_bolIsPressed+0x3a>
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	66 e0       	ldi	r22, 0x06	; 6
    1c38:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c3c:	88 23       	and	r24, r24
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <keypad_bolIsPressed+0x3a>
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	67 e0       	ldi	r22, 0x07	; 7
    1c44:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c48:	88 23       	and	r24, r24
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <keypad_bolIsPressed+0x40>
		!dio_dioLevelReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
		!dio_dioLevelReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL)||
		!dio_dioLevelReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL)
		)
		{
		  return TRUE;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <keypad_bolIsPressed+0x42>
		}
		else
		{
		  return FALSE;
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
		}
}
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <keypad_GetCol>:
static u8 keypad_GetCol(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	u8 loc_col = 0;
    1c68:	19 82       	std	Y+1, r1	; 0x01
	if (STD_LOW == dio_dioLevelReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL))
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	64 e0       	ldi	r22, 0x04	; 4
    1c6e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c72:	88 23       	and	r24, r24
    1c74:	19 f4       	brne	.+6      	; 0x1c7c <keypad_GetCol+0x1e>
	{
		loc_col = 1;	
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	1a c0       	rjmp	.+52     	; 0x1cb0 <keypad_GetCol+0x52>
	}
	else if (STD_LOW == dio_dioLevelReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL))
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	65 e0       	ldi	r22, 0x05	; 5
    1c80:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c84:	88 23       	and	r24, r24
    1c86:	19 f4       	brne	.+6      	; 0x1c8e <keypad_GetCol+0x30>
	{
	 loc_col = 2;	
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <keypad_GetCol+0x52>
	}
	else if (STD_LOW == dio_dioLevelReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL))
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	66 e0       	ldi	r22, 0x06	; 6
    1c92:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1c96:	88 23       	and	r24, r24
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <keypad_GetCol+0x42>
	{
	 loc_col = 3;	
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <keypad_GetCol+0x52>
	}
	else if (STD_LOW == dio_dioLevelReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL))
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	67 e0       	ldi	r22, 0x07	; 7
    1ca4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    1ca8:	88 23       	and	r24, r24
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <keypad_GetCol+0x52>
	{
	 loc_col = 4;	
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*	do nothing	*/
	}
	return loc_col;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <keypad_GetRow>:

static u8 keypad_GetRow(u8 col)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <keypad_GetRow+0x6>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_row =0;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	
	if (keypad_GetCol() == col)
    1cf0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	98 17       	cp	r25, r24
    1cfa:	59 f4       	brne	.+22     	; 0x1d12 <keypad_GetRow+0x58>
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <keypad_GetRow+0x48>
	{
		while(keypad_GetCol() == col)
		{
			keypad_GetCol();
    1cfe:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
	
	if (keypad_GetCol() == col)
	{
		while(keypad_GetCol() == col)
    1d02:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1d06:	98 2f       	mov	r25, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	98 17       	cp	r25, r24
    1d0c:	c1 f3       	breq	.-16     	; 0x1cfe <keypad_GetRow+0x44>
		{
			keypad_GetCol();
		}
		loc_row = 1;	
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
	}
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	62 e0       	ldi	r22, 0x02	; 2
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	63 e0       	ldi	r22, 0x03	; 3
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
    1d3a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1d3e:	98 2f       	mov	r25, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	98 17       	cp	r25, r24
    1d44:	59 f4       	brne	.+22     	; 0x1d5c <keypad_GetRow+0xa2>
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <keypad_GetRow+0x92>
	{
		while(keypad_GetCol() == col)
		{
			keypad_GetCol();
    1d48:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
	if (keypad_GetCol() == col)
	{
		while(keypad_GetCol() == col)
    1d4c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1d50:	98 2f       	mov	r25, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	98 17       	cp	r25, r24
    1d56:	c1 f3       	breq	.-16     	; 0x1d48 <keypad_GetRow+0x8e>
		{
			keypad_GetCol();
		}
		loc_row = 2;	
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	63 e0       	ldi	r22, 0x03	; 3
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
    1d84:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1d88:	98 2f       	mov	r25, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	98 17       	cp	r25, r24
    1d8e:	59 f4       	brne	.+22     	; 0x1da6 <keypad_GetRow+0xec>
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <keypad_GetRow+0xdc>
	{
		while(keypad_GetCol() == col)
		{
			keypad_GetCol();
    1d92:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
	if (keypad_GetCol() == col)
	{
		while(keypad_GetCol() == col)
    1d96:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1d9a:	98 2f       	mov	r25, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	98 17       	cp	r25, r24
    1da0:	c1 f3       	breq	.-16     	; 0x1d92 <keypad_GetRow+0xd8>
		{
			keypad_GetCol();
		}
		loc_row = 3;	
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
    1dce:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	98 17       	cp	r25, r24
    1dd8:	59 f4       	brne	.+22     	; 0x1df0 <keypad_GetRow+0x136>
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <keypad_GetRow+0x126>
	{
		while(keypad_GetCol() == col)
		{
			keypad_GetCol();
    1ddc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
	if (keypad_GetCol() == col)
	{
		while(keypad_GetCol() == col)
    1de0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1de4:	98 2f       	mov	r25, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	98 17       	cp	r25, r24
    1dea:	c1 f3       	breq	.-16     	; 0x1ddc <keypad_GetRow+0x122>
		{
			keypad_GetCol();
		}
		loc_row = 4;	
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return loc_row;
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <keypad_u8GetKey>:

u8 keypad_u8GetKey(void)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	61 97       	sbiw	r28, 0x11	; 17
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
	u8 loc_row = 0;
    1e10:	18 8a       	std	Y+16, r1	; 0x10
	u8 loc_col = 0;
    1e12:	1f 86       	std	Y+15, r1	; 0x0f
	
	if (TRUE == keypad_bolIsPressed())
    1e14:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <keypad_bolIsPressed>
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <keypad_u8GetKey+0x22>
    1e1c:	94 c0       	rjmp	.+296    	; 0x1f46 <keypad_u8GetKey+0x14a>
	{
		loc_col = keypad_GetCol();
    1e1e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <keypad_GetCol>
    1e22:	8f 87       	std	Y+15, r24	; 0x0f
		loc_row = keypad_GetRow(loc_col);
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <keypad_GetRow>
    1e2a:	88 8b       	std	Y+16, r24	; 0x10
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	aa e7       	ldi	r26, 0x7A	; 122
    1e32:	b3 e4       	ldi	r27, 0x43	; 67
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	9c 87       	std	Y+12, r25	; 0x0c
    1e38:	ad 87       	std	Y+13, r26	; 0x0d
    1e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a e7       	ldi	r20, 0x7A	; 122
    1e4a:	55 e4       	ldi	r21, 0x45	; 69
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	a9 87       	std	Y+9, r26	; 0x09
    1e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <keypad_u8GetKey+0x82>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <keypad_u8GetKey+0x100>
	else if (__tmp > 65535)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <keypad_u8GetKey+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <keypad_u8GetKey+0xe2>
    1ec0:	80 e9       	ldi	r24, 0x90	; 144
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <keypad_u8GetKey+0xd0>
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <keypad_u8GetKey+0xc4>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <keypad_u8GetKey+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <keypad_u8GetKey+0x10c>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
//		 lcd_vidDisplyChar(loc_row+48);
//		 lcd_vidGotoRowColumn(1,0);
//		 lcd_vidDisplyChar(loc_col+48);
		
		_delay_ms(250);
		keypad_vidInit();	
    1f10:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <keypad_vidInit>
		return 	keys_value[loc_row-1][loc_col-1];
    1f14:	88 89       	ldd	r24, Y+16	; 0x10
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	41 50       	subi	r20, 0x01	; 1
    1f1e:	50 40       	sbci	r21, 0x00	; 0
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 01       	movw	r18, r24
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	30 40       	sbci	r19, 0x00	; 0
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	82 0f       	add	r24, r18
    1f38:	93 1f       	adc	r25, r19
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	ef 54       	subi	r30, 0x4F	; 79
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	89 8b       	std	Y+17, r24	; 0x11
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <keypad_u8GetKey+0x14e>
	}
	else
	{
		return 0xFF;
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	89 8b       	std	Y+17, r24	; 0x11
    1f4a:	89 89       	ldd	r24, Y+17	; 0x11
	}
}
    1f4c:	61 96       	adiw	r28, 0x11	; 17
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <keypad_u8GetPressedKey>:

u8 keypad_u8GetPressedKey(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	e0 97       	sbiw	r28, 0x30	; 48
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey= NO_KEY_PRESSED_VALUE;
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;

	u8 Local_u8KepadArr[ROWS_NUMBER][COLUMNS_NUMBER]= KEYPAD_KEYS_ARR4x4;
    1f76:	ce 01       	movw	r24, r28
    1f78:	43 96       	adiw	r24, 0x13	; 19
    1f7a:	9d a7       	std	Y+45, r25	; 0x2d
    1f7c:	8c a7       	std	Y+44, r24	; 0x2c
    1f7e:	e7 e0       	ldi	r30, 0x07	; 7
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	ff a7       	std	Y+47, r31	; 0x2f
    1f84:	ee a7       	std	Y+46, r30	; 0x2e
    1f86:	f0 e1       	ldi	r31, 0x10	; 16
    1f88:	f8 ab       	std	Y+48, r31	; 0x30
    1f8a:	ee a5       	ldd	r30, Y+46	; 0x2e
    1f8c:	ff a5       	ldd	r31, Y+47	; 0x2f
    1f8e:	00 80       	ld	r0, Z
    1f90:	8e a5       	ldd	r24, Y+46	; 0x2e
    1f92:	9f a5       	ldd	r25, Y+47	; 0x2f
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	9f a7       	std	Y+47, r25	; 0x2f
    1f98:	8e a7       	std	Y+46, r24	; 0x2e
    1f9a:	ec a5       	ldd	r30, Y+44	; 0x2c
    1f9c:	fd a5       	ldd	r31, Y+45	; 0x2d
    1f9e:	00 82       	st	Z, r0
    1fa0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fa2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	9d a7       	std	Y+45, r25	; 0x2d
    1fa8:	8c a7       	std	Y+44, r24	; 0x2c
    1faa:	98 a9       	ldd	r25, Y+48	; 0x30
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	98 ab       	std	Y+48, r25	; 0x30
    1fb0:	e8 a9       	ldd	r30, Y+48	; 0x30
    1fb2:	ee 23       	and	r30, r30
    1fb4:	51 f7       	brne	.-44     	; 0x1f8a <keypad_u8GetPressedKey+0x2c>

	u8 Local_u8RowsPinsArr[4]= {KEYPAD_ROW1_CHANNEL, KEYPAD_ROW2_CHANNEL,KEYPAD_ROW3_CHANNEL,KEYPAD_ROW4_CHANNEL};
    1fb6:	1b a2       	std	Y+35, r1	; 0x23
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8c a3       	std	Y+36, r24	; 0x24
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	8d a3       	std	Y+37, r24	; 0x25
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	8e a3       	std	Y+38, r24	; 0x26
	u8 Local_u8ColumnsPinsArr[4]= {KEYPAD_COL1_CHANNEL,KEYPAD_COL2_CHANNEL,KEYPAD_COL3_CHANNEL,KEYPAD_COL4_CHANNEL};
    1fc4:	84 e0       	ldi	r24, 0x04	; 4
    1fc6:	8f a3       	std	Y+39, r24	; 0x27
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	88 a7       	std	Y+40, r24	; 0x28
    1fcc:	86 e0       	ldi	r24, 0x06	; 6
    1fce:	89 a7       	std	Y+41, r24	; 0x29
    1fd0:	87 e0       	ldi	r24, 0x07	; 7
    1fd2:	8a a7       	std	Y+42, r24	; 0x2a

	for(Local_u8ColumnIndex=0; Local_u8ColumnIndex<COLUMNS_NUMBER; Local_u8ColumnIndex++)
    1fd4:	19 8a       	std	Y+17, r1	; 0x11
    1fd6:	d5 c0       	rjmp	.+426    	; 0x2182 <keypad_u8GetPressedKey+0x224>
	{
		/*Activate the current column*/
		dio_vidWriteChannel(KEYPAD_u8_PORT, Local_u8ColumnsPinsArr[Local_u8ColumnIndex], STD_LOW);
    1fd8:	89 89       	ldd	r24, Y+17	; 0x11
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	ce 01       	movw	r24, r28
    1fe0:	87 96       	adiw	r24, 0x27	; 39
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	90 81       	ld	r25, Z
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	69 2f       	mov	r22, r25
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>

		for(Local_u8RowIndex=0; Local_u8RowIndex<ROWS_NUMBER; Local_u8RowIndex++)
    1ff4:	18 8a       	std	Y+16, r1	; 0x10
    1ff6:	b0 c0       	rjmp	.+352    	; 0x2158 <keypad_u8GetPressedKey+0x1fa>
		{
			/*Read the current row*/
			Local_u8PinState = dio_dioLevelReadChannel(KEYPAD_u8_PORT,Local_u8RowsPinsArr[Local_u8RowIndex]);
    1ff8:	88 89       	ldd	r24, Y+16	; 0x10
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	ce 01       	movw	r24, r28
    2000:	83 96       	adiw	r24, 0x23	; 35
    2002:	fc 01       	movw	r30, r24
    2004:	e2 0f       	add	r30, r18
    2006:	f3 1f       	adc	r31, r19
    2008:	90 81       	ld	r25, Z
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	69 2f       	mov	r22, r25
    200e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    2012:	8f 87       	std	Y+15, r24	; 0x0f

			/*Check if the key is pressed*/
			if(STD_LOW == Local_u8PinState )
    2014:	8f 85       	ldd	r24, Y+15	; 0x0f
    2016:	88 23       	and	r24, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <keypad_u8GetPressedKey+0xbe>
    201a:	9b c0       	rjmp	.+310    	; 0x2152 <keypad_u8GetPressedKey+0x1f4>
			{
				Local_u8PressedKey= Local_u8KepadArr[Local_u8RowIndex][Local_u8ColumnIndex];
    201c:	88 89       	ldd	r24, Y+16	; 0x10
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	48 2f       	mov	r20, r24
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	22 0f       	add	r18, r18
    202a:	33 1f       	adc	r19, r19
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	84 0f       	add	r24, r20
    203a:	95 1f       	adc	r25, r21
    203c:	fc 01       	movw	r30, r24
    203e:	72 96       	adiw	r30, 0x12	; 18
    2040:	80 81       	ld	r24, Z
    2042:	8a 8b       	std	Y+18, r24	; 0x12
    2044:	0e c0       	rjmp	.+28     	; 0x2062 <keypad_u8GetPressedKey+0x104>

				/*Busy waiting (polling) until the key is released*/
				while(STD_LOW == Local_u8PinState)
				{
					Local_u8PinState = dio_dioLevelReadChannel(KEYPAD_u8_PORT,Local_u8RowsPinsArr[Local_u8RowIndex]);
    2046:	88 89       	ldd	r24, Y+16	; 0x10
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	ce 01       	movw	r24, r28
    204e:	83 96       	adiw	r24, 0x23	; 35
    2050:	fc 01       	movw	r30, r24
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	90 81       	ld	r25, Z
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	69 2f       	mov	r22, r25
    205c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <dio_dioLevelReadChannel>
    2060:	8f 87       	std	Y+15, r24	; 0x0f
			if(STD_LOW == Local_u8PinState )
			{
				Local_u8PressedKey= Local_u8KepadArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Busy waiting (polling) until the key is released*/
				while(STD_LOW == Local_u8PinState)
    2062:	8f 85       	ldd	r24, Y+15	; 0x0f
    2064:	88 23       	and	r24, r24
    2066:	79 f3       	breq	.-34     	; 0x2046 <keypad_u8GetPressedKey+0xe8>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a8 ec       	ldi	r26, 0xC8	; 200
    206e:	b2 e4       	ldi	r27, 0x42	; 66
    2070:	8b 87       	std	Y+11, r24	; 0x0b
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	ad 87       	std	Y+13, r26	; 0x0d
    2076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	55 e4       	ldi	r21, 0x45	; 69
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	a9 87       	std	Y+9, r26	; 0x09
    2096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <keypad_u8GetPressedKey+0x15c>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <keypad_u8GetPressedKey+0x1da>
	else if (__tmp > 65535)
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <keypad_u8GetPressedKey+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <keypad_u8GetPressedKey+0x1bc>
    20fc:	80 e9       	ldi	r24, 0x90	; 144
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <keypad_u8GetPressedKey+0x1aa>
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <keypad_u8GetPressedKey+0x19e>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <keypad_u8GetPressedKey+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <keypad_u8GetPressedKey+0x1e6>
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
				{
					Local_u8PinState = dio_dioLevelReadChannel(KEYPAD_u8_PORT,Local_u8RowsPinsArr[Local_u8RowIndex]);

				}
				_delay_ms(100);
				return Local_u8PressedKey;
    214c:	fa 89       	ldd	r31, Y+18	; 0x12
    214e:	fb a7       	std	Y+43, r31	; 0x2b
    2150:	1e c0       	rjmp	.+60     	; 0x218e <keypad_u8GetPressedKey+0x230>
	for(Local_u8ColumnIndex=0; Local_u8ColumnIndex<COLUMNS_NUMBER; Local_u8ColumnIndex++)
	{
		/*Activate the current column*/
		dio_vidWriteChannel(KEYPAD_u8_PORT, Local_u8ColumnsPinsArr[Local_u8ColumnIndex], STD_LOW);

		for(Local_u8RowIndex=0; Local_u8RowIndex<ROWS_NUMBER; Local_u8RowIndex++)
    2152:	88 89       	ldd	r24, Y+16	; 0x10
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	88 8b       	std	Y+16, r24	; 0x10
    2158:	88 89       	ldd	r24, Y+16	; 0x10
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	08 f4       	brcc	.+2      	; 0x2160 <keypad_u8GetPressedKey+0x202>
    215e:	4c cf       	rjmp	.-360    	; 0x1ff8 <keypad_u8GetPressedKey+0x9a>
				_delay_ms(100);
				return Local_u8PressedKey;
			}
		}
			/*Deactivate the current row*/
			dio_vidWriteChannel(KEYPAD_u8_PORT, Local_u8ColumnsPinsArr[Local_u8ColumnIndex], STD_HIGH);
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ce 01       	movw	r24, r28
    2168:	87 96       	adiw	r24, 0x27	; 39
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	90 81       	ld	r25, Z
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	69 2f       	mov	r22, r25
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	u8 Local_u8KepadArr[ROWS_NUMBER][COLUMNS_NUMBER]= KEYPAD_KEYS_ARR4x4;

	u8 Local_u8RowsPinsArr[4]= {KEYPAD_ROW1_CHANNEL, KEYPAD_ROW2_CHANNEL,KEYPAD_ROW3_CHANNEL,KEYPAD_ROW4_CHANNEL};
	u8 Local_u8ColumnsPinsArr[4]= {KEYPAD_COL1_CHANNEL,KEYPAD_COL2_CHANNEL,KEYPAD_COL3_CHANNEL,KEYPAD_COL4_CHANNEL};

	for(Local_u8ColumnIndex=0; Local_u8ColumnIndex<COLUMNS_NUMBER; Local_u8ColumnIndex++)
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	89 8b       	std	Y+17, r24	; 0x11
    2182:	89 89       	ldd	r24, Y+17	; 0x11
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	08 f4       	brcc	.+2      	; 0x218a <keypad_u8GetPressedKey+0x22c>
    2188:	27 cf       	rjmp	.-434    	; 0x1fd8 <keypad_u8GetPressedKey+0x7a>
			}
		}
			/*Deactivate the current row*/
			dio_vidWriteChannel(KEYPAD_u8_PORT, Local_u8ColumnsPinsArr[Local_u8ColumnIndex], STD_HIGH);
	}
	return Local_u8PressedKey;
    218a:	8a 89       	ldd	r24, Y+18	; 0x12
    218c:	8b a7       	std	Y+43, r24	; 0x2b
    218e:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    2190:	e0 96       	adiw	r28, 0x30	; 48
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <enablePulse>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	a6 97       	sbiw	r28, 0x26	; 38
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e8       	ldi	r26, 0x80	; 128
    21c6:	bf e3       	ldi	r27, 0x3F	; 63
    21c8:	8b a3       	std	Y+35, r24	; 0x23
    21ca:	9c a3       	std	Y+36, r25	; 0x24
    21cc:	ad a3       	std	Y+37, r26	; 0x25
    21ce:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d0:	6b a1       	ldd	r22, Y+35	; 0x23
    21d2:	7c a1       	ldd	r23, Y+36	; 0x24
    21d4:	8d a1       	ldd	r24, Y+37	; 0x25
    21d6:	9e a1       	ldd	r25, Y+38	; 0x26
    21d8:	2b ea       	ldi	r18, 0xAB	; 171
    21da:	3a ea       	ldi	r19, 0xAA	; 170
    21dc:	4a ea       	ldi	r20, 0xAA	; 170
    21de:	50 e4       	ldi	r21, 0x40	; 64
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8f 8f       	std	Y+31, r24	; 0x1f
    21ea:	98 a3       	std	Y+32, r25	; 0x20
    21ec:	a9 a3       	std	Y+33, r26	; 0x21
    21ee:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21f2:	78 a1       	ldd	r23, Y+32	; 0x20
    21f4:	89 a1       	ldd	r24, Y+33	; 0x21
    21f6:	9a a1       	ldd	r25, Y+34	; 0x22
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	1c f4       	brge	.+6      	; 0x220e <enablePulse+0x6c>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8e 8f       	std	Y+30, r24	; 0x1e
    220c:	91 c0       	rjmp	.+290    	; 0x2330 <enablePulse+0x18e>
	else if (__tmp > 255)
    220e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2210:	78 a1       	ldd	r23, Y+32	; 0x20
    2212:	89 a1       	ldd	r24, Y+33	; 0x21
    2214:	9a a1       	ldd	r25, Y+34	; 0x22
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <enablePulse+0x86>
    2226:	7b c0       	rjmp	.+246    	; 0x231e <enablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2228:	6b a1       	ldd	r22, Y+35	; 0x23
    222a:	7c a1       	ldd	r23, Y+36	; 0x24
    222c:	8d a1       	ldd	r24, Y+37	; 0x25
    222e:	9e a1       	ldd	r25, Y+38	; 0x26
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a e7       	ldi	r20, 0x7A	; 122
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8a 8f       	std	Y+26, r24	; 0x1a
    2242:	9b 8f       	std	Y+27, r25	; 0x1b
    2244:	ac 8f       	std	Y+28, r26	; 0x1c
    2246:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	6a 8d       	ldd	r22, Y+26	; 0x1a
    224a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    224c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a e7       	ldi	r20, 0x7A	; 122
    2256:	55 e4       	ldi	r21, 0x45	; 69
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8e 8b       	std	Y+22, r24	; 0x16
    2262:	9f 8b       	std	Y+23, r25	; 0x17
    2264:	a8 8f       	std	Y+24, r26	; 0x18
    2266:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2268:	6e 89       	ldd	r22, Y+22	; 0x16
    226a:	7f 89       	ldd	r23, Y+23	; 0x17
    226c:	88 8d       	ldd	r24, Y+24	; 0x18
    226e:	99 8d       	ldd	r25, Y+25	; 0x19
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <enablePulse+0xe8>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9d 8b       	std	Y+21, r25	; 0x15
    2286:	8c 8b       	std	Y+20, r24	; 0x14
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <enablePulse+0x166>
	else if (__tmp > 65535)
    228a:	6e 89       	ldd	r22, Y+22	; 0x16
    228c:	7f 89       	ldd	r23, Y+23	; 0x17
    228e:	88 8d       	ldd	r24, Y+24	; 0x18
    2290:	99 8d       	ldd	r25, Y+25	; 0x19
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <enablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22a4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9d 8b       	std	Y+21, r25	; 0x15
    22c8:	8c 8b       	std	Y+20, r24	; 0x14
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <enablePulse+0x148>
    22cc:	80 e9       	ldi	r24, 0x90	; 144
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	9b 8b       	std	Y+19, r25	; 0x13
    22d2:	8a 8b       	std	Y+18, r24	; 0x12
    22d4:	8a 89       	ldd	r24, Y+18	; 0x12
    22d6:	9b 89       	ldd	r25, Y+19	; 0x13
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <enablePulse+0x136>
    22dc:	9b 8b       	std	Y+19, r25	; 0x13
    22de:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8c 89       	ldd	r24, Y+20	; 0x14
    22e2:	9d 89       	ldd	r25, Y+21	; 0x15
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9d 8b       	std	Y+21, r25	; 0x15
    22e8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8c 89       	ldd	r24, Y+20	; 0x14
    22ec:	9d 89       	ldd	r25, Y+21	; 0x15
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <enablePulse+0x12a>
    22f2:	24 c0       	rjmp	.+72     	; 0x233c <enablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6e 89       	ldd	r22, Y+22	; 0x16
    22f6:	7f 89       	ldd	r23, Y+23	; 0x17
    22f8:	88 8d       	ldd	r24, Y+24	; 0x18
    22fa:	99 8d       	ldd	r25, Y+25	; 0x19
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9d 8b       	std	Y+21, r25	; 0x15
    2306:	8c 8b       	std	Y+20, r24	; 0x14
    2308:	8c 89       	ldd	r24, Y+20	; 0x14
    230a:	9d 89       	ldd	r25, Y+21	; 0x15
    230c:	99 8b       	std	Y+17, r25	; 0x11
    230e:	88 8b       	std	Y+16, r24	; 0x10
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	99 89       	ldd	r25, Y+17	; 0x11
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <enablePulse+0x172>
    2318:	99 8b       	std	Y+17, r25	; 0x11
    231a:	88 8b       	std	Y+16, r24	; 0x10
    231c:	0f c0       	rjmp	.+30     	; 0x233c <enablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    231e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2320:	78 a1       	ldd	r23, Y+32	; 0x20
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8e 8f       	std	Y+30, r24	; 0x1e
    2330:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2332:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2334:	8f 85       	ldd	r24, Y+15	; 0x0f
    2336:	8a 95       	dec	r24
    2338:	f1 f7       	brne	.-4      	; 0x2336 <enablePulse+0x194>
    233a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e4       	ldi	r27, 0x40	; 64
    234e:	8b 87       	std	Y+11, r24	; 0x0b
    2350:	9c 87       	std	Y+12, r25	; 0x0c
    2352:	ad 87       	std	Y+13, r26	; 0x0d
    2354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8f 83       	std	Y+7, r24	; 0x07
    2370:	98 87       	std	Y+8, r25	; 0x08
    2372:	a9 87       	std	Y+9, r26	; 0x09
    2374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <enablePulse+0x1f6>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <enablePulse+0x274>
	else if (__tmp > 65535)
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <enablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <enablePulse+0x256>
    23da:	80 e9       	ldi	r24, 0x90	; 144
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <enablePulse+0x244>
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <enablePulse+0x238>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <enablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <enablePulse+0x280>
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    242a:	a6 96       	adiw	r28, 0x26	; 38
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <lcd_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	e4 97       	sbiw	r28, 0x34	; 52
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	//dio_vidConfigChannel(LCD_RW_PORT, LCD_RW_CHANNEL, OUTPUT);
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	62 e0       	ldi	r22, 0x02	; 2
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	62 e0       	ldi	r22, 0x02	; 2
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	66 e0       	ldi	r22, 0x06	; 6
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e7       	ldi	r26, 0x70	; 112
    24b6:	b1 e4       	ldi	r27, 0x41	; 65
    24b8:	89 ab       	std	Y+49, r24	; 0x31
    24ba:	9a ab       	std	Y+50, r25	; 0x32
    24bc:	ab ab       	std	Y+51, r26	; 0x33
    24be:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	69 a9       	ldd	r22, Y+49	; 0x31
    24c2:	7a a9       	ldd	r23, Y+50	; 0x32
    24c4:	8b a9       	ldd	r24, Y+51	; 0x33
    24c6:	9c a9       	ldd	r25, Y+52	; 0x34
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	55 e4       	ldi	r21, 0x45	; 69
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8d a7       	std	Y+45, r24	; 0x2d
    24da:	9e a7       	std	Y+46, r25	; 0x2e
    24dc:	af a7       	std	Y+47, r26	; 0x2f
    24de:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    24e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    24e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    24e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e6:	98 a9       	ldd	r25, Y+48	; 0x30
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <lcd_vidInit+0xc6>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9c a7       	std	Y+44, r25	; 0x2c
    24fe:	8b a7       	std	Y+43, r24	; 0x2b
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <lcd_vidInit+0x144>
	else if (__tmp > 65535)
    2502:	6d a5       	ldd	r22, Y+45	; 0x2d
    2504:	7e a5       	ldd	r23, Y+46	; 0x2e
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <lcd_vidInit+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	69 a9       	ldd	r22, Y+49	; 0x31
    251c:	7a a9       	ldd	r23, Y+50	; 0x32
    251e:	8b a9       	ldd	r24, Y+51	; 0x33
    2520:	9c a9       	ldd	r25, Y+52	; 0x34
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9c a7       	std	Y+44, r25	; 0x2c
    2540:	8b a7       	std	Y+43, r24	; 0x2b
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <lcd_vidInit+0x126>
    2544:	80 e9       	ldi	r24, 0x90	; 144
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	9a a7       	std	Y+42, r25	; 0x2a
    254a:	89 a7       	std	Y+41, r24	; 0x29
    254c:	89 a5       	ldd	r24, Y+41	; 0x29
    254e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <lcd_vidInit+0x114>
    2554:	9a a7       	std	Y+42, r25	; 0x2a
    2556:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8b a5       	ldd	r24, Y+43	; 0x2b
    255a:	9c a5       	ldd	r25, Y+44	; 0x2c
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9c a7       	std	Y+44, r25	; 0x2c
    2560:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8b a5       	ldd	r24, Y+43	; 0x2b
    2564:	9c a5       	ldd	r25, Y+44	; 0x2c
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <lcd_vidInit+0x108>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <lcd_vidInit+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6d a5       	ldd	r22, Y+45	; 0x2d
    256e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2570:	8f a5       	ldd	r24, Y+47	; 0x2f
    2572:	98 a9       	ldd	r25, Y+48	; 0x30
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9c a7       	std	Y+44, r25	; 0x2c
    257e:	8b a7       	std	Y+43, r24	; 0x2b
    2580:	8b a5       	ldd	r24, Y+43	; 0x2b
    2582:	9c a5       	ldd	r25, Y+44	; 0x2c
    2584:	98 a7       	std	Y+40, r25	; 0x28
    2586:	8f a3       	std	Y+39, r24	; 0x27
    2588:	8f a1       	ldd	r24, Y+39	; 0x27
    258a:	98 a5       	ldd	r25, Y+40	; 0x28
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <lcd_vidInit+0x150>
    2590:	98 a7       	std	Y+40, r25	; 0x28
    2592:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	lcd_vidSendCmd(0x03);
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 ea       	ldi	r26, 0xA0	; 160
    25a0:	b0 e4       	ldi	r27, 0x40	; 64
    25a2:	8b a3       	std	Y+35, r24	; 0x23
    25a4:	9c a3       	std	Y+36, r25	; 0x24
    25a6:	ad a3       	std	Y+37, r26	; 0x25
    25a8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6b a1       	ldd	r22, Y+35	; 0x23
    25ac:	7c a1       	ldd	r23, Y+36	; 0x24
    25ae:	8d a1       	ldd	r24, Y+37	; 0x25
    25b0:	9e a1       	ldd	r25, Y+38	; 0x26
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a e7       	ldi	r20, 0x7A	; 122
    25b8:	55 e4       	ldi	r21, 0x45	; 69
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8f 8f       	std	Y+31, r24	; 0x1f
    25c4:	98 a3       	std	Y+32, r25	; 0x20
    25c6:	a9 a3       	std	Y+33, r26	; 0x21
    25c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    25ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25cc:	78 a1       	ldd	r23, Y+32	; 0x20
    25ce:	89 a1       	ldd	r24, Y+33	; 0x21
    25d0:	9a a1       	ldd	r25, Y+34	; 0x22
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <lcd_vidInit+0x1b0>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9e 8f       	std	Y+30, r25	; 0x1e
    25e8:	8d 8f       	std	Y+29, r24	; 0x1d
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <lcd_vidInit+0x22e>
	else if (__tmp > 65535)
    25ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25ee:	78 a1       	ldd	r23, Y+32	; 0x20
    25f0:	89 a1       	ldd	r24, Y+33	; 0x21
    25f2:	9a a1       	ldd	r25, Y+34	; 0x22
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <lcd_vidInit+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6b a1       	ldd	r22, Y+35	; 0x23
    2606:	7c a1       	ldd	r23, Y+36	; 0x24
    2608:	8d a1       	ldd	r24, Y+37	; 0x25
    260a:	9e a1       	ldd	r25, Y+38	; 0x26
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 8f       	std	Y+30, r25	; 0x1e
    262a:	8d 8f       	std	Y+29, r24	; 0x1d
    262c:	0f c0       	rjmp	.+30     	; 0x264c <lcd_vidInit+0x210>
    262e:	80 e9       	ldi	r24, 0x90	; 144
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	9c 8f       	std	Y+28, r25	; 0x1c
    2634:	8b 8f       	std	Y+27, r24	; 0x1b
    2636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <lcd_vidInit+0x1fe>
    263e:	9c 8f       	std	Y+28, r25	; 0x1c
    2640:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2644:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e 8f       	std	Y+30, r25	; 0x1e
    264a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    264e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <lcd_vidInit+0x1f2>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <lcd_vidInit+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2658:	78 a1       	ldd	r23, Y+32	; 0x20
    265a:	89 a1       	ldd	r24, Y+33	; 0x21
    265c:	9a a1       	ldd	r25, Y+34	; 0x22
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 8f       	std	Y+30, r25	; 0x1e
    2668:	8d 8f       	std	Y+29, r24	; 0x1d
    266a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    266c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    266e:	9a 8f       	std	Y+26, r25	; 0x1a
    2670:	89 8f       	std	Y+25, r24	; 0x19
    2672:	89 8d       	ldd	r24, Y+25	; 0x19
    2674:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <lcd_vidInit+0x23a>
    267a:	9a 8f       	std	Y+26, r25	; 0x1a
    267c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a8 ec       	ldi	r26, 0xC8	; 200
    268a:	b2 e4       	ldi	r27, 0x42	; 66
    268c:	8d 8b       	std	Y+21, r24	; 0x15
    268e:	9e 8b       	std	Y+22, r25	; 0x16
    2690:	af 8b       	std	Y+23, r26	; 0x17
    2692:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2694:	6d 89       	ldd	r22, Y+21	; 0x15
    2696:	7e 89       	ldd	r23, Y+22	; 0x16
    2698:	8f 89       	ldd	r24, Y+23	; 0x17
    269a:	98 8d       	ldd	r25, Y+24	; 0x18
    269c:	2b ea       	ldi	r18, 0xAB	; 171
    269e:	3a ea       	ldi	r19, 0xAA	; 170
    26a0:	4a ea       	ldi	r20, 0xAA	; 170
    26a2:	50 e4       	ldi	r21, 0x40	; 64
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	89 8b       	std	Y+17, r24	; 0x11
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	ab 8b       	std	Y+19, r26	; 0x13
    26b2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26b4:	69 89       	ldd	r22, Y+17	; 0x11
    26b6:	7a 89       	ldd	r23, Y+18	; 0x12
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	1c f4       	brge	.+6      	; 0x26d2 <lcd_vidInit+0x296>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	88 8b       	std	Y+16, r24	; 0x10
    26d0:	91 c0       	rjmp	.+290    	; 0x27f4 <lcd_vidInit+0x3b8>
	else if (__tmp > 255)
    26d2:	69 89       	ldd	r22, Y+17	; 0x11
    26d4:	7a 89       	ldd	r23, Y+18	; 0x12
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	53 e4       	ldi	r21, 0x43	; 67
    26e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	0c f0       	brlt	.+2      	; 0x26ec <lcd_vidInit+0x2b0>
    26ea:	7b c0       	rjmp	.+246    	; 0x27e2 <lcd_vidInit+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    26ec:	6d 89       	ldd	r22, Y+21	; 0x15
    26ee:	7e 89       	ldd	r23, Y+22	; 0x16
    26f0:	8f 89       	ldd	r24, Y+23	; 0x17
    26f2:	98 8d       	ldd	r25, Y+24	; 0x18
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8c 87       	std	Y+12, r24	; 0x0c
    2706:	9d 87       	std	Y+13, r25	; 0x0d
    2708:	ae 87       	std	Y+14, r26	; 0x0e
    270a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	6c 85       	ldd	r22, Y+12	; 0x0c
    270e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2710:	8e 85       	ldd	r24, Y+14	; 0x0e
    2712:	9f 85       	ldd	r25, Y+15	; 0x0f
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a e7       	ldi	r20, 0x7A	; 122
    271a:	55 e4       	ldi	r21, 0x45	; 69
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	88 87       	std	Y+8, r24	; 0x08
    2726:	99 87       	std	Y+9, r25	; 0x09
    2728:	aa 87       	std	Y+10, r26	; 0x0a
    272a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    272c:	68 85       	ldd	r22, Y+8	; 0x08
    272e:	79 85       	ldd	r23, Y+9	; 0x09
    2730:	8a 85       	ldd	r24, Y+10	; 0x0a
    2732:	9b 85       	ldd	r25, Y+11	; 0x0b
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <lcd_vidInit+0x312>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9f 83       	std	Y+7, r25	; 0x07
    274a:	8e 83       	std	Y+6, r24	; 0x06
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <lcd_vidInit+0x390>
	else if (__tmp > 65535)
    274e:	68 85       	ldd	r22, Y+8	; 0x08
    2750:	79 85       	ldd	r23, Y+9	; 0x09
    2752:	8a 85       	ldd	r24, Y+10	; 0x0a
    2754:	9b 85       	ldd	r25, Y+11	; 0x0b
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <lcd_vidInit+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	6c 85       	ldd	r22, Y+12	; 0x0c
    2768:	7d 85       	ldd	r23, Y+13	; 0x0d
    276a:	8e 85       	ldd	r24, Y+14	; 0x0e
    276c:	9f 85       	ldd	r25, Y+15	; 0x0f
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9f 83       	std	Y+7, r25	; 0x07
    278c:	8e 83       	std	Y+6, r24	; 0x06
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <lcd_vidInit+0x372>
    2790:	80 e9       	ldi	r24, 0x90	; 144
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	9d 83       	std	Y+5, r25	; 0x05
    2796:	8c 83       	std	Y+4, r24	; 0x04
    2798:	8c 81       	ldd	r24, Y+4	; 0x04
    279a:	9d 81       	ldd	r25, Y+5	; 0x05
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <lcd_vidInit+0x360>
    27a0:	9d 83       	std	Y+5, r25	; 0x05
    27a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8e 81       	ldd	r24, Y+6	; 0x06
    27a6:	9f 81       	ldd	r25, Y+7	; 0x07
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9f 83       	std	Y+7, r25	; 0x07
    27ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8e 81       	ldd	r24, Y+6	; 0x06
    27b0:	9f 81       	ldd	r25, Y+7	; 0x07
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <lcd_vidInit+0x354>
    27b6:	24 c0       	rjmp	.+72     	; 0x2800 <lcd_vidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	68 85       	ldd	r22, Y+8	; 0x08
    27ba:	79 85       	ldd	r23, Y+9	; 0x09
    27bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27be:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9f 83       	std	Y+7, r25	; 0x07
    27ca:	8e 83       	std	Y+6, r24	; 0x06
    27cc:	8e 81       	ldd	r24, Y+6	; 0x06
    27ce:	9f 81       	ldd	r25, Y+7	; 0x07
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <lcd_vidInit+0x39c>
    27dc:	9b 83       	std	Y+3, r25	; 0x03
    27de:	8a 83       	std	Y+2, r24	; 0x02
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <lcd_vidInit+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e2:	69 89       	ldd	r22, Y+17	; 0x11
    27e4:	7a 89       	ldd	r23, Y+18	; 0x12
    27e6:	8b 89       	ldd	r24, Y+19	; 0x13
    27e8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	88 8b       	std	Y+16, r24	; 0x10
    27f4:	88 89       	ldd	r24, Y+16	; 0x10
    27f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8a 95       	dec	r24
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <lcd_vidInit+0x3be>
    27fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	lcd_vidSendCmd(0x03);
    2800:	83 e0       	ldi	r24, 0x03	; 3
    2802:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
    280c:	88 e2       	ldi	r24, 0x28	; 40
    280e:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	// lcd_vidCustomWrite();
	// lcd_vidGotoRowColumn(0, 0);
	lcd_vidSendCmd(_LCD_CLEAR);
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
}
    2818:	e4 96       	adiw	r28, 0x34	; 52
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	0f 92       	push	r0
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Command Mode	*/
	//dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	63 e0       	ldi	r22, 0x03	; 3
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	82 95       	swap	r24
    2844:	8f 70       	andi	r24, 0x0F	; 15
    2846:	98 2f       	mov	r25, r24
    2848:	91 70       	andi	r25, 0x01	; 1
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	49 2f       	mov	r20, r25
    2850:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	82 95       	swap	r24
    2858:	86 95       	lsr	r24
    285a:	87 70       	andi	r24, 0x07	; 7
    285c:	98 2f       	mov	r25, r24
    285e:	91 70       	andi	r25, 0x01	; 1
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	49 2f       	mov	r20, r25
    2866:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	82 95       	swap	r24
    286e:	86 95       	lsr	r24
    2870:	86 95       	lsr	r24
    2872:	83 70       	andi	r24, 0x03	; 3
    2874:	98 2f       	mov	r25, r24
    2876:	91 70       	andi	r25, 0x01	; 1
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	49 2f       	mov	r20, r25
    287e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	98 2f       	mov	r25, r24
    2886:	99 1f       	adc	r25, r25
    2888:	99 27       	eor	r25, r25
    288a:	99 1f       	adc	r25, r25
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	66 e0       	ldi	r22, 0x06	; 6
    2890:	49 2f       	mov	r20, r25
    2892:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	
	enablePulse();
    2896:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	98 2f       	mov	r25, r24
    289e:	91 70       	andi	r25, 0x01	; 1
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	49 2f       	mov	r20, r25
    28a6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	86 95       	lsr	r24
    28ae:	98 2f       	mov	r25, r24
    28b0:	91 70       	andi	r25, 0x01	; 1
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	49 2f       	mov	r20, r25
    28b8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	86 95       	lsr	r24
    28c0:	86 95       	lsr	r24
    28c2:	98 2f       	mov	r25, r24
    28c4:	91 70       	andi	r25, 0x01	; 1
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	49 2f       	mov	r20, r25
    28cc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	86 95       	lsr	r24
    28d4:	86 95       	lsr	r24
    28d6:	86 95       	lsr	r24
    28d8:	98 2f       	mov	r25, r24
    28da:	91 70       	andi	r25, 0x01	; 1
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	66 e0       	ldi	r22, 0x06	; 6
    28e0:	49 2f       	mov	r20, r25
    28e2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	
	enablePulse();
    28e6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <enablePulse>
}
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	0f 92       	push	r0
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Data Mode	*/
	//dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	63 e0       	ldi	r22, 0x03	; 3
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	82 95       	swap	r24
    290c:	8f 70       	andi	r24, 0x0F	; 15
    290e:	98 2f       	mov	r25, r24
    2910:	91 70       	andi	r25, 0x01	; 1
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	49 2f       	mov	r20, r25
    2918:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	82 95       	swap	r24
    2920:	86 95       	lsr	r24
    2922:	87 70       	andi	r24, 0x07	; 7
    2924:	98 2f       	mov	r25, r24
    2926:	91 70       	andi	r25, 0x01	; 1
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	49 2f       	mov	r20, r25
    292e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	82 95       	swap	r24
    2936:	86 95       	lsr	r24
    2938:	86 95       	lsr	r24
    293a:	83 70       	andi	r24, 0x03	; 3
    293c:	98 2f       	mov	r25, r24
    293e:	91 70       	andi	r25, 0x01	; 1
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	49 2f       	mov	r20, r25
    2946:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	98 2f       	mov	r25, r24
    294e:	99 1f       	adc	r25, r25
    2950:	99 27       	eor	r25, r25
    2952:	99 1f       	adc	r25, r25
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	66 e0       	ldi	r22, 0x06	; 6
    2958:	49 2f       	mov	r20, r25
    295a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	
	enablePulse();
    295e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	98 2f       	mov	r25, r24
    2966:	91 70       	andi	r25, 0x01	; 1
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	86 95       	lsr	r24
    2976:	98 2f       	mov	r25, r24
    2978:	91 70       	andi	r25, 0x01	; 1
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	61 e0       	ldi	r22, 0x01	; 1
    297e:	49 2f       	mov	r20, r25
    2980:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	86 95       	lsr	r24
    2988:	86 95       	lsr	r24
    298a:	98 2f       	mov	r25, r24
    298c:	91 70       	andi	r25, 0x01	; 1
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	62 e0       	ldi	r22, 0x02	; 2
    2992:	49 2f       	mov	r20, r25
    2994:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	86 95       	lsr	r24
    299c:	86 95       	lsr	r24
    299e:	86 95       	lsr	r24
    29a0:	98 2f       	mov	r25, r24
    29a2:	91 70       	andi	r25, 0x01	; 1
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	66 e0       	ldi	r22, 0x06	; 6
    29a8:	49 2f       	mov	r20, r25
    29aa:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	
	enablePulse();
    29ae:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <enablePulse>
	
}
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <lcd_vidGotoRowColumn>:
* \Parameters (in) : row	-> LCD row ID
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <lcd_vidGotoRowColumn+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <lcd_vidGotoRowColumn+0x8>
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	3c 83       	std	Y+4, r19	; 0x04
    29d2:	2b 83       	std	Y+3, r18	; 0x03
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	9c 81       	ldd	r25, Y+4	; 0x04
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	31 f0       	breq	.+12     	; 0x29e8 <lcd_vidGotoRowColumn+0x2e>
    29dc:	2b 81       	ldd	r18, Y+3	; 0x03
    29de:	3c 81       	ldd	r19, Y+4	; 0x04
    29e0:	21 30       	cpi	r18, 0x01	; 1
    29e2:	31 05       	cpc	r19, r1
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <lcd_vidGotoRowColumn+0x38>
    29e6:	09 c0       	rjmp	.+18     	; 0x29fa <lcd_vidGotoRowColumn+0x40>
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	80 58       	subi	r24, 0x80	; 128
    29ec:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
    29f0:	04 c0       	rjmp	.+8      	; 0x29fa <lcd_vidGotoRowColumn+0x40>
		break;

	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	80 54       	subi	r24, 0x40	; 64
    29f6:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
		break;
	}	
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <LCD_voidGotoXY>:

void LCD_voidGotoXY(lcd_row_t Copy_u8XPos, lcd_column_t Copy_u8YPos)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <LCD_voidGotoXY+0x6>
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	8a 83       	std	Y+2, r24	; 0x02
    2a16:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

//	Adresses start with address 0
	if(Copy_u8XPos == LCD_u8_FIRST_LINE)
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	88 23       	and	r24, r24
    2a1c:	19 f4       	brne	.+6      	; 0x2a24 <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	06 c0       	rjmp	.+12     	; 0x2a30 <LCD_voidGotoXY+0x28>
	}

//	Adresses start with address 0x40
	else if(Copy_u8XPos == LCD_u8_SECOND_LINE)
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	19 f4       	brne	.+6      	; 0x2a30 <LCD_voidGotoXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8YPos;
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	80 5c       	subi	r24, 0xC0	; 192
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	}

//	Setting the 8th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 7);
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	80 68       	ori	r24, 0x80	; 128
    2a34:	89 83       	std	Y+1, r24	; 0x01
//	Sending the SET DDRAM address command
	lcd_vidSendCmd(Local_u8Address);
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <lcd_vidDisplyChar>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
	lcd_vidSendData(chr);
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	0e 94 79 14 	call	0x28f2	; 0x28f2 <lcd_vidSendData>
}
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <lcd_vidDisplyStr+0x6>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	0a c0       	rjmp	.+20     	; 0x2a86 <lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		lcd_vidDisplyChar(*str);
    2a72:	e9 81       	ldd	r30, Y+1	; 0x01
    2a74:	fa 81       	ldd	r31, Y+2	; 0x02
    2a76:	80 81       	ld	r24, Z
    2a78:	0e 94 24 15 	call	0x2a48	; 0x2a48 <lcd_vidDisplyChar>
		str++;
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 23       	and	r24, r24
    2a8e:	89 f7       	brne	.-30     	; 0x2a72 <lcd_vidDisplyStr+0x10>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <lcd_vidDisplyNum>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : num	-> number to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	c9 56       	subi	r28, 0x69	; 105
    2aa8:	d0 40       	sbci	r29, 0x00	; 0
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ea 59       	subi	r30, 0x9A	; 154
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 83       	st	Z, r22
    2abc:	71 83       	std	Z+1, r23	; 0x01
    2abe:	82 83       	std	Z+2, r24	; 0x02
    2ac0:	93 83       	std	Z+3, r25	; 0x03
	u8 num_to_char_array[100], iterator = 0;
    2ac2:	19 82       	std	Y+1, r1	; 0x01
    2ac4:	37 c0       	rjmp	.+110    	; 0x2b34 <lcd_vidDisplyNum+0x9a>
	while(num != 0)
	{
		num_to_char_array[iterator] = (u8)(num % 10);
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	08 2f       	mov	r16, r24
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	fe 01       	movw	r30, r28
    2ace:	ea 59       	subi	r30, 0x9A	; 154
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	a2 81       	ldd	r26, Z+2	; 0x02
    2ad8:	b3 81       	ldd	r27, Z+3	; 0x03
    2ada:	2a e0       	ldi	r18, 0x0A	; 10
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 97 1b 	call	0x372e	; 0x372e <__udivmodsi4>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	28 2f       	mov	r18, r24
    2af0:	ce 01       	movw	r24, r28
    2af2:	02 96       	adiw	r24, 0x02	; 2
    2af4:	fc 01       	movw	r30, r24
    2af6:	e0 0f       	add	r30, r16
    2af8:	f1 1f       	adc	r31, r17
    2afa:	20 83       	st	Z, r18
		num /= 10;
    2afc:	8e 01       	movw	r16, r28
    2afe:	0a 59       	subi	r16, 0x9A	; 154
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	ea 59       	subi	r30, 0x9A	; 154
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b0e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b10:	2a e0       	ldi	r18, 0x0A	; 10
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 97 1b 	call	0x372e	; 0x372e <__udivmodsi4>
    2b20:	da 01       	movw	r26, r20
    2b22:	c9 01       	movw	r24, r18
    2b24:	f8 01       	movw	r30, r16
    2b26:	80 83       	st	Z, r24
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	a2 83       	std	Z+2, r26	; 0x02
    2b2c:	b3 83       	std	Z+3, r27	; 0x03
		iterator++;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	8f 5f       	subi	r24, 0xFF	; 255
    2b32:	89 83       	std	Y+1, r24	; 0x01
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
	u8 num_to_char_array[100], iterator = 0;
	while(num != 0)
    2b34:	fe 01       	movw	r30, r28
    2b36:	ea 59       	subi	r30, 0x9A	; 154
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b40:	b3 81       	ldd	r27, Z+3	; 0x03
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	a1 05       	cpc	r26, r1
    2b46:	b1 05       	cpc	r27, r1
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <lcd_vidDisplyNum+0xb2>
    2b4a:	bd cf       	rjmp	.-134    	; 0x2ac6 <lcd_vidDisplyNum+0x2c>
    2b4c:	12 c0       	rjmp	.+36     	; 0x2b72 <lcd_vidDisplyNum+0xd8>
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9c 01       	movw	r18, r24
    2b56:	21 50       	subi	r18, 0x01	; 1
    2b58:	30 40       	sbci	r19, 0x00	; 0
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	02 96       	adiw	r24, 0x02	; 2
    2b5e:	fc 01       	movw	r30, r24
    2b60:	e2 0f       	add	r30, r18
    2b62:	f3 1f       	adc	r31, r19
    2b64:	80 81       	ld	r24, Z
    2b66:	80 5d       	subi	r24, 0xD0	; 208
    2b68:	0e 94 79 14 	call	0x28f2	; 0x28f2 <lcd_vidSendData>
	{
		num_to_char_array[iterator] = (u8)(num % 10);
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	81 50       	subi	r24, 0x01	; 1
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	88 23       	and	r24, r24
    2b76:	59 f7       	brne	.-42     	; 0x2b4e <lcd_vidDisplyNum+0xb4>
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
	}
}
    2b78:	c7 59       	subi	r28, 0x97	; 151
    2b7a:	df 4f       	sbci	r29, 0xFF	; 255
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	08 95       	ret

00002b90 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <lcd_vidCustomWrite+0x6>
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    2b9a:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    2b9c:	19 82       	std	Y+1, r1	; 0x01
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    2b9e:	19 82       	std	Y+1, r1	; 0x01
    2ba0:	2c c0       	rjmp	.+88     	; 0x2bfa <lcd_vidCustomWrite+0x6a>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	88 2f       	mov	r24, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	08 96       	adiw	r24, 0x08	; 8
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2bba:	1a 82       	std	Y+2, r1	; 0x02
    2bbc:	18 c0       	rjmp	.+48     	; 0x2bee <lcd_vidCustomWrite+0x5e>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	48 2f       	mov	r20, r24
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	ca 01       	movw	r24, r20
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	fc 01       	movw	r30, r24
    2bde:	ef 53       	subi	r30, 0x3F	; 63
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	8f 5f       	subi	r24, 0xFF	; 255
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	88 30       	cpi	r24, 0x08	; 8
    2bf2:	28 f3       	brcs	.-54     	; 0x2bbe <lcd_vidCustomWrite+0x2e>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	8f 5f       	subi	r24, 0xFF	; 255
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 30       	cpi	r24, 0x08	; 8
    2bfe:	88 f2       	brcs	.-94     	; 0x2ba2 <lcd_vidCustomWrite+0x12>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_XPos, u8 Copy_YPos)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	27 97       	sbiw	r28, 0x07	; 7
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	6d 83       	std	Y+5, r22	; 0x05
    2c24:	4e 83       	std	Y+6, r20	; 0x06
    2c26:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

//	1- Calculate the required address of CGRAM
	Local_u8Address = Copy_u8PatternNumber * 8;
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	8a 83       	std	Y+2, r24	; 0x02

//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	80 64       	ori	r24, 0x40	; 64
    2c40:	8a 83       	std	Y+2, r24	; 0x02
	lcd_vidSendCmd(Local_u8Address);
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    2c48:	19 82       	std	Y+1, r1	; 0x01
    2c4a:	0e c0       	rjmp	.+28     	; 0x2c68 <LCD_voidWriteSpecialCharacter+0x5e>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	fc 01       	movw	r30, r24
    2c58:	e2 0f       	add	r30, r18
    2c5a:	f3 1f       	adc	r31, r19
    2c5c:	80 81       	ld	r24, Z
    2c5e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <lcd_vidSendData>
//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
	lcd_vidSendCmd(Local_u8Address);

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	88 30       	cpi	r24, 0x08	; 8
    2c6c:	78 f3       	brcs	.-34     	; 0x2c4c <LCD_voidWriteSpecialCharacter+0x42>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
	}

//	4- Shift the address counter to the DDRAM
	LCD_voidGotoXY(Copy_XPos, Copy_YPos);
    2c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	0e 94 04 15 	call	0x2a08	; 0x2a08 <LCD_voidGotoXY>

//	5- Display the CGRAM pattern on the LCD
	lcd_vidSendData(Copy_u8PatternNumber);
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	0e 94 79 14 	call	0x28f2	; 0x28f2 <lcd_vidSendData>
}
    2c7c:	27 96       	adiw	r28, 0x07	; 7
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <led_init>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_init(void)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	dio_vidConfigChannel(LED_RED_PORT,LED_RED_CHANNEL,OUTPUT);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	67 e0       	ldi	r22, 0x07	; 7
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,OUTPUT);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	64 e0       	ldi	r22, 0x04	; 4
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	41 e0       	ldi	r20, 0x01	; 1
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,OUTPUT);
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	65 e0       	ldi	r22, 0x05	; 5
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,OUTPUT);
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	66 e0       	ldi	r22, 0x06	; 6
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>
}
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <led_on>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_on(led_id_t ledId)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <led_on+0x6>
    2ce2:	0f 92       	push	r0
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	3b 83       	std	Y+3, r19	; 0x03
    2cf2:	2a 83       	std	Y+2, r18	; 0x02
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	d9 f0       	breq	.+54     	; 0x2d34 <led_on+0x58>
    2cfe:	2a 81       	ldd	r18, Y+2	; 0x02
    2d00:	3b 81       	ldd	r19, Y+3	; 0x03
    2d02:	22 30       	cpi	r18, 0x02	; 2
    2d04:	31 05       	cpc	r19, r1
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <led_on+0x36>
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	61 f0       	breq	.+24     	; 0x2d28 <led_on+0x4c>
    2d10:	22 c0       	rjmp	.+68     	; 0x2d56 <led_on+0x7a>
    2d12:	2a 81       	ldd	r18, Y+2	; 0x02
    2d14:	3b 81       	ldd	r19, Y+3	; 0x03
    2d16:	22 30       	cpi	r18, 0x02	; 2
    2d18:	31 05       	cpc	r19, r1
    2d1a:	91 f0       	breq	.+36     	; 0x2d40 <led_on+0x64>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	83 30       	cpi	r24, 0x03	; 3
    2d22:	91 05       	cpc	r25, r1
    2d24:	99 f0       	breq	.+38     	; 0x2d4c <led_on+0x70>
    2d26:	17 c0       	rjmp	.+46     	; 0x2d56 <led_on+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	67 e0       	ldi	r22, 0x07	; 7
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2d32:	11 c0       	rjmp	.+34     	; 0x2d56 <led_on+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2d3e:	0b c0       	rjmp	.+22     	; 0x2d56 <led_on+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	65 e0       	ldi	r22, 0x05	; 5
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <led_on+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	66 e0       	ldi	r22, 0x06	; 6
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
		#endif
		break;
	}
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <led_off>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_off(led_id_t ledId)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <led_off+0x6>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	3b 83       	std	Y+3, r19	; 0x03
    2d78:	2a 83       	std	Y+2, r18	; 0x02
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	91 05       	cpc	r25, r1
    2d82:	d9 f0       	breq	.+54     	; 0x2dba <led_off+0x58>
    2d84:	2a 81       	ldd	r18, Y+2	; 0x02
    2d86:	3b 81       	ldd	r19, Y+3	; 0x03
    2d88:	22 30       	cpi	r18, 0x02	; 2
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <led_off+0x36>
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	9b 81       	ldd	r25, Y+3	; 0x03
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	61 f0       	breq	.+24     	; 0x2dae <led_off+0x4c>
    2d96:	22 c0       	rjmp	.+68     	; 0x2ddc <led_off+0x7a>
    2d98:	2a 81       	ldd	r18, Y+2	; 0x02
    2d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	31 05       	cpc	r19, r1
    2da0:	91 f0       	breq	.+36     	; 0x2dc6 <led_off+0x64>
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	9b 81       	ldd	r25, Y+3	; 0x03
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	91 05       	cpc	r25, r1
    2daa:	99 f0       	breq	.+38     	; 0x2dd2 <led_off+0x70>
    2dac:	17 c0       	rjmp	.+46     	; 0x2ddc <led_off+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	67 e0       	ldi	r22, 0x07	; 7
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2db8:	11 c0       	rjmp	.+34     	; 0x2ddc <led_off+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	64 e0       	ldi	r22, 0x04	; 4
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <led_off+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	65 e0       	ldi	r22, 0x05	; 5
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
    2dd0:	05 c0       	rjmp	.+10     	; 0x2ddc <led_off+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	66 e0       	ldi	r22, 0x06	; 6
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
		#endif
		break;
	}
}
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <led_toggle>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <led_toggle+0x6>
    2dee:	0f 92       	push	r0
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	3b 83       	std	Y+3, r19	; 0x03
    2dfe:	2a 83       	std	Y+2, r18	; 0x02
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	91 05       	cpc	r25, r1
    2e08:	d1 f0       	breq	.+52     	; 0x2e3e <led_toggle+0x56>
    2e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e0e:	22 30       	cpi	r18, 0x02	; 2
    2e10:	31 05       	cpc	r19, r1
    2e12:	2c f4       	brge	.+10     	; 0x2e1e <led_toggle+0x36>
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	9b 81       	ldd	r25, Y+3	; 0x03
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	61 f0       	breq	.+24     	; 0x2e34 <led_toggle+0x4c>
    2e1c:	1e c0       	rjmp	.+60     	; 0x2e5a <led_toggle+0x72>
    2e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e20:	3b 81       	ldd	r19, Y+3	; 0x03
    2e22:	22 30       	cpi	r18, 0x02	; 2
    2e24:	31 05       	cpc	r19, r1
    2e26:	81 f0       	breq	.+32     	; 0x2e48 <led_toggle+0x60>
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	83 30       	cpi	r24, 0x03	; 3
    2e2e:	91 05       	cpc	r25, r1
    2e30:	81 f0       	breq	.+32     	; 0x2e52 <led_toggle+0x6a>
    2e32:	13 c0       	rjmp	.+38     	; 0x2e5a <led_toggle+0x72>
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	67 e0       	ldi	r22, 0x07	; 7
    2e38:	0e 94 97 0c 	call	0x192e	; 0x192e <dio_vidFlipChannel>
    2e3c:	0e c0       	rjmp	.+28     	; 0x2e5a <led_toggle+0x72>
		break;
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	64 e0       	ldi	r22, 0x04	; 4
    2e42:	0e 94 97 0c 	call	0x192e	; 0x192e <dio_vidFlipChannel>
    2e46:	09 c0       	rjmp	.+18     	; 0x2e5a <led_toggle+0x72>
		break;
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	65 e0       	ldi	r22, 0x05	; 5
    2e4c:	0e 94 97 0c 	call	0x192e	; 0x192e <dio_vidFlipChannel>
    2e50:	04 c0       	rjmp	.+8      	; 0x2e5a <led_toggle+0x72>

		break;
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	66 e0       	ldi	r22, 0x06	; 6
    2e56:	0e 94 97 0c 	call	0x192e	; 0x192e <dio_vidFlipChannel>
		break;
	}
}
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <main>:
void display_AutoTrigger();

u16 dispaly_num;

void main(void)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <main+0x6>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
	led_init();
    2e70:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <led_init>
	button_vidInit();
    2e74:	0e 94 1f 0a 	call	0x143e	; 0x143e <button_vidInit>
	lcd_vidInit();
    2e78:	0e 94 1e 12 	call	0x243c	; 0x243c <lcd_vidInit>
	keypad_vidInit();
    2e7c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <keypad_vidInit>
//	lcd_vidDisplyChar('m');
//	lcd_vidDisplyStr("omar");
	u16 local_u8DigitalReading;

	dio_vidConfigChannel(DIO_PORTA, DIO_PIN0, INPUT);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	0e 94 81 0a 	call	0x1502	; 0x1502 <dio_vidConfigChannel>

//	EXT1_voidInit();
//	EXT1_voidEnable();
//	lcd_vidDisplyNum(500);

	lcd_vidDisplyChar('o');
    2e90:	8f e6       	ldi	r24, 0x6F	; 111
    2e92:	0e 94 24 15 	call	0x2a48	; 0x2a48 <lcd_vidDisplyChar>
    2e96:	ff cf       	rjmp	.-2      	; 0x2e96 <main+0x30>

00002e98 <display_ISR>:

	}
}

void display_ISR(void)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
	lcd_vidSendCmd(_LCD_CLEAR);
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	dispaly_num = ADCH;
    2eb2:	e5 e2       	ldi	r30, 0x25	; 37
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 2f       	mov	r24, r24
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	90 93 20 01 	sts	0x0120, r25
    2ec0:	80 93 1f 01 	sts	0x011F, r24
	lcd_vidDisplyNum(dispaly_num);
    2ec4:	80 91 1f 01 	lds	r24, 0x011F
    2ec8:	90 91 20 01 	lds	r25, 0x0120
    2ecc:	cc 01       	movw	r24, r24
    2ece:	a0 e0       	ldi	r26, 0x00	; 0
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_vidDisplyNum>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	aa ef       	ldi	r26, 0xFA	; 250
    2ee0:	b3 e4       	ldi	r27, 0x43	; 67
    2ee2:	8b 87       	std	Y+11, r24	; 0x0b
    2ee4:	9c 87       	std	Y+12, r25	; 0x0c
    2ee6:	ad 87       	std	Y+13, r26	; 0x0d
    2ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a e7       	ldi	r20, 0x7A	; 122
    2ef8:	55 e4       	ldi	r21, 0x45	; 69
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8f 83       	std	Y+7, r24	; 0x07
    2f04:	98 87       	std	Y+8, r25	; 0x08
    2f06:	a9 87       	std	Y+9, r26	; 0x09
    2f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <display_ISR+0x94>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <display_ISR+0x112>
	else if (__tmp > 65535)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <display_ISR+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <display_ISR+0xf4>
    2f6e:	80 e9       	ldi	r24, 0x90	; 144
    2f70:	91 e0       	ldi	r25, 0x01	; 1
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <display_ISR+0xe2>
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <display_ISR+0xd6>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <display_ISR+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <display_ISR+0x11e>
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
//	ADC_voidStartConversion();
}
    2fbe:	2e 96       	adiw	r28, 0x0e	; 14
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <display_AutoTrigger>:

void display_AutoTrigger()
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
//	dispaly_num = ADC_u16ReadADC(0u);
//	lcd_vidDisplyNum(dispaly_num);
//	_delay_ms(500);
//	lcd_vidSendCmd(_LCD_CLEAR);
}
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <local_vidtogglePin_1>:

void local_vidtogglePin_1(led_id_t led)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	2f 97       	sbiw	r28, 0x0f	; 15
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	8f 87       	std	Y+15, r24	; 0x0f
	led_toggle(led);
    2ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <led_toggle>
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	aa ef       	ldi	r26, 0xFA	; 250
    3000:	b3 e4       	ldi	r27, 0x43	; 67
    3002:	8b 87       	std	Y+11, r24	; 0x0b
    3004:	9c 87       	std	Y+12, r25	; 0x0c
    3006:	ad 87       	std	Y+13, r26	; 0x0d
    3008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300a:	6b 85       	ldd	r22, Y+11	; 0x0b
    300c:	7c 85       	ldd	r23, Y+12	; 0x0c
    300e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3010:	9e 85       	ldd	r25, Y+14	; 0x0e
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	55 e4       	ldi	r21, 0x45	; 69
    301a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8f 83       	std	Y+7, r24	; 0x07
    3024:	98 87       	std	Y+8, r25	; 0x08
    3026:	a9 87       	std	Y+9, r26	; 0x09
    3028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302a:	6f 81       	ldd	r22, Y+7	; 0x07
    302c:	78 85       	ldd	r23, Y+8	; 0x08
    302e:	89 85       	ldd	r24, Y+9	; 0x09
    3030:	9a 85       	ldd	r25, Y+10	; 0x0a
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	2c f4       	brge	.+10     	; 0x304c <local_vidtogglePin_1+0x6e>
		__ticks = 1;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
    304a:	3f c0       	rjmp	.+126    	; 0x30ca <local_vidtogglePin_1+0xec>
	else if (__tmp > 65535)
    304c:	6f 81       	ldd	r22, Y+7	; 0x07
    304e:	78 85       	ldd	r23, Y+8	; 0x08
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	57 e4       	ldi	r21, 0x47	; 71
    305c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	4c f5       	brge	.+82     	; 0x30b6 <local_vidtogglePin_1+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	6b 85       	ldd	r22, Y+11	; 0x0b
    3066:	7c 85       	ldd	r23, Y+12	; 0x0c
    3068:	8d 85       	ldd	r24, Y+13	; 0x0d
    306a:	9e 85       	ldd	r25, Y+14	; 0x0e
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e2       	ldi	r20, 0x20	; 32
    3072:	51 e4       	ldi	r21, 0x41	; 65
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9e 83       	std	Y+6, r25	; 0x06
    308a:	8d 83       	std	Y+5, r24	; 0x05
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <local_vidtogglePin_1+0xce>
    308e:	80 e9       	ldi	r24, 0x90	; 144
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	9c 83       	std	Y+4, r25	; 0x04
    3094:	8b 83       	std	Y+3, r24	; 0x03
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <local_vidtogglePin_1+0xbc>
    309e:	9c 83       	std	Y+4, r25	; 0x04
    30a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	9e 81       	ldd	r25, Y+6	; 0x06
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	69 f7       	brne	.-38     	; 0x308e <local_vidtogglePin_1+0xb0>
    30b4:	14 c0       	rjmp	.+40     	; 0x30de <local_vidtogglePin_1+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	6f 81       	ldd	r22, Y+7	; 0x07
    30b8:	78 85       	ldd	r23, Y+8	; 0x08
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	9a 83       	std	Y+2, r25	; 0x02
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <local_vidtogglePin_1+0xf8>
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
//	led_off(led);
//	_delay_ms(500);
}
    30de:	2f 96       	adiw	r28, 0x0f	; 15
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <local_vidToggleThreeLed_2>:

void local_vidToggleThreeLed_2()
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	aa 97       	sbiw	r28, 0x2a	; 42
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
	led_toggle(LED_RED);
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <led_toggle>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	aa ef       	ldi	r26, 0xFA	; 250
    3110:	b3 e4       	ldi	r27, 0x43	; 67
    3112:	8f a3       	std	Y+39, r24	; 0x27
    3114:	98 a7       	std	Y+40, r25	; 0x28
    3116:	a9 a7       	std	Y+41, r26	; 0x29
    3118:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	6f a1       	ldd	r22, Y+39	; 0x27
    311c:	78 a5       	ldd	r23, Y+40	; 0x28
    311e:	89 a5       	ldd	r24, Y+41	; 0x29
    3120:	9a a5       	ldd	r25, Y+42	; 0x2a
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	4a e7       	ldi	r20, 0x7A	; 122
    3128:	55 e4       	ldi	r21, 0x45	; 69
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	8b a3       	std	Y+35, r24	; 0x23
    3134:	9c a3       	std	Y+36, r25	; 0x24
    3136:	ad a3       	std	Y+37, r26	; 0x25
    3138:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    313a:	6b a1       	ldd	r22, Y+35	; 0x23
    313c:	7c a1       	ldd	r23, Y+36	; 0x24
    313e:	8d a1       	ldd	r24, Y+37	; 0x25
    3140:	9e a1       	ldd	r25, Y+38	; 0x26
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314e:	88 23       	and	r24, r24
    3150:	2c f4       	brge	.+10     	; 0x315c <local_vidToggleThreeLed_2+0x6c>
		__ticks = 1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9a a3       	std	Y+34, r25	; 0x22
    3158:	89 a3       	std	Y+33, r24	; 0x21
    315a:	3f c0       	rjmp	.+126    	; 0x31da <local_vidToggleThreeLed_2+0xea>
	else if (__tmp > 65535)
    315c:	6b a1       	ldd	r22, Y+35	; 0x23
    315e:	7c a1       	ldd	r23, Y+36	; 0x24
    3160:	8d a1       	ldd	r24, Y+37	; 0x25
    3162:	9e a1       	ldd	r25, Y+38	; 0x26
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	3f ef       	ldi	r19, 0xFF	; 255
    3168:	4f e7       	ldi	r20, 0x7F	; 127
    316a:	57 e4       	ldi	r21, 0x47	; 71
    316c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3170:	18 16       	cp	r1, r24
    3172:	4c f5       	brge	.+82     	; 0x31c6 <local_vidToggleThreeLed_2+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3174:	6f a1       	ldd	r22, Y+39	; 0x27
    3176:	78 a5       	ldd	r23, Y+40	; 0x28
    3178:	89 a5       	ldd	r24, Y+41	; 0x29
    317a:	9a a5       	ldd	r25, Y+42	; 0x2a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e2       	ldi	r20, 0x20	; 32
    3182:	51 e4       	ldi	r21, 0x41	; 65
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9a a3       	std	Y+34, r25	; 0x22
    319a:	89 a3       	std	Y+33, r24	; 0x21
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <local_vidToggleThreeLed_2+0xcc>
    319e:	80 e9       	ldi	r24, 0x90	; 144
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	98 a3       	std	Y+32, r25	; 0x20
    31a4:	8f 8f       	std	Y+31, r24	; 0x1f
    31a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31a8:	98 a1       	ldd	r25, Y+32	; 0x20
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <local_vidToggleThreeLed_2+0xba>
    31ae:	98 a3       	std	Y+32, r25	; 0x20
    31b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	89 a1       	ldd	r24, Y+33	; 0x21
    31b4:	9a a1       	ldd	r25, Y+34	; 0x22
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	9a a3       	std	Y+34, r25	; 0x22
    31ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31bc:	89 a1       	ldd	r24, Y+33	; 0x21
    31be:	9a a1       	ldd	r25, Y+34	; 0x22
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	69 f7       	brne	.-38     	; 0x319e <local_vidToggleThreeLed_2+0xae>
    31c4:	14 c0       	rjmp	.+40     	; 0x31ee <local_vidToggleThreeLed_2+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c6:	6b a1       	ldd	r22, Y+35	; 0x23
    31c8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ca:	8d a1       	ldd	r24, Y+37	; 0x25
    31cc:	9e a1       	ldd	r25, Y+38	; 0x26
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9a a3       	std	Y+34, r25	; 0x22
    31d8:	89 a3       	std	Y+33, r24	; 0x21
    31da:	89 a1       	ldd	r24, Y+33	; 0x21
    31dc:	9a a1       	ldd	r25, Y+34	; 0x22
    31de:	9e 8f       	std	Y+30, r25	; 0x1e
    31e0:	8d 8f       	std	Y+29, r24	; 0x1d
    31e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <local_vidToggleThreeLed_2+0xf6>
    31ea:	9e 8f       	std	Y+30, r25	; 0x1e
    31ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	led_toggle(LED_GREEN);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <led_toggle>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	aa ef       	ldi	r26, 0xFA	; 250
    31fa:	b3 e4       	ldi	r27, 0x43	; 67
    31fc:	89 8f       	std	Y+25, r24	; 0x19
    31fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3200:	ab 8f       	std	Y+27, r26	; 0x1b
    3202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a e7       	ldi	r20, 0x7A	; 122
    3212:	55 e4       	ldi	r21, 0x45	; 69
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8d 8b       	std	Y+21, r24	; 0x15
    321e:	9e 8b       	std	Y+22, r25	; 0x16
    3220:	af 8b       	std	Y+23, r26	; 0x17
    3222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <local_vidToggleThreeLed_2+0x156>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <local_vidToggleThreeLed_2+0x1d4>
	else if (__tmp > 65535)
    3246:	6d 89       	ldd	r22, Y+21	; 0x15
    3248:	7e 89       	ldd	r23, Y+22	; 0x16
    324a:	8f 89       	ldd	r24, Y+23	; 0x17
    324c:	98 8d       	ldd	r25, Y+24	; 0x18
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <local_vidToggleThreeLed_2+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	69 8d       	ldd	r22, Y+25	; 0x19
    3260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <local_vidToggleThreeLed_2+0x1b6>
    3288:	80 e9       	ldi	r24, 0x90	; 144
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	9a 8b       	std	Y+18, r25	; 0x12
    328e:	89 8b       	std	Y+17, r24	; 0x11
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	9a 89       	ldd	r25, Y+18	; 0x12
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <local_vidToggleThreeLed_2+0x1a4>
    3298:	9a 8b       	std	Y+18, r25	; 0x12
    329a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9c 8b       	std	Y+20, r25	; 0x14
    32a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8b 89       	ldd	r24, Y+19	; 0x13
    32a8:	9c 89       	ldd	r25, Y+20	; 0x14
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <local_vidToggleThreeLed_2+0x198>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <local_vidToggleThreeLed_2+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6d 89       	ldd	r22, Y+21	; 0x15
    32b2:	7e 89       	ldd	r23, Y+22	; 0x16
    32b4:	8f 89       	ldd	r24, Y+23	; 0x17
    32b6:	98 8d       	ldd	r25, Y+24	; 0x18
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9c 8b       	std	Y+20, r25	; 0x14
    32c2:	8b 8b       	std	Y+19, r24	; 0x13
    32c4:	8b 89       	ldd	r24, Y+19	; 0x13
    32c6:	9c 89       	ldd	r25, Y+20	; 0x14
    32c8:	98 8b       	std	Y+16, r25	; 0x10
    32ca:	8f 87       	std	Y+15, r24	; 0x0f
    32cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ce:	98 89       	ldd	r25, Y+16	; 0x10
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <local_vidToggleThreeLed_2+0x1e0>
    32d4:	98 8b       	std	Y+16, r25	; 0x10
    32d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	led_toggle(LED_BLUE);
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <led_toggle>
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	aa ef       	ldi	r26, 0xFA	; 250
    32e4:	b3 e4       	ldi	r27, 0x43	; 67
    32e6:	8b 87       	std	Y+11, r24	; 0x0b
    32e8:	9c 87       	std	Y+12, r25	; 0x0c
    32ea:	ad 87       	std	Y+13, r26	; 0x0d
    32ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	4a e7       	ldi	r20, 0x7A	; 122
    32fc:	55 e4       	ldi	r21, 0x45	; 69
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	8f 83       	std	Y+7, r24	; 0x07
    3308:	98 87       	std	Y+8, r25	; 0x08
    330a:	a9 87       	std	Y+9, r26	; 0x09
    330c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    330e:	6f 81       	ldd	r22, Y+7	; 0x07
    3310:	78 85       	ldd	r23, Y+8	; 0x08
    3312:	89 85       	ldd	r24, Y+9	; 0x09
    3314:	9a 85       	ldd	r25, Y+10	; 0x0a
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e8       	ldi	r20, 0x80	; 128
    331c:	5f e3       	ldi	r21, 0x3F	; 63
    331e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3322:	88 23       	and	r24, r24
    3324:	2c f4       	brge	.+10     	; 0x3330 <local_vidToggleThreeLed_2+0x240>
		__ticks = 1;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	3f c0       	rjmp	.+126    	; 0x33ae <local_vidToggleThreeLed_2+0x2be>
	else if (__tmp > 65535)
    3330:	6f 81       	ldd	r22, Y+7	; 0x07
    3332:	78 85       	ldd	r23, Y+8	; 0x08
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	4f e7       	ldi	r20, 0x7F	; 127
    333e:	57 e4       	ldi	r21, 0x47	; 71
    3340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3344:	18 16       	cp	r1, r24
    3346:	4c f5       	brge	.+82     	; 0x339a <local_vidToggleThreeLed_2+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3348:	6b 85       	ldd	r22, Y+11	; 0x0b
    334a:	7c 85       	ldd	r23, Y+12	; 0x0c
    334c:	8d 85       	ldd	r24, Y+13	; 0x0d
    334e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e2       	ldi	r20, 0x20	; 32
    3356:	51 e4       	ldi	r21, 0x41	; 65
    3358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <local_vidToggleThreeLed_2+0x2a0>
    3372:	80 e9       	ldi	r24, 0x90	; 144
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <local_vidToggleThreeLed_2+0x28e>
    3382:	9c 83       	std	Y+4, r25	; 0x04
    3384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	69 f7       	brne	.-38     	; 0x3372 <local_vidToggleThreeLed_2+0x282>
    3398:	14 c0       	rjmp	.+40     	; 0x33c2 <local_vidToggleThreeLed_2+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339a:	6f 81       	ldd	r22, Y+7	; 0x07
    339c:	78 85       	ldd	r23, Y+8	; 0x08
    339e:	89 85       	ldd	r24, Y+9	; 0x09
    33a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
    33ae:	8d 81       	ldd	r24, Y+5	; 0x05
    33b0:	9e 81       	ldd	r25, Y+6	; 0x06
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <local_vidToggleThreeLed_2+0x2ca>
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    33c2:	aa 96       	adiw	r28, 0x2a	; 42
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <local_vidControlLed_4>:

void local_vidControlLed_4()
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	dio_vidWriteChannel(BUTTON0_PORT, BUTTON0_PIN, STD_HIGH);
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	67 e0       	ldi	r22, 0x07	; 7
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <dio_vidWriteChannel>
	while(1)
	{
		if(Button_GetStatus(BUTTON0))
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	0e 94 3e 0a 	call	0x147c	; 0x147c <Button_GetStatus>
    33ec:	88 23       	and	r24, r24
    33ee:	21 f0       	breq	.+8      	; 0x33f8 <local_vidControlLed_4+0x24>
		{
			led_on(LED_RED);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <led_on>
    33f6:	f7 cf       	rjmp	.-18     	; 0x33e6 <local_vidControlLed_4+0x12>
		}
		else
		{
			led_off(LED_RED);
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <led_off>
    33fe:	f3 cf       	rjmp	.-26     	; 0x33e6 <local_vidControlLed_4+0x12>

00003400 <local_checkPass_1_1>:
		}
	}
}

void local_checkPass_1_1()
{
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	6f 97       	sbiw	r28, 0x1f	; 31
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
//	u8 entered_pass[7] = {0};
	boolean local_error_state = FALSE;
    3414:	1f 8e       	std	Y+31, r1	; 0x1f

	lcd_vidDisplyStr("Enter Password:");
    3416:	80 e6       	ldi	r24, 0x60	; 96
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <lcd_vidDisplyStr>
	LCD_voidGotoXY(LCD_u8_SECOND_LINE, LCD_u8_FIRST_COLUMN);
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	0e 94 04 15 	call	0x2a08	; 0x2a08 <LCD_voidGotoXY>

	u8 local_pressed_key;

	for(u8 iterator = 0; iterator < 6; iterator++)
    3426:	1d 8e       	std	Y+29, r1	; 0x1d
    3428:	13 c0       	rjmp	.+38     	; 0x3450 <local_checkPass_1_1+0x50>
	{
		do
		{
			local_pressed_key = keypad_u8GetPressedKey();
    342a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <keypad_u8GetPressedKey>
    342e:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(local_pressed_key == NO_KEY_PRESSED_VALUE);
    3430:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3432:	8f 3f       	cpi	r24, 0xFF	; 255
    3434:	d1 f3       	breq	.-12     	; 0x342a <local_checkPass_1_1+0x2a>

		if(NO_KEY_PRESSED_VALUE != local_pressed_key)
    3436:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3438:	8f 3f       	cpi	r24, 0xFF	; 255
    343a:	39 f0       	breq	.+14     	; 0x344a <local_checkPass_1_1+0x4a>
		{
			local_error_state = local_checkPass_input(local_pressed_key);
    343c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    343e:	0e 94 35 1b 	call	0x366a	; 0x366a <local_checkPass_input>
    3442:	8f 8f       	std	Y+31, r24	; 0x1f
			lcd_vidDisplyChar(local_pressed_key);
    3444:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3446:	0e 94 24 15 	call	0x2a48	; 0x2a48 <lcd_vidDisplyChar>
	lcd_vidDisplyStr("Enter Password:");
	LCD_voidGotoXY(LCD_u8_SECOND_LINE, LCD_u8_FIRST_COLUMN);

	u8 local_pressed_key;

	for(u8 iterator = 0; iterator < 6; iterator++)
    344a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    344c:	8f 5f       	subi	r24, 0xFF	; 255
    344e:	8d 8f       	std	Y+29, r24	; 0x1d
    3450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3452:	86 30       	cpi	r24, 0x06	; 6
    3454:	50 f3       	brcs	.-44     	; 0x342a <local_checkPass_1_1+0x2a>
			lcd_vidDisplyChar(local_pressed_key);
		}

	}

	if(local_error_state)
    3456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3458:	88 23       	and	r24, r24
    345a:	09 f4       	brne	.+2      	; 0x345e <local_checkPass_1_1+0x5e>
    345c:	7f c0       	rjmp	.+254    	; 0x355c <local_checkPass_1_1+0x15c>
	{
		lcd_vidSendCmd(_LCD_CLEAR);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
		lcd_vidDisplyStr("Correct Pass");
    3464:	80 e7       	ldi	r24, 0x70	; 112
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 31 15 	call	0x2a62	; 0x2a62 <lcd_vidDisplyStr>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e4       	ldi	r25, 0x40	; 64
    3470:	ac e1       	ldi	r26, 0x1C	; 28
    3472:	b5 e4       	ldi	r27, 0x45	; 69
    3474:	89 8f       	std	Y+25, r24	; 0x19
    3476:	9a 8f       	std	Y+26, r25	; 0x1a
    3478:	ab 8f       	std	Y+27, r26	; 0x1b
    347a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	69 8d       	ldd	r22, Y+25	; 0x19
    347e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a e7       	ldi	r20, 0x7A	; 122
    348a:	55 e4       	ldi	r21, 0x45	; 69
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8d 8b       	std	Y+21, r24	; 0x15
    3496:	9e 8b       	std	Y+22, r25	; 0x16
    3498:	af 8b       	std	Y+23, r26	; 0x17
    349a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    349c:	6d 89       	ldd	r22, Y+21	; 0x15
    349e:	7e 89       	ldd	r23, Y+22	; 0x16
    34a0:	8f 89       	ldd	r24, Y+23	; 0x17
    34a2:	98 8d       	ldd	r25, Y+24	; 0x18
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <local_checkPass_1_1+0xbe>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9c 8b       	std	Y+20, r25	; 0x14
    34ba:	8b 8b       	std	Y+19, r24	; 0x13
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <local_checkPass_1_1+0x13c>
	else if (__tmp > 65535)
    34be:	6d 89       	ldd	r22, Y+21	; 0x15
    34c0:	7e 89       	ldd	r23, Y+22	; 0x16
    34c2:	8f 89       	ldd	r24, Y+23	; 0x17
    34c4:	98 8d       	ldd	r25, Y+24	; 0x18
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <local_checkPass_1_1+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	69 8d       	ldd	r22, Y+25	; 0x19
    34d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9c 8b       	std	Y+20, r25	; 0x14
    34fc:	8b 8b       	std	Y+19, r24	; 0x13
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <local_checkPass_1_1+0x11e>
    3500:	80 e9       	ldi	r24, 0x90	; 144
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	9a 8b       	std	Y+18, r25	; 0x12
    3506:	89 8b       	std	Y+17, r24	; 0x11
    3508:	89 89       	ldd	r24, Y+17	; 0x11
    350a:	9a 89       	ldd	r25, Y+18	; 0x12
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <local_checkPass_1_1+0x10c>
    3510:	9a 8b       	std	Y+18, r25	; 0x12
    3512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8b 89       	ldd	r24, Y+19	; 0x13
    3516:	9c 89       	ldd	r25, Y+20	; 0x14
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9c 8b       	std	Y+20, r25	; 0x14
    351c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	9c 89       	ldd	r25, Y+20	; 0x14
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <local_checkPass_1_1+0x100>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <local_checkPass_1_1+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6d 89       	ldd	r22, Y+21	; 0x15
    352a:	7e 89       	ldd	r23, Y+22	; 0x16
    352c:	8f 89       	ldd	r24, Y+23	; 0x17
    352e:	98 8d       	ldd	r25, Y+24	; 0x18
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9c 8b       	std	Y+20, r25	; 0x14
    353a:	8b 8b       	std	Y+19, r24	; 0x13
    353c:	8b 89       	ldd	r24, Y+19	; 0x13
    353e:	9c 89       	ldd	r25, Y+20	; 0x14
    3540:	98 8b       	std	Y+16, r25	; 0x10
    3542:	8f 87       	std	Y+15, r24	; 0x0f
    3544:	8f 85       	ldd	r24, Y+15	; 0x0f
    3546:	98 89       	ldd	r25, Y+16	; 0x10
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <local_checkPass_1_1+0x148>
    354c:	98 8b       	std	Y+16, r25	; 0x10
    354e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(2500);

		lcd_vidSendCmd(_LCD_CLEAR);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
		local_vidResetPass();
    3556:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <local_vidResetPass>
    355a:	07 c0       	rjmp	.+14     	; 0x356a <local_checkPass_1_1+0x16a>
	}
	else
	{
		lcd_vidSendCmd(_LCD_CLEAR);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
		lcd_vidDisplyStr("Incorrect Pass");
    3562:	8d e7       	ldi	r24, 0x7D	; 125
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 31 15 	call	0x2a62	; 0x2a62 <lcd_vidDisplyStr>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e4       	ldi	r25, 0x40	; 64
    356e:	ac e9       	ldi	r26, 0x9C	; 156
    3570:	b5 e4       	ldi	r27, 0x45	; 69
    3572:	8b 87       	std	Y+11, r24	; 0x0b
    3574:	9c 87       	std	Y+12, r25	; 0x0c
    3576:	ad 87       	std	Y+13, r26	; 0x0d
    3578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357a:	6b 85       	ldd	r22, Y+11	; 0x0b
    357c:	7c 85       	ldd	r23, Y+12	; 0x0c
    357e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3580:	9e 85       	ldd	r25, Y+14	; 0x0e
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	4a e7       	ldi	r20, 0x7A	; 122
    3588:	55 e4       	ldi	r21, 0x45	; 69
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	8f 83       	std	Y+7, r24	; 0x07
    3594:	98 87       	std	Y+8, r25	; 0x08
    3596:	a9 87       	std	Y+9, r26	; 0x09
    3598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    359a:	6f 81       	ldd	r22, Y+7	; 0x07
    359c:	78 85       	ldd	r23, Y+8	; 0x08
    359e:	89 85       	ldd	r24, Y+9	; 0x09
    35a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ae:	88 23       	and	r24, r24
    35b0:	2c f4       	brge	.+10     	; 0x35bc <local_checkPass_1_1+0x1bc>
		__ticks = 1;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	9e 83       	std	Y+6, r25	; 0x06
    35b8:	8d 83       	std	Y+5, r24	; 0x05
    35ba:	3f c0       	rjmp	.+126    	; 0x363a <local_checkPass_1_1+0x23a>
	else if (__tmp > 65535)
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	3f ef       	ldi	r19, 0xFF	; 255
    35c8:	4f e7       	ldi	r20, 0x7F	; 127
    35ca:	57 e4       	ldi	r21, 0x47	; 71
    35cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d0:	18 16       	cp	r1, r24
    35d2:	4c f5       	brge	.+82     	; 0x3626 <local_checkPass_1_1+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35da:	9e 85       	ldd	r25, Y+14	; 0x0e
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e2       	ldi	r20, 0x20	; 32
    35e2:	51 e4       	ldi	r21, 0x41	; 65
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	0f c0       	rjmp	.+30     	; 0x361c <local_checkPass_1_1+0x21c>
    35fe:	80 e9       	ldi	r24, 0x90	; 144
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	9c 83       	std	Y+4, r25	; 0x04
    3604:	8b 83       	std	Y+3, r24	; 0x03
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	9c 81       	ldd	r25, Y+4	; 0x04
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <local_checkPass_1_1+0x20a>
    360e:	9c 83       	std	Y+4, r25	; 0x04
    3610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	9e 81       	ldd	r25, Y+6	; 0x06
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	9e 83       	std	Y+6, r25	; 0x06
    361a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	69 f7       	brne	.-38     	; 0x35fe <local_checkPass_1_1+0x1fe>
    3624:	14 c0       	rjmp	.+40     	; 0x364e <local_checkPass_1_1+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3626:	6f 81       	ldd	r22, Y+7	; 0x07
    3628:	78 85       	ldd	r23, Y+8	; 0x08
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	9a 81       	ldd	r25, Y+2	; 0x02
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <local_checkPass_1_1+0x246>
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(5000);
	lcd_vidSendCmd(_LCD_CLEAR);
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	index_counter = 0;
    3654:	10 92 18 01 	sts	0x0118, r1
}
    3658:	6f 96       	adiw	r28, 0x1f	; 31
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <local_checkPass_input>:

boolean local_checkPass_input(u8 letter)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	00 d0       	rcall	.+0      	; 0x3670 <local_checkPass_input+0x6>
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	89 83       	std	Y+1, r24	; 0x01

	if(password[index_counter] == letter)
    3676:	80 91 18 01 	lds	r24, 0x0118
    367a:	88 2f       	mov	r24, r24
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	ef 5f       	subi	r30, 0xFF	; 255
    3682:	fe 4f       	sbci	r31, 0xFE	; 254
    3684:	90 81       	ld	r25, Z
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	98 17       	cp	r25, r24
    368a:	41 f4       	brne	.+16     	; 0x369c <local_checkPass_input+0x32>
	{
		index_counter++;
    368c:	80 91 18 01 	lds	r24, 0x0118
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	80 93 18 01 	sts	0x0118, r24
		return TRUE;
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	8a 83       	std	Y+2, r24	; 0x02
    369a:	06 c0       	rjmp	.+12     	; 0x36a8 <local_checkPass_input+0x3e>
	}
	else
	{
		index_counter++;
    369c:	80 91 18 01 	lds	r24, 0x0118
    36a0:	8f 5f       	subi	r24, 0xFF	; 255
    36a2:	80 93 18 01 	sts	0x0118, r24
		return FALSE;
    36a6:	1a 82       	std	Y+2, r1	; 0x02
    36a8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <local_vidResetPass>:

void local_vidResetPass()
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <local_vidResetPass+0x6>
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
	lcd_vidDisplyStr("Enter New Pass:");
    36be:	8c e8       	ldi	r24, 0x8C	; 140
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <lcd_vidDisplyStr>
	LCD_voidGotoXY(LCD_u8_SECOND_LINE, LCD_u8_FIRST_COLUMN);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	0e 94 04 15 	call	0x2a08	; 0x2a08 <LCD_voidGotoXY>

	index_counter = 0;
    36ce:	10 92 18 01 	sts	0x0118, r1
	u8 local_pressed_key;

	for(u8 iterator = 0; iterator < 6; iterator++)
    36d2:	19 82       	std	Y+1, r1	; 0x01
    36d4:	1d c0       	rjmp	.+58     	; 0x3710 <local_vidResetPass+0x5c>
	{
		do
		{
			local_pressed_key = keypad_u8GetPressedKey();
    36d6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <keypad_u8GetPressedKey>
    36da:	8a 83       	std	Y+2, r24	; 0x02
		}while(local_pressed_key == NO_KEY_PRESSED_VALUE);
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	8f 3f       	cpi	r24, 0xFF	; 255
    36e0:	d1 f3       	breq	.-12     	; 0x36d6 <local_vidResetPass+0x22>

		if(NO_KEY_PRESSED_VALUE != local_pressed_key)
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	8f 3f       	cpi	r24, 0xFF	; 255
    36e6:	89 f0       	breq	.+34     	; 0x370a <local_vidResetPass+0x56>
		{
			lcd_vidDisplyChar(local_pressed_key);
    36e8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ea:	0e 94 24 15 	call	0x2a48	; 0x2a48 <lcd_vidDisplyChar>
			password[index_counter] = local_pressed_key;
    36ee:	80 91 18 01 	lds	r24, 0x0118
    36f2:	88 2f       	mov	r24, r24
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	fc 01       	movw	r30, r24
    36f8:	ef 5f       	subi	r30, 0xFF	; 255
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	80 83       	st	Z, r24
			index_counter++;
    3700:	80 91 18 01 	lds	r24, 0x0118
    3704:	8f 5f       	subi	r24, 0xFF	; 255
    3706:	80 93 18 01 	sts	0x0118, r24
	LCD_voidGotoXY(LCD_u8_SECOND_LINE, LCD_u8_FIRST_COLUMN);

	index_counter = 0;
	u8 local_pressed_key;

	for(u8 iterator = 0; iterator < 6; iterator++)
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	86 30       	cpi	r24, 0x06	; 6
    3714:	00 f3       	brcs	.-64     	; 0x36d6 <local_vidResetPass+0x22>
			index_counter++;
		}

	}

	lcd_vidSendCmd(_LCD_CLEAR);
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	0e 94 15 14 	call	0x282a	; 0x282a <lcd_vidSendCmd>
	lcd_vidDisplyStr("Pass Changed");
    371c:	8c e9       	ldi	r24, 0x9C	; 156
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 31 15 	call	0x2a62	; 0x2a62 <lcd_vidDisplyStr>
}
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	08 95       	ret

0000372e <__udivmodsi4>:
    372e:	a1 e2       	ldi	r26, 0x21	; 33
    3730:	1a 2e       	mov	r1, r26
    3732:	aa 1b       	sub	r26, r26
    3734:	bb 1b       	sub	r27, r27
    3736:	fd 01       	movw	r30, r26
    3738:	0d c0       	rjmp	.+26     	; 0x3754 <__udivmodsi4_ep>

0000373a <__udivmodsi4_loop>:
    373a:	aa 1f       	adc	r26, r26
    373c:	bb 1f       	adc	r27, r27
    373e:	ee 1f       	adc	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	a2 17       	cp	r26, r18
    3744:	b3 07       	cpc	r27, r19
    3746:	e4 07       	cpc	r30, r20
    3748:	f5 07       	cpc	r31, r21
    374a:	20 f0       	brcs	.+8      	; 0x3754 <__udivmodsi4_ep>
    374c:	a2 1b       	sub	r26, r18
    374e:	b3 0b       	sbc	r27, r19
    3750:	e4 0b       	sbc	r30, r20
    3752:	f5 0b       	sbc	r31, r21

00003754 <__udivmodsi4_ep>:
    3754:	66 1f       	adc	r22, r22
    3756:	77 1f       	adc	r23, r23
    3758:	88 1f       	adc	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	1a 94       	dec	r1
    375e:	69 f7       	brne	.-38     	; 0x373a <__udivmodsi4_loop>
    3760:	60 95       	com	r22
    3762:	70 95       	com	r23
    3764:	80 95       	com	r24
    3766:	90 95       	com	r25
    3768:	9b 01       	movw	r18, r22
    376a:	ac 01       	movw	r20, r24
    376c:	bd 01       	movw	r22, r26
    376e:	cf 01       	movw	r24, r30
    3770:	08 95       	ret

00003772 <__prologue_saves__>:
    3772:	2f 92       	push	r2
    3774:	3f 92       	push	r3
    3776:	4f 92       	push	r4
    3778:	5f 92       	push	r5
    377a:	6f 92       	push	r6
    377c:	7f 92       	push	r7
    377e:	8f 92       	push	r8
    3780:	9f 92       	push	r9
    3782:	af 92       	push	r10
    3784:	bf 92       	push	r11
    3786:	cf 92       	push	r12
    3788:	df 92       	push	r13
    378a:	ef 92       	push	r14
    378c:	ff 92       	push	r15
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    3792:	cf 93       	push	r28
    3794:	df 93       	push	r29
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	ca 1b       	sub	r28, r26
    379c:	db 0b       	sbc	r29, r27
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	09 94       	ijmp

000037aa <__epilogue_restores__>:
    37aa:	2a 88       	ldd	r2, Y+18	; 0x12
    37ac:	39 88       	ldd	r3, Y+17	; 0x11
    37ae:	48 88       	ldd	r4, Y+16	; 0x10
    37b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    37b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    37b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    37b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    37b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    37ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    37bc:	b9 84       	ldd	r11, Y+9	; 0x09
    37be:	c8 84       	ldd	r12, Y+8	; 0x08
    37c0:	df 80       	ldd	r13, Y+7	; 0x07
    37c2:	ee 80       	ldd	r14, Y+6	; 0x06
    37c4:	fd 80       	ldd	r15, Y+5	; 0x05
    37c6:	0c 81       	ldd	r16, Y+4	; 0x04
    37c8:	1b 81       	ldd	r17, Y+3	; 0x03
    37ca:	aa 81       	ldd	r26, Y+2	; 0x02
    37cc:	b9 81       	ldd	r27, Y+1	; 0x01
    37ce:	ce 0f       	add	r28, r30
    37d0:	d1 1d       	adc	r29, r1
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	ed 01       	movw	r28, r26
    37de:	08 95       	ret

000037e0 <_exit>:
    37e0:	f8 94       	cli

000037e2 <__stop_program>:
    37e2:	ff cf       	rjmp	.-2      	; 0x37e2 <__stop_program>
