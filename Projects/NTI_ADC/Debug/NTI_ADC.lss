
NTI_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00002f1a  00002fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000b2  008000b2  00003000  2**0
                  ALLOC
  3 .stab         00002a78  00000000  00000000  00003000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d3  00000000  00000000  00005a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000714b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000072ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000743a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000947f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b504  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b946  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_1>
       8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_2>
       c:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3d       	cpi	r26, 0xDD	; 221
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 15 	call	0x2adc	; 0x2adc <main>
      8a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void ADC_voidInit (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	#if VOLTAGE_REFERENCE == AREF
	CLEAR_BIT(ADMUX, REFS0);
	CLEAR_BIT(ADMUX, REFS1);

	#elif VOLTAGE_REFERENCE == AVCC
	SET_BIT(ADMUX, REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX, REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24

	#endif

	/* Adjustment option = LEFT_ADJUSTMENT */
	#if ADJUSTMENT == RIGHT_ADJUSTMENT
	CLEAR_BIT(ADMUX, ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	/* ADC_AUTO_TRIGGER_ENABLE option = DISABLED */
	#if ADC_AUTO_TRIGGER_ENABLE == ENABLED
	SET_BIT(ADCSRA, ADATE);
	
	#elif ADC_AUTO_TRIGGER_ENABLE == DISABLED
	CLEAR_BIT(ADCSRA, ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	#endif

	/* ADC_INTERRUPT_ENABLE option = DISABLED */
	#if ADC_INTERRUPT_ENABLE == ENABLED
	SET_BIT(ADCSRA, ADIE);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	8c 93       	st	X, r24

	#endif


	/* configure prescaler bits */
	ADCSRA &= PRESCALER_MASK;
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 7f       	andi	r24, 0xF8	; 248
     cf8:	8c 93       	st	X, r24
	ADCSRA |= DIVID_BY_128;
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 60       	ori	r24, 0x07	; 7
     d06:	8c 93       	st	X, r24

}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_voidEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidEnable()
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , ADEN );
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
	
}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <ADC_voidInterrputEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidInterrputEnable()
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62

	
	SET_BIT( ADCSRA , ADIE );
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8c 93       	st	X, r24
	
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <ADC_voidDisable>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidDisable()
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( ADCSRA , ADEN );
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	8c 93       	st	X, r24
	
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_voidStartConversion>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidStartConversion()
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , ADSC );
     d6a:	a6 e2       	ldi	r26, 0x26	; 38
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e6 e2       	ldi	r30, 0x26	; 38
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	8c 93       	st	X, r24
	
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <ADC_voidAutoTrigger>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidAutoTrigger()
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62

	
	/** Enable ADC Auto Trigger	 							   **/
	/** ADATE = 1 =====> 	SET_BIT( ADATE , 5 ); 			   **/

    SET_BIT( ADCSRA , 5 );
     d86:	a6 e2       	ldi	r26, 0x26	; 38
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e6 e2       	ldi	r30, 0x26	; 38
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 0 );
	CLEAR_BIT( SFIOR , 1 );
	CLEAR_BIT( SFIOR , 2 );
	
	#elif ADC_AUTO_TRIGGER_SOURCE == EXTERNAL_INTERRPUT_REQUEST_0
	CLEAR_BIT( SFIOR , 5 );
     d94:	a0 e5       	ldi	r26, 0x50	; 80
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 e5       	ldi	r30, 0x50	; 80
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 6 );
     da2:	a0 e5       	ldi	r26, 0x50	; 80
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e0 e5       	ldi	r30, 0x50	; 80
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 64       	ori	r24, 0x40	; 64
     dae:	8c 93       	st	X, r24
	CLEAR_BIT( SFIOR , 7 );
     db0:	a0 e5       	ldi	r26, 0x50	; 80
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e0 e5       	ldi	r30, 0x50	; 80
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 77       	andi	r24, 0x7F	; 127
     dbc:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 2 );	
	
	#endif
	/* End ( if ) condition for Macros */
	
}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <ADC_u16ReadADCInMV>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

u16 ADC_u16ReadADCInMV(u8 channel)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= CHANNEL_MASK;
     dd0:	a7 e2       	ldi	r26, 0x27	; 39
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e2       	ldi	r30, 0x27	; 39
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 7e       	andi	r24, 0xE0	; 224
     ddc:	8c 93       	st	X, r24
	ADMUX |= channel;
     dde:	a7 e2       	ldi	r26, 0x27	; 39
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e2       	ldi	r30, 0x27	; 39
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	90 81       	ld	r25, Z
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	89 2b       	or	r24, r25
     dec:	8c 93       	st	X, r24
	
	/* start conversion */
	ADC_voidStartConversion();
     dee:	0e 94 b1 06 	call	0xd62	; 0xd62 <ADC_voidStartConversion>

	/* wait until the conversion is clear */
	while(CHECK_BIT(ADCSRA, ADIF) == 0);
     df2:	e6 e2       	ldi	r30, 0x26	; 38
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	82 95       	swap	r24
     dfa:	8f 70       	andi	r24, 0x0F	; 15
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	81 70       	andi	r24, 0x01	; 1
     e02:	90 70       	andi	r25, 0x00	; 0
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	a9 f3       	breq	.-22     	; 0xdf2 <ADC_u16ReadADCInMV+0x2e>

	/* clear the conversion flag */
	SET_BIT(ADCSRA, ADIF);
     e08:	a6 e2       	ldi	r26, 0x26	; 38
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e2       	ldi	r30, 0x26	; 38
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 61       	ori	r24, 0x10	; 16
     e14:	8c 93       	st	X, r24
	/* check if left Adjustment or right (8 bit or 10 bit) */
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	return ADCH;
	
	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	return ADC;
     e16:	e4 e2       	ldi	r30, 0x24	; 36
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01

	#endif
	
}
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(u8 channel)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= CHANNEL_MASK;
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 7e       	andi	r24, 0xE0	; 224
     e3e:	8c 93       	st	X, r24
	ADMUX |= channel;
     e40:	a7 e2       	ldi	r26, 0x27	; 39
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e2       	ldi	r30, 0x27	; 39
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	90 81       	ld	r25, Z
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	89 2b       	or	r24, r25
     e4e:	8c 93       	st	X, r24
	/* check if left Adjustment or right (8 bit or 10 bit) */
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	return ADCH;

	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	return ADC;
     e50:	e4 e2       	ldi	r30, 0x24	; 36
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01

	#endif
}
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <ADC_voidCallBack>:

void ADC_voidCallBack(void (*addresscpy)(void), u8 channel, u16 *result)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <ADC_voidCallBack+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <ADC_voidCallBack+0x8>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6b 83       	std	Y+3, r22	; 0x03
     e74:	5d 83       	std	Y+5, r21	; 0x05
     e76:	4c 83       	std	Y+4, r20	; 0x04
	ADMUX &= CHANNEL_MASK;
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 7e       	andi	r24, 0xE0	; 224
     e84:	8c 93       	st	X, r24
	ADMUX |= channel;
     e86:	a7 e2       	ldi	r26, 0x27	; 39
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e2       	ldi	r30, 0x27	; 39
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	90 81       	ld	r25, Z
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	89 2b       	or	r24, r25
     e94:	8c 93       	st	X, r24
	if(addresscpy != NULL)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <ADC_voidCallBack+0x56>
	{
		ADC_voidConversionFunc = addresscpy;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	90 93 b5 00 	sts	0x00B5, r25
     ea6:	80 93 b4 00 	sts	0x00B4, r24
		ADC_u16ConversionResult = result;
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	90 93 b3 00 	sts	0x00B3, r25
     eb2:	80 93 b2 00 	sts	0x00B2, r24
	}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <ADC_voidCallArrayBack>:

void ADC_voidCallArrayBack (ADC_struct adc)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	27 97       	sbiw	r28, 0x07	; 7
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	29 83       	std	Y+1, r18	; 0x01
     edc:	3a 83       	std	Y+2, r19	; 0x02
     ede:	4b 83       	std	Y+3, r20	; 0x03
     ee0:	5c 83       	std	Y+4, r21	; 0x04
     ee2:	6d 83       	std	Y+5, r22	; 0x05
     ee4:	7e 83       	std	Y+6, r23	; 0x06
     ee6:	8f 83       	std	Y+7, r24	; 0x07
	if(adc.callBackFunc != NULL)
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	a9 f0       	breq	.+42     	; 0xf1a <ADC_voidCallArrayBack+0x54>
	{
		ADC_arr.size = adc.size;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	80 93 b7 00 	sts	0x00B7, r24
		ADC_arr.channelArr = adc.channelArr;
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	90 93 b9 00 	sts	0x00B9, r25
     efe:	80 93 b8 00 	sts	0x00B8, r24
		ADC_arr.resultArr = adc.resultArr;
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	90 93 bb 00 	sts	0x00BB, r25
     f0a:	80 93 ba 00 	sts	0x00BA, r24
		ADC_arr.callBackFunc = adc.callBackFunc;
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	90 93 bd 00 	sts	0x00BD, r25
     f16:	80 93 bc 00 	sts	0x00BC, r24
	}
	ADMUX &= CHANNEL_MASK;
     f1a:	a7 e2       	ldi	r26, 0x27	; 39
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e2       	ldi	r30, 0x27	; 39
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 7e       	andi	r24, 0xE0	; 224
     f26:	8c 93       	st	X, r24
	ADMUX |= ADC_arr.channelArr[0];
     f28:	a7 e2       	ldi	r26, 0x27	; 39
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e2       	ldi	r30, 0x27	; 39
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	90 81       	ld	r25, Z
     f32:	e0 91 b8 00 	lds	r30, 0x00B8
     f36:	f0 91 b9 00 	lds	r31, 0x00B9
     f3a:	80 81       	ld	r24, Z
     f3c:	89 2b       	or	r24, r25
     f3e:	8c 93       	st	X, r24

	ADC_voidStartConversion();
     f40:	0e 94 b1 06 	call	0xd62	; 0xd62 <ADC_voidStartConversion>
}
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <__vector_16>:
//
//	ADC_voidConversionFunc();
//}

void __vector_16(void)
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

#if ADJUSTMENT == LEFT_ADJUSTMENT
	ADC_arr.resultArr[counter] = ADCH;

#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	ADC_arr.resultArr[counter] =  ADC;
     f80:	20 91 ba 00 	lds	r18, 0x00BA
     f84:	30 91 bb 00 	lds	r19, 0x00BB
     f88:	80 91 b6 00 	lds	r24, 0x00B6
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	d9 01       	movw	r26, r18
     f96:	a8 0f       	add	r26, r24
     f98:	b9 1f       	adc	r27, r25
     f9a:	e4 e2       	ldi	r30, 0x24	; 36
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	11 96       	adiw	r26, 0x01	; 1
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24

	#endif

	counter++;
     fa8:	80 91 b6 00 	lds	r24, 0x00B6
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 b6 00 	sts	0x00B6, r24
	if(counter < ADC_arr.size)
     fb2:	90 91 b7 00 	lds	r25, 0x00B7
     fb6:	80 91 b6 00 	lds	r24, 0x00B6
     fba:	89 17       	cp	r24, r25
     fbc:	e8 f4       	brcc	.+58     	; 0xff8 <__vector_16+0xa2>
	{
		ADMUX &= CHANNEL_MASK;
     fbe:	a7 e2       	ldi	r26, 0x27	; 39
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e2       	ldi	r30, 0x27	; 39
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 7e       	andi	r24, 0xE0	; 224
     fca:	8c 93       	st	X, r24
		ADMUX |= ADC_arr.channelArr[counter];
     fcc:	a7 e2       	ldi	r26, 0x27	; 39
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e7 e2       	ldi	r30, 0x27	; 39
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	40 81       	ld	r20, Z
     fd6:	20 91 b8 00 	lds	r18, 0x00B8
     fda:	30 91 b9 00 	lds	r19, 0x00B9
     fde:	80 91 b6 00 	lds	r24, 0x00B6
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	f9 01       	movw	r30, r18
     fe8:	e8 0f       	add	r30, r24
     fea:	f9 1f       	adc	r31, r25
     fec:	80 81       	ld	r24, Z
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
		ADC_voidStartConversion();
     ff2:	0e 94 b1 06 	call	0xd62	; 0xd62 <ADC_voidStartConversion>
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <__vector_16+0xac>
	}
	else
	{
		ADC_arr.callBackFunc();
     ff8:	e0 91 bc 00 	lds	r30, 0x00BC
     ffc:	f0 91 bd 00 	lds	r31, 0x00BD
    1000:	09 95       	icall
	}
}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <EXT_voidEnableGlobalInt>:
/* Description    :  This function used to enable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidEnableGlobalInt( void )
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    1030:	af e5       	ldi	r26, 0x5F	; 95
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ef e5       	ldi	r30, 0x5F	; 95
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 68       	ori	r24, 0x80	; 128
    103c:	8c 93       	st	X, r24
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <EXT_voidDisableGlobalInt>:
/* Description    :  This function used to disable global interrupt      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT_voidDisableGlobalInt( void )
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);
    104c:	af e5       	ldi	r26, 0x5F	; 95
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e5       	ldi	r30, 0x5F	; 95
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8f 77       	andi	r24, 0x7F	; 127
    1058:	8c 93       	st	X, r24
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <EXT0_voidInit>:
/****************************************************************/



void EXT0_voidInit (void)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	#elif EXT0_SENSE_MODE == RISING
	SET_BIT(MCUCR , 0);
	SET_BIT(MCUCR , 1);
	
	#elif EXT0_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 0);
    1068:	a5 e5       	ldi	r26, 0x55	; 85
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e5       	ldi	r30, 0x55	; 85
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8e 7f       	andi	r24, 0xFE	; 254
    1074:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 1);
    1076:	a5 e5       	ldi	r26, 0x55	; 85
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */

	
/** disable EXT0 in initialization function  **/
/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 6 );
    1084:	ab e5       	ldi	r26, 0x5B	; 91
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	eb e5       	ldi	r30, 0x5B	; 91
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 7b       	andi	r24, 0xBF	; 191
    1090:	8c 93       	st	X, r24
	SET_BIT(GIFR , 6 ) ;
    1092:	aa e5       	ldi	r26, 0x5A	; 90
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e5       	ldi	r30, 0x5A	; 90
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	8c 93       	st	X, r24
	
	
}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <EXT1_voidInit>:
/* Description    :  This function used to initialize EXT1      */
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/
void EXT1_voidInit (void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	#elif EXT1_SENSE_MODE == RISING
	SET_BIT(MCUCR , 2);
	SET_BIT(MCUCR , 3);

	#elif EXT1_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 2);
    10ae:	a5 e5       	ldi	r26, 0x55	; 85
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e5       	ldi	r30, 0x55	; 85
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8b 7f       	andi	r24, 0xFB	; 251
    10ba:	8c 93       	st	X, r24
	SET_BIT(MCUCR , 3);
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 60       	ori	r24, 0x08	; 8
    10c8:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 7 );
    10ca:	ab e5       	ldi	r26, 0x5B	; 91
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e5       	ldi	r30, 0x5B	; 91
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 77       	andi	r24, 0x7F	; 127
    10d6:	8c 93       	st	X, r24
	SET_BIT(GIFR , 7 ) ;
    10d8:	aa e5       	ldi	r26, 0x5A	; 90
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ea e5       	ldi	r30, 0x5A	; 90
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	8c 93       	st	X, r24


}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <EXT2_voidInit>:



void EXT2_voidInit (void)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62

	/*  ( if / else if ) condition for Macros */

	#if EXT2_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCSR , 6);
    10f4:	a4 e5       	ldi	r26, 0x54	; 84
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e4 e5       	ldi	r30, 0x54	; 84
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 7b       	andi	r24, 0xBF	; 191
    1100:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 5 );
    1102:	ab e5       	ldi	r26, 0x5B	; 91
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	eb e5       	ldi	r30, 0x5B	; 91
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 7d       	andi	r24, 0xDF	; 223
    110e:	8c 93       	st	X, r24
	SET_BIT(GIFR , 5 ) ;
    1110:	aa e5       	ldi	r26, 0x5A	; 90
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ea e5       	ldi	r30, 0x5A	; 90
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	8c 93       	st	X, r24


}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <EXT0_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidEnable()
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( GICR , 6 );
    112c:	ab e5       	ldi	r26, 0x5B	; 91
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e5       	ldi	r30, 0x5B	; 91
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 64       	ori	r24, 0x40	; 64
    1138:	8c 93       	st	X, r24
	
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <EXT0_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidDisable()
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( GICR , 6 );
    1148:	ab e5       	ldi	r26, 0x5B	; 91
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e5       	ldi	r30, 0x5B	; 91
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	8c 93       	st	X, r24
	
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <EXT1_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidEnable()
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 7 );
    1164:	ab e5       	ldi	r26, 0x5B	; 91
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e5       	ldi	r30, 0x5B	; 91
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	8c 93       	st	X, r24

}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <EXT1_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidDisable()
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 7 );
    1180:	ab e5       	ldi	r26, 0x5B	; 91
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e5       	ldi	r30, 0x5B	; 91
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8f 77       	andi	r24, 0x7F	; 127
    118c:	8c 93       	st	X, r24

}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <EXT2_voidEnable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidEnable()
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( GICR , 5 );
    119c:	ab e5       	ldi	r26, 0x5B	; 91
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e5       	ldi	r30, 0x5B	; 91
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 62       	ori	r24, 0x20	; 32
    11a8:	8c 93       	st	X, r24

}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <EXT2_voidDisable>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidDisable()
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT( GICR , 5 );
    11b8:	ab e5       	ldi	r26, 0x5B	; 91
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e5       	ldi	r30, 0x5B	; 91
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7d       	andi	r24, 0xDF	; 223
    11c4:	8c 93       	st	X, r24

}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <EXT0_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidCallBack(void (*addresscpy)(void))
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EXT0_voidCallBack+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	31 f0       	breq	.+12     	; 0x11ee <EXT0_voidCallBack+0x22>
	{
		pf1 = addresscpy;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	90 93 bf 00 	sts	0x00BF, r25
    11ea:	80 93 be 00 	sts	0x00BE, r24
	}
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <EXT1_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT1_voidCallBack(void (*addresscpy)(void))
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <EXT1_voidCallBack+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	31 f0       	breq	.+12     	; 0x121a <EXT1_voidCallBack+0x22>
	{
		pf2 = addresscpy;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	90 93 c1 00 	sts	0x00C1, r25
    1216:	80 93 c0 00 	sts	0x00C0, r24
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <EXT2_voidCallBack>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void EXT2_voidCallBack(void (*addresscpy)(void))
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <EXT2_voidCallBack+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
	if(addresscpy != NULL)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	31 f0       	breq	.+12     	; 0x1246 <EXT2_voidCallBack+0x22>
	{
		pf3 = addresscpy;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	90 93 c3 00 	sts	0x00C3, r25
    1242:	80 93 c2 00 	sts	0x00C2, r24
	}
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <EXT0_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <EXT0_voidSetSignalch+0x6>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	
	switch(SenseCpy)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3b 83       	std	Y+3, r19	; 0x03
    1266:	2a 83       	std	Y+2, r18	; 0x02
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	9b 81       	ldd	r25, Y+3	; 0x03
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	91 05       	cpc	r25, r1
    1270:	a1 f1       	breq	.+104    	; 0x12da <EXT0_voidSetSignalch+0x8a>
    1272:	2a 81       	ldd	r18, Y+2	; 0x02
    1274:	3b 81       	ldd	r19, Y+3	; 0x03
    1276:	25 30       	cpi	r18, 0x05	; 5
    1278:	31 05       	cpc	r19, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <EXT0_voidSetSignalch+0x38>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	61 f0       	breq	.+24     	; 0x129e <EXT0_voidSetSignalch+0x4e>
    1286:	46 c0       	rjmp	.+140    	; 0x1314 <EXT0_voidSetSignalch+0xc4>
    1288:	2a 81       	ldd	r18, Y+2	; 0x02
    128a:	3b 81       	ldd	r19, Y+3	; 0x03
    128c:	27 30       	cpi	r18, 0x07	; 7
    128e:	31 05       	cpc	r19, r1
    1290:	a9 f0       	breq	.+42     	; 0x12bc <EXT0_voidSetSignalch+0x6c>
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	8a 30       	cpi	r24, 0x0A	; 10
    1298:	91 05       	cpc	r25, r1
    129a:	71 f1       	breq	.+92     	; 0x12f8 <EXT0_voidSetSignalch+0xa8>
    129c:	3b c0       	rjmp	.+118    	; 0x1314 <EXT0_voidSetSignalch+0xc4>
	{
		case IOC:
			SET_BIT(MCUCR , 0);
    129e:	a5 e5       	ldi	r26, 0x55	; 85
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e5       	ldi	r30, 0x55	; 85
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
    12ac:	a5 e5       	ldi	r26, 0x55	; 85
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e5       	ldi	r30, 0x55	; 85
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8d 7f       	andi	r24, 0xFD	; 253
    12b8:	8c 93       	st	X, r24
    12ba:	2c c0       	rjmp	.+88     	; 0x1314 <EXT0_voidSetSignalch+0xc4>
			break;

		case RISING:
			SET_BIT(MCUCR , 0);
    12bc:	a5 e5       	ldi	r26, 0x55	; 85
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e5       	ldi	r30, 0x55	; 85
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
    12ca:	a5 e5       	ldi	r26, 0x55	; 85
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e5       	ldi	r30, 0x55	; 85
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	82 60       	ori	r24, 0x02	; 2
    12d6:	8c 93       	st	X, r24
    12d8:	1d c0       	rjmp	.+58     	; 0x1314 <EXT0_voidSetSignalch+0xc4>
			break;

		case FALLING:
			CLEAR_BIT(MCUCR , 0);
    12da:	a5 e5       	ldi	r26, 0x55	; 85
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e5       	ldi	r30, 0x55	; 85
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24
			SET_BIT(MCUCR , 1);
    12e8:	a5 e5       	ldi	r26, 0x55	; 85
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e5       	ldi	r30, 0x55	; 85
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	82 60       	ori	r24, 0x02	; 2
    12f4:	8c 93       	st	X, r24
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <EXT0_voidSetSignalch+0xc4>
			break;

		case LOW_LEVEL:
			CLEAR_BIT(MCUCR , 0);
    12f8:	a5 e5       	ldi	r26, 0x55	; 85
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e5       	ldi	r30, 0x55	; 85
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8e 7f       	andi	r24, 0xFE	; 254
    1304:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , 1);
    1306:	a5 e5       	ldi	r26, 0x55	; 85
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e5       	ldi	r30, 0x55	; 85
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8d 7f       	andi	r24, 0xFD	; 253
    1312:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <EXT1_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT1_voidSetSignalch(u8 SenseCpy)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <EXT1_voidSetSignalch+0x6>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3b 83       	std	Y+3, r19	; 0x03
    1336:	2a 83       	std	Y+2, r18	; 0x02
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	91 05       	cpc	r25, r1
    1340:	a1 f1       	breq	.+104    	; 0x13aa <EXT1_voidSetSignalch+0x8a>
    1342:	2a 81       	ldd	r18, Y+2	; 0x02
    1344:	3b 81       	ldd	r19, Y+3	; 0x03
    1346:	25 30       	cpi	r18, 0x05	; 5
    1348:	31 05       	cpc	r19, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <EXT1_voidSetSignalch+0x38>
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	61 f0       	breq	.+24     	; 0x136e <EXT1_voidSetSignalch+0x4e>
    1356:	46 c0       	rjmp	.+140    	; 0x13e4 <EXT1_voidSetSignalch+0xc4>
    1358:	2a 81       	ldd	r18, Y+2	; 0x02
    135a:	3b 81       	ldd	r19, Y+3	; 0x03
    135c:	27 30       	cpi	r18, 0x07	; 7
    135e:	31 05       	cpc	r19, r1
    1360:	a9 f0       	breq	.+42     	; 0x138c <EXT1_voidSetSignalch+0x6c>
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	8a 30       	cpi	r24, 0x0A	; 10
    1368:	91 05       	cpc	r25, r1
    136a:	71 f1       	breq	.+92     	; 0x13c8 <EXT1_voidSetSignalch+0xa8>
    136c:	3b c0       	rjmp	.+118    	; 0x13e4 <EXT1_voidSetSignalch+0xc4>
	{
		case IOC:
		SET_BIT(MCUCR , 2);
    136e:	a5 e5       	ldi	r26, 0x55	; 85
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e5       	ldi	r30, 0x55	; 85
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	84 60       	ori	r24, 0x04	; 4
    137a:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
    137c:	a5 e5       	ldi	r26, 0x55	; 85
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e5       	ldi	r30, 0x55	; 85
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8c 93       	st	X, r24
    138a:	2c c0       	rjmp	.+88     	; 0x13e4 <EXT1_voidSetSignalch+0xc4>
		break;

		case RISING:
		SET_BIT(MCUCR , 2);
    138c:	a5 e5       	ldi	r26, 0x55	; 85
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e5       	ldi	r30, 0x55	; 85
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	88 60       	ori	r24, 0x08	; 8
    13a6:	8c 93       	st	X, r24
    13a8:	1d c0       	rjmp	.+58     	; 0x13e4 <EXT1_voidSetSignalch+0xc4>
		break;

		case FALLING:
		CLEAR_BIT(MCUCR , 2);
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8b 7f       	andi	r24, 0xFB	; 251
    13b6:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 3);
    13b8:	a5 e5       	ldi	r26, 0x55	; 85
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e5       	ldi	r30, 0x55	; 85
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	88 60       	ori	r24, 0x08	; 8
    13c4:	8c 93       	st	X, r24
    13c6:	0e c0       	rjmp	.+28     	; 0x13e4 <EXT1_voidSetSignalch+0xc4>
		break;

		case LOW_LEVEL:
		CLEAR_BIT(MCUCR , 2);
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 3);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	8c 93       	st	X, r24
	}

	/* End ( if ) condition for Macros */


}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <EXT2_voidSetSignalch>:
/****************************************************************/
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <EXT2_voidSetSignalch+0x6>
    13f6:	0f 92       	push	r0
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01

	switch(SenseCpy)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3b 83       	std	Y+3, r19	; 0x03
    1406:	2a 83       	std	Y+2, r18	; 0x02
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	91 05       	cpc	r25, r1
    1410:	69 f0       	breq	.+26     	; 0x142c <EXT2_voidSetSignalch+0x3c>
    1412:	2a 81       	ldd	r18, Y+2	; 0x02
    1414:	3b 81       	ldd	r19, Y+3	; 0x03
    1416:	27 30       	cpi	r18, 0x07	; 7
    1418:	31 05       	cpc	r19, r1
    141a:	79 f4       	brne	.+30     	; 0x143a <EXT2_voidSetSignalch+0x4a>
	{
		case RISING:
		SET_BIT(MCUCSR , 6);
    141c:	a4 e5       	ldi	r26, 0x54	; 84
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e5       	ldi	r30, 0x54	; 84
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	8c 93       	st	X, r24
    142a:	07 c0       	rjmp	.+14     	; 0x143a <EXT2_voidSetSignalch+0x4a>
		break;

		case FALLING:
		CLEAR_BIT(MCUCSR , 6);
    142c:	a4 e5       	ldi	r26, 0x54	; 84
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e4 e5       	ldi	r30, 0x54	; 84
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	8c 93       	st	X, r24
	}
	
	/* End ( if ) condition for Macros */
	

}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <__vector_1>:
*/
/** Linker Problem solved */


void __vector_1(void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	pf1();
    1470:	e0 91 be 00 	lds	r30, 0x00BE
    1474:	f0 91 bf 00 	lds	r31, 0x00BF
    1478:	09 95       	icall
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_2>:



void __vector_2(void)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	4f 93       	push	r20
    14b0:	5f 93       	push	r21
    14b2:	6f 93       	push	r22
    14b4:	7f 93       	push	r23
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	pf2();
    14ca:	e0 91 c0 00 	lds	r30, 0x00C0
    14ce:	f0 91 c1 00 	lds	r31, 0x00C1
    14d2:	09 95       	icall
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_3>:


void __vector_3(void)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	pf3();
    1524:	e0 91 c2 00 	lds	r30, 0x00C2
    1528:	f0 91 c3 00 	lds	r31, 0x00C3
    152c:	09 95       	icall
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <dio_vidConfigChannel+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <dio_vidConfigChannel+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
    1566:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3d 83       	std	Y+5, r19	; 0x05
    1570:	2c 83       	std	Y+4, r18	; 0x04
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <dio_vidConfigChannel+0x2a>
    157c:	43 c0       	rjmp	.+134    	; 0x1604 <dio_vidConfigChannel+0xb0>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <dio_vidConfigChannel+0x3e>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	71 f0       	breq	.+28     	; 0x15ac <dio_vidConfigChannel+0x58>
    1590:	bc c0       	rjmp	.+376    	; 0x170a <dio_vidConfigChannel+0x1b6>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <dio_vidConfigChannel+0x4a>
    159c:	5f c0       	rjmp	.+190    	; 0x165c <dio_vidConfigChannel+0x108>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <dio_vidConfigChannel+0x56>
    15a8:	85 c0       	rjmp	.+266    	; 0x16b4 <dio_vidConfigChannel+0x160>
    15aa:	af c0       	rjmp	.+350    	; 0x170a <dio_vidConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	a1 f4       	brne	.+40     	; 0x15da <dio_vidConfigChannel+0x86>
		{
			SET_BIT (DIO_DDRA_REG,channel);
    15b2:	aa e3       	ldi	r26, 0x3A	; 58
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e3       	ldi	r30, 0x3A	; 58
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <dio_vidConfigChannel+0x7c>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <dio_vidConfigChannel+0x78>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	98 c0       	rjmp	.+304    	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
    15da:	aa e3       	ldi	r26, 0x3A	; 58
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ea e3       	ldi	r30, 0x3A	; 58
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <dio_vidConfigChannel+0xa4>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <dio_vidConfigChannel+0xa0>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	83 c0       	rjmp	.+262    	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	a1 f4       	brne	.+40     	; 0x1632 <dio_vidConfigChannel+0xde>
		{
			SET_BIT (DIO_DDRB_REG,channel);
    160a:	a7 e3       	ldi	r26, 0x37	; 55
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e7 e3       	ldi	r30, 0x37	; 55
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <dio_vidConfigChannel+0xd4>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <dio_vidConfigChannel+0xd0>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	6c c0       	rjmp	.+216    	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
    1632:	a7 e3       	ldi	r26, 0x37	; 55
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e7 e3       	ldi	r30, 0x37	; 55
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <dio_vidConfigChannel+0xfc>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <dio_vidConfigChannel+0xf8>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	57 c0       	rjmp	.+174    	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a1 f4       	brne	.+40     	; 0x168a <dio_vidConfigChannel+0x136>
		{
			SET_BIT (DIO_DDRC_REG,channel);
    1662:	a4 e3       	ldi	r26, 0x34	; 52
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e4 e3       	ldi	r30, 0x34	; 52
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <dio_vidConfigChannel+0x12c>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <dio_vidConfigChannel+0x128>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	40 c0       	rjmp	.+128    	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
    168a:	a4 e3       	ldi	r26, 0x34	; 52
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e4 e3       	ldi	r30, 0x34	; 52
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <dio_vidConfigChannel+0x154>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <dio_vidConfigChannel+0x150>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	2b c0       	rjmp	.+86     	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <dio_vidConfigChannel+0x18e>
		{
			SET_BIT (DIO_DDRD_REG,channel);
    16ba:	a1 e3       	ldi	r26, 0x31	; 49
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <dio_vidConfigChannel+0x184>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <dio_vidConfigChannel+0x180>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <dio_vidConfigChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
    16e2:	a1 e3       	ldi	r26, 0x31	; 49
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e1 e3       	ldi	r30, 0x31	; 49
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <dio_vidConfigChannel+0x1ac>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <dio_vidConfigChannel+0x1a8>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
		}
		break;
	}
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <dio_vidWriteChannel+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <dio_vidWriteChannel+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
    172c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <dio_vidWriteChannel+0x2a>
    1742:	43 c0       	rjmp	.+134    	; 0x17ca <dio_vidWriteChannel+0xb0>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <dio_vidWriteChannel+0x3e>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	71 f0       	breq	.+28     	; 0x1772 <dio_vidWriteChannel+0x58>
    1756:	bc c0       	rjmp	.+376    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <dio_vidWriteChannel+0x4a>
    1762:	5f c0       	rjmp	.+190    	; 0x1822 <dio_vidWriteChannel+0x108>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <dio_vidWriteChannel+0x56>
    176e:	85 c0       	rjmp	.+266    	; 0x187a <dio_vidWriteChannel+0x160>
    1770:	af c0       	rjmp	.+350    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 23       	and	r24, r24
    1776:	a9 f4       	brne	.+42     	; 0x17a2 <dio_vidWriteChannel+0x88>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
    1778:	ab e3       	ldi	r26, 0x3B	; 59
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <dio_vidWriteChannel+0x7c>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <dio_vidWriteChannel+0x78>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	97 c0       	rjmp	.+302    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
    17a2:	ab e3       	ldi	r26, 0x3B	; 59
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e3       	ldi	r30, 0x3B	; 59
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <dio_vidWriteChannel+0xa6>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <dio_vidWriteChannel+0xa2>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	83 c0       	rjmp	.+262    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 23       	and	r24, r24
    17ce:	a9 f4       	brne	.+42     	; 0x17fa <dio_vidWriteChannel+0xe0>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
    17d0:	a8 e3       	ldi	r26, 0x38	; 56
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e8 e3       	ldi	r30, 0x38	; 56
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <dio_vidWriteChannel+0xd4>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <dio_vidWriteChannel+0xd0>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	6b c0       	rjmp	.+214    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <dio_vidWriteChannel+0xfe>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <dio_vidWriteChannel+0xfa>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	57 c0       	rjmp	.+174    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 23       	and	r24, r24
    1826:	a9 f4       	brne	.+42     	; 0x1852 <dio_vidWriteChannel+0x138>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
    1828:	a5 e3       	ldi	r26, 0x35	; 53
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e3       	ldi	r30, 0x35	; 53
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <dio_vidWriteChannel+0x12c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <dio_vidWriteChannel+0x128>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
    1852:	a5 e3       	ldi	r26, 0x35	; 53
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <dio_vidWriteChannel+0x156>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <dio_vidWriteChannel+0x152>
    1874:	84 2b       	or	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	2b c0       	rjmp	.+86     	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 23       	and	r24, r24
    187e:	a9 f4       	brne	.+42     	; 0x18aa <dio_vidWriteChannel+0x190>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
    1880:	a2 e3       	ldi	r26, 0x32	; 50
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <dio_vidWriteChannel+0x184>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <dio_vidWriteChannel+0x180>
    18a2:	80 95       	com	r24
    18a4:	84 23       	and	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	13 c0       	rjmp	.+38     	; 0x18d0 <dio_vidWriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <dio_vidWriteChannel+0x1ae>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <dio_vidWriteChannel+0x1aa>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
		}
		break;
	}
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <dio_vidSetPortDir>:
					 direction  -> INPUT/OUTPUT
* \Return value:   : None
*******************************************************************************/

void dio_vidSetPortDir(dio_portId_t port, u8 direction)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <dio_vidSetPortDir+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <dio_vidSetPortDir+0x8>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3c 83       	std	Y+4, r19	; 0x04
    18f8:	2b 83       	std	Y+3, r18	; 0x03
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	d1 f0       	breq	.+52     	; 0x1938 <dio_vidSetPortDir+0x58>
    1904:	2b 81       	ldd	r18, Y+3	; 0x03
    1906:	3c 81       	ldd	r19, Y+4	; 0x04
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <dio_vidSetPortDir+0x38>
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	61 f0       	breq	.+24     	; 0x192e <dio_vidSetPortDir+0x4e>
    1916:	1e c0       	rjmp	.+60     	; 0x1954 <dio_vidSetPortDir+0x74>
    1918:	2b 81       	ldd	r18, Y+3	; 0x03
    191a:	3c 81       	ldd	r19, Y+4	; 0x04
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	81 f0       	breq	.+32     	; 0x1942 <dio_vidSetPortDir+0x62>
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	81 f0       	breq	.+32     	; 0x194c <dio_vidSetPortDir+0x6c>
    192c:	13 c0       	rjmp	.+38     	; 0x1954 <dio_vidSetPortDir+0x74>
	{
		case DIO_PORTA:  DIO_DDRA_REG = direction; break;
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	80 83       	st	Z, r24
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <dio_vidSetPortDir+0x74>
		case DIO_PORTB:  DIO_DDRB_REG = direction; break;
    1938:	e7 e3       	ldi	r30, 0x37	; 55
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	80 83       	st	Z, r24
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <dio_vidSetPortDir+0x74>
		case DIO_PORTC:  DIO_DDRC_REG = direction; break;
    1942:	e4 e3       	ldi	r30, 0x34	; 52
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	80 83       	st	Z, r24
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <dio_vidSetPortDir+0x74>
		case DIO_PORTD:  DIO_DDRD_REG = direction; break;
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	80 83       	st	Z, r24
		default: break;
	}
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <dio_vidSetPortValue>:
					 value -> data value
* \Return value:   : None                            
*******************************************************************************/

void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <dio_vidSetPortValue+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <dio_vidSetPortValue+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02

    switch(port)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3c 83       	std	Y+4, r19	; 0x04
    197a:	2b 83       	std	Y+3, r18	; 0x03
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d1 f0       	breq	.+52     	; 0x19ba <dio_vidSetPortValue+0x58>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <dio_vidSetPortValue+0x38>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <dio_vidSetPortValue+0x4e>
    1998:	1e c0       	rjmp	.+60     	; 0x19d6 <dio_vidSetPortValue+0x74>
    199a:	2b 81       	ldd	r18, Y+3	; 0x03
    199c:	3c 81       	ldd	r19, Y+4	; 0x04
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <dio_vidSetPortValue+0x62>
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	81 f0       	breq	.+32     	; 0x19ce <dio_vidSetPortValue+0x6c>
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <dio_vidSetPortValue+0x74>
    {
        case DIO_PORTA:  DIO_PORTA_REG = value; break;
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	80 83       	st	Z, r24
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <dio_vidSetPortValue+0x74>
        case DIO_PORTB:  DIO_PORTB_REG = value; break;
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	80 83       	st	Z, r24
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <dio_vidSetPortValue+0x74>
        case DIO_PORTC:  DIO_PORTC_REG = value; break;
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	80 83       	st	Z, r24
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <dio_vidSetPortValue+0x74>
        case DIO_PORTD:  DIO_PORTD_REG = value; break;
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 83       	st	Z, r24
        default: break;
    }
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <dio_vidWriteChannelGroup>:
					 mask  -> data mask
					 position -> starting position of the masking
* \Return value:   : None
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 position)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <dio_vidWriteChannelGroup+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <dio_vidWriteChannelGroup+0x8>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <dio_vidWriteChannelGroup+0xa>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	6a 83       	std	Y+2, r22	; 0x02
    19f6:	4b 83       	std	Y+3, r20	; 0x03
    19f8:	2c 83       	std	Y+4, r18	; 0x04
	/*	show me your code */
	switch(port)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3e 83       	std	Y+6, r19	; 0x06
    1a02:	2d 83       	std	Y+5, r18	; 0x05
    1a04:	6d 81       	ldd	r22, Y+5	; 0x05
    1a06:	7e 81       	ldd	r23, Y+6	; 0x06
    1a08:	61 30       	cpi	r22, 0x01	; 1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	c1 f1       	breq	.+112    	; 0x1a7e <dio_vidWriteChannelGroup+0x9a>
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	91 05       	cpc	r25, r1
    1a16:	34 f4       	brge	.+12     	; 0x1a24 <dio_vidWriteChannelGroup+0x40>
    1a18:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a1c:	21 15       	cp	r18, r1
    1a1e:	31 05       	cpc	r19, r1
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <dio_vidWriteChannelGroup+0x5a>
    1a22:	8c c0       	rjmp	.+280    	; 0x1b3c <dio_vidWriteChannelGroup+0x158>
    1a24:	6d 81       	ldd	r22, Y+5	; 0x05
    1a26:	7e 81       	ldd	r23, Y+6	; 0x06
    1a28:	62 30       	cpi	r22, 0x02	; 2
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <dio_vidWriteChannelGroup+0x4c>
    1a2e:	47 c0       	rjmp	.+142    	; 0x1abe <dio_vidWriteChannelGroup+0xda>
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <dio_vidWriteChannelGroup+0x58>
    1a3a:	61 c0       	rjmp	.+194    	; 0x1afe <dio_vidWriteChannelGroup+0x11a>
    1a3c:	7f c0       	rjmp	.+254    	; 0x1b3c <dio_vidWriteChannelGroup+0x158>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= (~mask);
    1a3e:	ab e3       	ldi	r26, 0x3B	; 59
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e3       	ldi	r30, 0x3B	; 59
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	98 2f       	mov	r25, r24
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	80 95       	com	r24
    1a4e:	89 23       	and	r24, r25
    1a50:	8c 93       	st	X, r24
			DIO_PORTA_REG |= value << position;
    1a52:	ab e3       	ldi	r26, 0x3B	; 59
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	eb e3       	ldi	r30, 0x3B	; 59
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <dio_vidWriteChannelGroup+0x8e>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	8a 95       	dec	r24
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <dio_vidWriteChannelGroup+0x8a>
    1a76:	cb 01       	movw	r24, r22
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	5f c0       	rjmp	.+190    	; 0x1b3c <dio_vidWriteChannelGroup+0x158>
			break;

		case DIO_PORTB:
			DIO_PORTB_REG &= (~mask);
    1a7e:	a8 e3       	ldi	r26, 0x38	; 56
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e8 e3       	ldi	r30, 0x38	; 56
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	98 2f       	mov	r25, r24
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 95       	com	r24
    1a8e:	89 23       	and	r24, r25
    1a90:	8c 93       	st	X, r24
			DIO_PORTB_REG |= value << position;
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	b9 01       	movw	r22, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <dio_vidWriteChannelGroup+0xce>
    1aae:	66 0f       	add	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <dio_vidWriteChannelGroup+0xca>
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <dio_vidWriteChannelGroup+0x158>
			break;

		case DIO_PORTC:
			DIO_PORTC_REG &= (~mask);
    1abe:	a5 e3       	ldi	r26, 0x35	; 53
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e3       	ldi	r30, 0x35	; 53
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	98 2f       	mov	r25, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	80 95       	com	r24
    1ace:	89 23       	and	r24, r25
    1ad0:	8c 93       	st	X, r24
			DIO_PORTC_REG |= value << position;
    1ad2:	a5 e3       	ldi	r26, 0x35	; 53
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e3       	ldi	r30, 0x35	; 53
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	b9 01       	movw	r22, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <dio_vidWriteChannelGroup+0x10e>
    1aee:	66 0f       	add	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <dio_vidWriteChannelGroup+0x10a>
    1af6:	cb 01       	movw	r24, r22
    1af8:	84 2b       	or	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	1f c0       	rjmp	.+62     	; 0x1b3c <dio_vidWriteChannelGroup+0x158>
			break;

		case DIO_PORTD:
			DIO_PORTD_REG &= (~mask);
    1afe:	a2 e3       	ldi	r26, 0x32	; 50
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e2 e3       	ldi	r30, 0x32	; 50
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	98 2f       	mov	r25, r24
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	80 95       	com	r24
    1b0e:	89 23       	and	r24, r25
    1b10:	8c 93       	st	X, r24
			DIO_PORTD_REG |= value << position;
    1b12:	a2 e3       	ldi	r26, 0x32	; 50
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e2 e3       	ldi	r30, 0x32	; 50
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <dio_vidWriteChannelGroup+0x14e>
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	8a 95       	dec	r24
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <dio_vidWriteChannelGroup+0x14a>
    1b36:	cb 01       	movw	r24, r22
    1b38:	84 2b       	or	r24, r20
    1b3a:	8c 93       	st	X, r24
			break;

		default: break;
	}
}
    1b3c:	26 96       	adiw	r28, 0x06	; 6
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/

void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <dio_vidFlipChannel+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <dio_vidFlipChannel+0x8>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	49 f1       	breq	.+82     	; 0x1bc4 <dio_vidFlipChannel+0x76>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <dio_vidFlipChannel+0x38>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <dio_vidFlipChannel+0x4e>
    1b84:	5a c0       	rjmp	.+180    	; 0x1c3a <dio_vidFlipChannel+0xec>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	71 f1       	breq	.+92     	; 0x1bec <dio_vidFlipChannel+0x9e>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	e9 f1       	breq	.+122    	; 0x1c14 <dio_vidFlipChannel+0xc6>
    1b9a:	4f c0       	rjmp	.+158    	; 0x1c3a <dio_vidFlipChannel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
    1b9c:	ab e3       	ldi	r26, 0x3B	; 59
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	eb e3       	ldi	r30, 0x3B	; 59
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <dio_vidFlipChannel+0x6c>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <dio_vidFlipChannel+0x68>
    1bbe:	84 27       	eor	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	3b c0       	rjmp	.+118    	; 0x1c3a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
    1bc4:	a8 e3       	ldi	r26, 0x38	; 56
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e8 e3       	ldi	r30, 0x38	; 56
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <dio_vidFlipChannel+0x94>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <dio_vidFlipChannel+0x90>
    1be6:	84 27       	eor	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	27 c0       	rjmp	.+78     	; 0x1c3a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
    1bec:	a5 e3       	ldi	r26, 0x35	; 53
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e5 e3       	ldi	r30, 0x35	; 53
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <dio_vidFlipChannel+0xbc>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <dio_vidFlipChannel+0xb8>
    1c0e:	84 27       	eor	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	13 c0       	rjmp	.+38     	; 0x1c3a <dio_vidFlipChannel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
    1c14:	a2 e3       	ldi	r26, 0x32	; 50
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <dio_vidFlipChannel+0xe4>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <dio_vidFlipChannel+0xe0>
    1c36:	84 27       	eor	r24, r20
    1c38:	8c 93       	st	X, r24
		break;
	}
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <dio_dioLevelReadChannel>:
* \Parameters (in) : port     -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <dio_dioLevelReadChannel+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <dio_dioLevelReadChannel+0x8>
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_pinRead = STD_LOW;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	4c 81       	ldd	r20, Y+4	; 0x04
    1c68:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6a:	41 30       	cpi	r20, 0x01	; 1
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	41 f1       	breq	.+80     	; 0x1cc0 <dio_dioLevelReadChannel+0x78>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	91 05       	cpc	r25, r1
    1c78:	34 f4       	brge	.+12     	; 0x1c86 <dio_dioLevelReadChannel+0x3e>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	21 15       	cp	r18, r1
    1c80:	31 05       	cpc	r19, r1
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <dio_dioLevelReadChannel+0x54>
    1c84:	52 c0       	rjmp	.+164    	; 0x1d2a <dio_dioLevelReadChannel+0xe2>
    1c86:	4c 81       	ldd	r20, Y+4	; 0x04
    1c88:	5d 81       	ldd	r21, Y+5	; 0x05
    1c8a:	42 30       	cpi	r20, 0x02	; 2
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	51 f1       	breq	.+84     	; 0x1ce4 <dio_dioLevelReadChannel+0x9c>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	91 05       	cpc	r25, r1
    1c98:	b9 f1       	breq	.+110    	; 0x1d08 <dio_dioLevelReadChannel+0xc0>
    1c9a:	47 c0       	rjmp	.+142    	; 0x1d2a <dio_dioLevelReadChannel+0xe2>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
    1c9c:	e9 e3       	ldi	r30, 0x39	; 57
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a9 01       	movw	r20, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <dio_dioLevelReadChannel+0x6c>
    1cb0:	55 95       	asr	r21
    1cb2:	47 95       	ror	r20
    1cb4:	8a 95       	dec	r24
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <dio_dioLevelReadChannel+0x68>
    1cb8:	ca 01       	movw	r24, r20
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	35 c0       	rjmp	.+106    	; 0x1d2a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
    1cc0:	e6 e3       	ldi	r30, 0x36	; 54
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a9 01       	movw	r20, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <dio_dioLevelReadChannel+0x90>
    1cd4:	55 95       	asr	r21
    1cd6:	47 95       	ror	r20
    1cd8:	8a 95       	dec	r24
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <dio_dioLevelReadChannel+0x8c>
    1cdc:	ca 01       	movw	r24, r20
    1cde:	81 70       	andi	r24, 0x01	; 1
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	23 c0       	rjmp	.+70     	; 0x1d2a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
    1ce4:	e3 e3       	ldi	r30, 0x33	; 51
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <dio_dioLevelReadChannel+0xb4>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	8a 95       	dec	r24
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <dio_dioLevelReadChannel+0xb0>
    1d00:	ca 01       	movw	r24, r20
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	11 c0       	rjmp	.+34     	; 0x1d2a <dio_dioLevelReadChannel+0xe2>
		break;

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
    1d08:	e0 e3       	ldi	r30, 0x30	; 48
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <dio_dioLevelReadChannel+0xd8>
    1d1c:	55 95       	asr	r21
    1d1e:	47 95       	ror	r20
    1d20:	8a 95       	dec	r24
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <dio_dioLevelReadChannel+0xd4>
    1d24:	ca 01       	movw	r24, r20
    1d26:	81 70       	andi	r24, 0x01	; 1
    1d28:	89 83       	std	Y+1, r24	; 0x01
		break;
    }
	return loc_pinRead;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <dio_vidEnablePullUp>:
* \Parameters (in) : port  -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <dio_vidEnablePullUp+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <dio_vidEnablePullUp+0x8>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	6a 83       	std	Y+2, r22	; 0x02
	/*	show me your code */
	switch(port)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3c 83       	std	Y+4, r19	; 0x04
    1d54:	2b 83       	std	Y+3, r18	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	49 f1       	breq	.+82     	; 0x1db2 <dio_vidEnablePullUp+0x76>
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <dio_vidEnablePullUp+0x38>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <dio_vidEnablePullUp+0x4e>
    1d72:	5a c0       	rjmp	.+180    	; 0x1e28 <dio_vidEnablePullUp+0xec>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	71 f1       	breq	.+92     	; 0x1dda <dio_vidEnablePullUp+0x9e>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	e9 f1       	breq	.+122    	; 0x1e02 <dio_vidEnablePullUp+0xc6>
    1d88:	4f c0       	rjmp	.+158    	; 0x1e28 <dio_vidEnablePullUp+0xec>
	{
		case DIO_PORTA:
			SET_BIT(DIO_PORTA_REG, channel);
    1d8a:	ab e3       	ldi	r26, 0x3B	; 59
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e3       	ldi	r30, 0x3B	; 59
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <dio_vidEnablePullUp+0x6c>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <dio_vidEnablePullUp+0x68>
    1dac:	84 2b       	or	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	3b c0       	rjmp	.+118    	; 0x1e28 <dio_vidEnablePullUp+0xec>
			break;
		case DIO_PORTB:
			SET_BIT(DIO_PORTB_REG, channel);
    1db2:	a8 e3       	ldi	r26, 0x38	; 56
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e8 e3       	ldi	r30, 0x38	; 56
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <dio_vidEnablePullUp+0x94>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <dio_vidEnablePullUp+0x90>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	27 c0       	rjmp	.+78     	; 0x1e28 <dio_vidEnablePullUp+0xec>
			break;
		case DIO_PORTC:
			SET_BIT(DIO_PORTC_REG, channel);
    1dda:	a5 e3       	ldi	r26, 0x35	; 53
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e3       	ldi	r30, 0x35	; 53
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <dio_vidEnablePullUp+0xbc>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <dio_vidEnablePullUp+0xb8>
    1dfc:	84 2b       	or	r24, r20
    1dfe:	8c 93       	st	X, r24
    1e00:	13 c0       	rjmp	.+38     	; 0x1e28 <dio_vidEnablePullUp+0xec>
			break;
		case DIO_PORTD:
			SET_BIT(DIO_PORTD_REG, channel);
    1e02:	a2 e3       	ldi	r26, 0x32	; 50
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e2 e3       	ldi	r30, 0x32	; 50
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 2e       	mov	r0, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <dio_vidEnablePullUp+0xe4>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <dio_vidEnablePullUp+0xe0>
    1e24:	84 2b       	or	r24, r20
    1e26:	8c 93       	st	X, r24
			break;
	}
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <enablePulse>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	a6 97       	sbiw	r28, 0x26	; 38
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	8b a3       	std	Y+35, r24	; 0x23
    1e5e:	9c a3       	std	Y+36, r25	; 0x24
    1e60:	ad a3       	std	Y+37, r26	; 0x25
    1e62:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e64:	6b a1       	ldd	r22, Y+35	; 0x23
    1e66:	7c a1       	ldd	r23, Y+36	; 0x24
    1e68:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6c:	2b ea       	ldi	r18, 0xAB	; 171
    1e6e:	3a ea       	ldi	r19, 0xAA	; 170
    1e70:	4a ea       	ldi	r20, 0xAA	; 170
    1e72:	50 e4       	ldi	r21, 0x40	; 64
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e7e:	98 a3       	std	Y+32, r25	; 0x20
    1e80:	a9 a3       	std	Y+33, r26	; 0x21
    1e82:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e86:	78 a1       	ldd	r23, Y+32	; 0x20
    1e88:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	1c f4       	brge	.+6      	; 0x1ea2 <enablePulse+0x6c>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	8e 8f       	std	Y+30, r24	; 0x1e
    1ea0:	91 c0       	rjmp	.+290    	; 0x1fc4 <enablePulse+0x18e>
	else if (__tmp > 255)
    1ea2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ea4:	78 a1       	ldd	r23, Y+32	; 0x20
    1ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	53 e4       	ldi	r21, 0x43	; 67
    1eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	0c f0       	brlt	.+2      	; 0x1ebc <enablePulse+0x86>
    1eba:	7b c0       	rjmp	.+246    	; 0x1fb2 <enablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8a 8f       	std	Y+26, r24	; 0x1a
    1ed6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ed8:	ac 8f       	std	Y+28, r26	; 0x1c
    1eda:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ede:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ee0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a e7       	ldi	r20, 0x7A	; 122
    1eea:	55 e4       	ldi	r21, 0x45	; 69
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8e 8b       	std	Y+22, r24	; 0x16
    1ef6:	9f 8b       	std	Y+23, r25	; 0x17
    1ef8:	a8 8f       	std	Y+24, r26	; 0x18
    1efa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1efc:	6e 89       	ldd	r22, Y+22	; 0x16
    1efe:	7f 89       	ldd	r23, Y+23	; 0x17
    1f00:	88 8d       	ldd	r24, Y+24	; 0x18
    1f02:	99 8d       	ldd	r25, Y+25	; 0x19
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <enablePulse+0xe8>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9d 8b       	std	Y+21, r25	; 0x15
    1f1a:	8c 8b       	std	Y+20, r24	; 0x14
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <enablePulse+0x166>
	else if (__tmp > 65535)
    1f1e:	6e 89       	ldd	r22, Y+22	; 0x16
    1f20:	7f 89       	ldd	r23, Y+23	; 0x17
    1f22:	88 8d       	ldd	r24, Y+24	; 0x18
    1f24:	99 8d       	ldd	r25, Y+25	; 0x19
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <enablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f38:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9d 8b       	std	Y+21, r25	; 0x15
    1f5c:	8c 8b       	std	Y+20, r24	; 0x14
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <enablePulse+0x148>
    1f60:	80 e9       	ldi	r24, 0x90	; 144
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	9b 8b       	std	Y+19, r25	; 0x13
    1f66:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f68:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6a:	9b 89       	ldd	r25, Y+19	; 0x13
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <enablePulse+0x136>
    1f70:	9b 8b       	std	Y+19, r25	; 0x13
    1f72:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8c 89       	ldd	r24, Y+20	; 0x14
    1f76:	9d 89       	ldd	r25, Y+21	; 0x15
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9d 8b       	std	Y+21, r25	; 0x15
    1f7c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f80:	9d 89       	ldd	r25, Y+21	; 0x15
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <enablePulse+0x12a>
    1f86:	24 c0       	rjmp	.+72     	; 0x1fd0 <enablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6e 89       	ldd	r22, Y+22	; 0x16
    1f8a:	7f 89       	ldd	r23, Y+23	; 0x17
    1f8c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f8e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9d 8b       	std	Y+21, r25	; 0x15
    1f9a:	8c 8b       	std	Y+20, r24	; 0x14
    1f9c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f9e:	9d 89       	ldd	r25, Y+21	; 0x15
    1fa0:	99 8b       	std	Y+17, r25	; 0x11
    1fa2:	88 8b       	std	Y+16, r24	; 0x10
    1fa4:	88 89       	ldd	r24, Y+16	; 0x10
    1fa6:	99 89       	ldd	r25, Y+17	; 0x11
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <enablePulse+0x172>
    1fac:	99 8b       	std	Y+17, r25	; 0x11
    1fae:	88 8b       	std	Y+16, r24	; 0x10
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <enablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fb2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fb4:	78 a1       	ldd	r23, Y+32	; 0x20
    1fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	8a 95       	dec	r24
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <enablePulse+0x194>
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e4       	ldi	r27, 0x40	; 64
    1fe2:	8b 87       	std	Y+11, r24	; 0x0b
    1fe4:	9c 87       	std	Y+12, r25	; 0x0c
    1fe6:	ad 87       	std	Y+13, r26	; 0x0d
    1fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a e7       	ldi	r20, 0x7A	; 122
    1ff8:	55 e4       	ldi	r21, 0x45	; 69
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	98 87       	std	Y+8, r25	; 0x08
    2006:	a9 87       	std	Y+9, r26	; 0x09
    2008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <enablePulse+0x1f6>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <enablePulse+0x274>
	else if (__tmp > 65535)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <enablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0f c0       	rjmp	.+30     	; 0x208c <enablePulse+0x256>
    206e:	80 e9       	ldi	r24, 0x90	; 144
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <enablePulse+0x244>
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <enablePulse+0x238>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <enablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <enablePulse+0x280>
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20be:	a6 96       	adiw	r28, 0x26	; 38
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <lcd_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	e4 97       	sbiw	r28, 0x34	; 52
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_RW_PORT, LCD_RW_CHANNEL, OUTPUT);
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	62 e0       	ldi	r22, 0x02	; 2
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	63 e0       	ldi	r22, 0x03	; 3
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	64 e0       	ldi	r22, 0x04	; 4
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	65 e0       	ldi	r22, 0x05	; 5
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	66 e0       	ldi	r22, 0x06	; 6
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e7       	ldi	r26, 0x70	; 112
    2130:	b1 e4       	ldi	r27, 0x41	; 65
    2132:	89 ab       	std	Y+49, r24	; 0x31
    2134:	9a ab       	std	Y+50, r25	; 0x32
    2136:	ab ab       	std	Y+51, r26	; 0x33
    2138:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	69 a9       	ldd	r22, Y+49	; 0x31
    213c:	7a a9       	ldd	r23, Y+50	; 0x32
    213e:	8b a9       	ldd	r24, Y+51	; 0x33
    2140:	9c a9       	ldd	r25, Y+52	; 0x34
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8d a7       	std	Y+45, r24	; 0x2d
    2154:	9e a7       	std	Y+46, r25	; 0x2e
    2156:	af a7       	std	Y+47, r26	; 0x2f
    2158:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    215a:	6d a5       	ldd	r22, Y+45	; 0x2d
    215c:	7e a5       	ldd	r23, Y+46	; 0x2e
    215e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2160:	98 a9       	ldd	r25, Y+48	; 0x30
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <lcd_vidInit+0xac>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c a7       	std	Y+44, r25	; 0x2c
    2178:	8b a7       	std	Y+43, r24	; 0x2b
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <lcd_vidInit+0x12a>
	else if (__tmp > 65535)
    217c:	6d a5       	ldd	r22, Y+45	; 0x2d
    217e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2180:	8f a5       	ldd	r24, Y+47	; 0x2f
    2182:	98 a9       	ldd	r25, Y+48	; 0x30
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <lcd_vidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	69 a9       	ldd	r22, Y+49	; 0x31
    2196:	7a a9       	ldd	r23, Y+50	; 0x32
    2198:	8b a9       	ldd	r24, Y+51	; 0x33
    219a:	9c a9       	ldd	r25, Y+52	; 0x34
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9c a7       	std	Y+44, r25	; 0x2c
    21ba:	8b a7       	std	Y+43, r24	; 0x2b
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <lcd_vidInit+0x10c>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9a a7       	std	Y+42, r25	; 0x2a
    21c4:	89 a7       	std	Y+41, r24	; 0x29
    21c6:	89 a5       	ldd	r24, Y+41	; 0x29
    21c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <lcd_vidInit+0xfa>
    21ce:	9a a7       	std	Y+42, r25	; 0x2a
    21d0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9c a7       	std	Y+44, r25	; 0x2c
    21da:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21de:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <lcd_vidInit+0xee>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <lcd_vidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9c a7       	std	Y+44, r25	; 0x2c
    21f8:	8b a7       	std	Y+43, r24	; 0x2b
    21fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fe:	98 a7       	std	Y+40, r25	; 0x28
    2200:	8f a3       	std	Y+39, r24	; 0x27
    2202:	8f a1       	ldd	r24, Y+39	; 0x27
    2204:	98 a5       	ldd	r25, Y+40	; 0x28
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <lcd_vidInit+0x136>
    220a:	98 a7       	std	Y+40, r25	; 0x28
    220c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	lcd_vidSendCmd(0x03);
    220e:	83 e0       	ldi	r24, 0x03	; 3
    2210:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 ea       	ldi	r26, 0xA0	; 160
    221a:	b0 e4       	ldi	r27, 0x40	; 64
    221c:	8b a3       	std	Y+35, r24	; 0x23
    221e:	9c a3       	std	Y+36, r25	; 0x24
    2220:	ad a3       	std	Y+37, r26	; 0x25
    2222:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6b a1       	ldd	r22, Y+35	; 0x23
    2226:	7c a1       	ldd	r23, Y+36	; 0x24
    2228:	8d a1       	ldd	r24, Y+37	; 0x25
    222a:	9e a1       	ldd	r25, Y+38	; 0x26
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8f 8f       	std	Y+31, r24	; 0x1f
    223e:	98 a3       	std	Y+32, r25	; 0x20
    2240:	a9 a3       	std	Y+33, r26	; 0x21
    2242:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2244:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2246:	78 a1       	ldd	r23, Y+32	; 0x20
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <lcd_vidInit+0x196>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e 8f       	std	Y+30, r25	; 0x1e
    2262:	8d 8f       	std	Y+29, r24	; 0x1d
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <lcd_vidInit+0x214>
	else if (__tmp > 65535)
    2266:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2268:	78 a1       	ldd	r23, Y+32	; 0x20
    226a:	89 a1       	ldd	r24, Y+33	; 0x21
    226c:	9a a1       	ldd	r25, Y+34	; 0x22
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <lcd_vidInit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6b a1       	ldd	r22, Y+35	; 0x23
    2280:	7c a1       	ldd	r23, Y+36	; 0x24
    2282:	8d a1       	ldd	r24, Y+37	; 0x25
    2284:	9e a1       	ldd	r25, Y+38	; 0x26
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 8f       	std	Y+30, r25	; 0x1e
    22a4:	8d 8f       	std	Y+29, r24	; 0x1d
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <lcd_vidInit+0x1f6>
    22a8:	80 e9       	ldi	r24, 0x90	; 144
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	9c 8f       	std	Y+28, r25	; 0x1c
    22ae:	8b 8f       	std	Y+27, r24	; 0x1b
    22b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <lcd_vidInit+0x1e4>
    22b8:	9c 8f       	std	Y+28, r25	; 0x1c
    22ba:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9e 8f       	std	Y+30, r25	; 0x1e
    22c4:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <lcd_vidInit+0x1d8>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <lcd_vidInit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22d2:	78 a1       	ldd	r23, Y+32	; 0x20
    22d4:	89 a1       	ldd	r24, Y+33	; 0x21
    22d6:	9a a1       	ldd	r25, Y+34	; 0x22
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 8f       	std	Y+30, r25	; 0x1e
    22e2:	8d 8f       	std	Y+29, r24	; 0x1d
    22e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ea:	89 8f       	std	Y+25, r24	; 0x19
    22ec:	89 8d       	ldd	r24, Y+25	; 0x19
    22ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <lcd_vidInit+0x220>
    22f4:	9a 8f       	std	Y+26, r25	; 0x1a
    22f6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a8 ec       	ldi	r26, 0xC8	; 200
    2304:	b2 e4       	ldi	r27, 0x42	; 66
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	2b ea       	ldi	r18, 0xAB	; 171
    2318:	3a ea       	ldi	r19, 0xAA	; 170
    231a:	4a ea       	ldi	r20, 0xAA	; 170
    231c:	50 e4       	ldi	r21, 0x40	; 64
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	9a 8b       	std	Y+18, r25	; 0x12
    232a:	ab 8b       	std	Y+19, r26	; 0x13
    232c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    232e:	69 89       	ldd	r22, Y+17	; 0x11
    2330:	7a 89       	ldd	r23, Y+18	; 0x12
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	1c f4       	brge	.+6      	; 0x234c <lcd_vidInit+0x27c>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	88 8b       	std	Y+16, r24	; 0x10
    234a:	91 c0       	rjmp	.+290    	; 0x246e <lcd_vidInit+0x39e>
	else if (__tmp > 255)
    234c:	69 89       	ldd	r22, Y+17	; 0x11
    234e:	7a 89       	ldd	r23, Y+18	; 0x12
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	53 e4       	ldi	r21, 0x43	; 67
    235c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	0c f0       	brlt	.+2      	; 0x2366 <lcd_vidInit+0x296>
    2364:	7b c0       	rjmp	.+246    	; 0x245c <lcd_vidInit+0x38c>
	{
		_delay_ms(__us / 1000.0);
    2366:	6d 89       	ldd	r22, Y+21	; 0x15
    2368:	7e 89       	ldd	r23, Y+22	; 0x16
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8c 87       	std	Y+12, r24	; 0x0c
    2380:	9d 87       	std	Y+13, r25	; 0x0d
    2382:	ae 87       	std	Y+14, r26	; 0x0e
    2384:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	6c 85       	ldd	r22, Y+12	; 0x0c
    2388:	7d 85       	ldd	r23, Y+13	; 0x0d
    238a:	8e 85       	ldd	r24, Y+14	; 0x0e
    238c:	9f 85       	ldd	r25, Y+15	; 0x0f
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a e7       	ldi	r20, 0x7A	; 122
    2394:	55 e4       	ldi	r21, 0x45	; 69
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	88 87       	std	Y+8, r24	; 0x08
    23a0:	99 87       	std	Y+9, r25	; 0x09
    23a2:	aa 87       	std	Y+10, r26	; 0x0a
    23a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23a6:	68 85       	ldd	r22, Y+8	; 0x08
    23a8:	79 85       	ldd	r23, Y+9	; 0x09
    23aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <lcd_vidInit+0x2f8>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9f 83       	std	Y+7, r25	; 0x07
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <lcd_vidInit+0x376>
	else if (__tmp > 65535)
    23c8:	68 85       	ldd	r22, Y+8	; 0x08
    23ca:	79 85       	ldd	r23, Y+9	; 0x09
    23cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <lcd_vidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9f 83       	std	Y+7, r25	; 0x07
    2406:	8e 83       	std	Y+6, r24	; 0x06
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <lcd_vidInit+0x358>
    240a:	80 e9       	ldi	r24, 0x90	; 144
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <lcd_vidInit+0x346>
    241a:	9d 83       	std	Y+5, r25	; 0x05
    241c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	9f 81       	ldd	r25, Y+7	; 0x07
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9f 83       	std	Y+7, r25	; 0x07
    2426:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <lcd_vidInit+0x33a>
    2430:	24 c0       	rjmp	.+72     	; 0x247a <lcd_vidInit+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	68 85       	ldd	r22, Y+8	; 0x08
    2434:	79 85       	ldd	r23, Y+9	; 0x09
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9f 83       	std	Y+7, r25	; 0x07
    2444:	8e 83       	std	Y+6, r24	; 0x06
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <lcd_vidInit+0x382>
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	0f c0       	rjmp	.+30     	; 0x247a <lcd_vidInit+0x3aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    245c:	69 89       	ldd	r22, Y+17	; 0x11
    245e:	7a 89       	ldd	r23, Y+18	; 0x12
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	88 8b       	std	Y+16, r24	; 0x10
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	8a 95       	dec	r24
    2476:	f1 f7       	brne	.-4      	; 0x2474 <lcd_vidInit+0x3a4>
    2478:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	lcd_vidSendCmd(0x03);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
    2486:	88 e2       	ldi	r24, 0x28	; 40
    2488:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_CLEAR);
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
}
    2492:	e4 96       	adiw	r28, 0x34	; 52
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Command Mode	*/
	dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
    24b0:	82 e0       	ldi	r24, 0x02	; 2
    24b2:	61 e0       	ldi	r22, 0x01	; 1
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	82 95       	swap	r24
    24c8:	8f 70       	andi	r24, 0x0F	; 15
    24ca:	98 2f       	mov	r25, r24
    24cc:	91 70       	andi	r25, 0x01	; 1
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	63 e0       	ldi	r22, 0x03	; 3
    24d2:	49 2f       	mov	r20, r25
    24d4:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	82 95       	swap	r24
    24dc:	86 95       	lsr	r24
    24de:	87 70       	andi	r24, 0x07	; 7
    24e0:	98 2f       	mov	r25, r24
    24e2:	91 70       	andi	r25, 0x01	; 1
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	64 e0       	ldi	r22, 0x04	; 4
    24e8:	49 2f       	mov	r20, r25
    24ea:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	82 95       	swap	r24
    24f2:	86 95       	lsr	r24
    24f4:	86 95       	lsr	r24
    24f6:	83 70       	andi	r24, 0x03	; 3
    24f8:	98 2f       	mov	r25, r24
    24fa:	91 70       	andi	r25, 0x01	; 1
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	65 e0       	ldi	r22, 0x05	; 5
    2500:	49 2f       	mov	r20, r25
    2502:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	98 2f       	mov	r25, r24
    250a:	99 1f       	adc	r25, r25
    250c:	99 27       	eor	r25, r25
    250e:	99 1f       	adc	r25, r25
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	66 e0       	ldi	r22, 0x06	; 6
    2514:	49 2f       	mov	r20, r25
    2516:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	
	enablePulse();
    251a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	98 2f       	mov	r25, r24
    2522:	91 70       	andi	r25, 0x01	; 1
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	63 e0       	ldi	r22, 0x03	; 3
    2528:	49 2f       	mov	r20, r25
    252a:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	86 95       	lsr	r24
    2532:	98 2f       	mov	r25, r24
    2534:	91 70       	andi	r25, 0x01	; 1
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	64 e0       	ldi	r22, 0x04	; 4
    253a:	49 2f       	mov	r20, r25
    253c:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	98 2f       	mov	r25, r24
    2548:	91 70       	andi	r25, 0x01	; 1
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	65 e0       	ldi	r22, 0x05	; 5
    254e:	49 2f       	mov	r20, r25
    2550:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	86 95       	lsr	r24
    2558:	86 95       	lsr	r24
    255a:	86 95       	lsr	r24
    255c:	98 2f       	mov	r25, r24
    255e:	91 70       	andi	r25, 0x01	; 1
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	66 e0       	ldi	r22, 0x06	; 6
    2564:	49 2f       	mov	r20, r25
    2566:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	
	enablePulse();
    256a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <enablePulse>
}
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	0f 92       	push	r0
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RW_PORT, LCD_RW_CHANNEL, STD_LOW);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	82 95       	swap	r24
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	98 2f       	mov	r25, r24
    259e:	91 70       	andi	r25, 0x01	; 1
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	63 e0       	ldi	r22, 0x03	; 3
    25a4:	49 2f       	mov	r20, r25
    25a6:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	82 95       	swap	r24
    25ae:	86 95       	lsr	r24
    25b0:	87 70       	andi	r24, 0x07	; 7
    25b2:	98 2f       	mov	r25, r24
    25b4:	91 70       	andi	r25, 0x01	; 1
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	64 e0       	ldi	r22, 0x04	; 4
    25ba:	49 2f       	mov	r20, r25
    25bc:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	82 95       	swap	r24
    25c4:	86 95       	lsr	r24
    25c6:	86 95       	lsr	r24
    25c8:	83 70       	andi	r24, 0x03	; 3
    25ca:	98 2f       	mov	r25, r24
    25cc:	91 70       	andi	r25, 0x01	; 1
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	65 e0       	ldi	r22, 0x05	; 5
    25d2:	49 2f       	mov	r20, r25
    25d4:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	98 2f       	mov	r25, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	99 27       	eor	r25, r25
    25e0:	99 1f       	adc	r25, r25
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	66 e0       	ldi	r22, 0x06	; 6
    25e6:	49 2f       	mov	r20, r25
    25e8:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	
	enablePulse();
    25ec:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	98 2f       	mov	r25, r24
    25f4:	91 70       	andi	r25, 0x01	; 1
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	63 e0       	ldi	r22, 0x03	; 3
    25fa:	49 2f       	mov	r20, r25
    25fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	86 95       	lsr	r24
    2604:	98 2f       	mov	r25, r24
    2606:	91 70       	andi	r25, 0x01	; 1
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	49 2f       	mov	r20, r25
    260e:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	86 95       	lsr	r24
    2616:	86 95       	lsr	r24
    2618:	98 2f       	mov	r25, r24
    261a:	91 70       	andi	r25, 0x01	; 1
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	65 e0       	ldi	r22, 0x05	; 5
    2620:	49 2f       	mov	r20, r25
    2622:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	86 95       	lsr	r24
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	98 2f       	mov	r25, r24
    2630:	91 70       	andi	r25, 0x01	; 1
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	66 e0       	ldi	r22, 0x06	; 6
    2636:	49 2f       	mov	r20, r25
    2638:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
	
	enablePulse();
    263c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <enablePulse>
	
}
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <lcd_vidGotoRowColumn>:
* \Parameters (in) : row	-> LCD row ID
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <lcd_vidGotoRowColumn+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <lcd_vidGotoRowColumn+0x8>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	3c 83       	std	Y+4, r19	; 0x04
    2660:	2b 83       	std	Y+3, r18	; 0x03
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	31 f0       	breq	.+12     	; 0x2676 <lcd_vidGotoRowColumn+0x2e>
    266a:	2b 81       	ldd	r18, Y+3	; 0x03
    266c:	3c 81       	ldd	r19, Y+4	; 0x04
    266e:	21 30       	cpi	r18, 0x01	; 1
    2670:	31 05       	cpc	r19, r1
    2672:	31 f0       	breq	.+12     	; 0x2680 <lcd_vidGotoRowColumn+0x38>
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <lcd_vidGotoRowColumn+0x40>
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	80 58       	subi	r24, 0x80	; 128
    267a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
    267e:	04 c0       	rjmp	.+8      	; 0x2688 <lcd_vidGotoRowColumn+0x40>
		break;

	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	80 54       	subi	r24, 0x40	; 64
    2684:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
		break;
	}	
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <LCD_voidGotoXY>:

/* its same function as lcd_vidGotoRowColumn */
void LCD_voidGotoXY(lcd_row_t Copy_u8XPos, lcd_column_t Copy_u8YPos)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <LCD_voidGotoXY+0x6>
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	8a 83       	std	Y+2, r24	; 0x02
    26a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

//	Adresses start with address 0
	if(Copy_u8XPos == LCD_u8_FIRST_LINE)
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	88 23       	and	r24, r24
    26aa:	19 f4       	brne	.+6      	; 0x26b2 <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <LCD_voidGotoXY+0x28>
	}

//	Adresses start with address 0x40
	else if(Copy_u8XPos == LCD_u8_SECOND_LINE)
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	19 f4       	brne	.+6      	; 0x26be <LCD_voidGotoXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8YPos;
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	80 5c       	subi	r24, 0xC0	; 192
    26bc:	89 83       	std	Y+1, r24	; 0x01
	}

//	Setting the 8th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 7);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	80 68       	ori	r24, 0x80	; 128
    26c2:	89 83       	std	Y+1, r24	; 0x01
//	Sending the SET DDRAM address command
	lcd_vidSendCmd(Local_u8Address);
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <lcd_vidDisplyChar>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	0f 92       	push	r0
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	89 83       	std	Y+1, r24	; 0x01
	lcd_vidSendData(chr);
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	0e 94 bb 12 	call	0x2576	; 0x2576 <lcd_vidSendData>
}
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <lcd_vidDisplyStr+0x6>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	0a c0       	rjmp	.+20     	; 0x2714 <lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		lcd_vidDisplyChar(*str);
    2700:	e9 81       	ldd	r30, Y+1	; 0x01
    2702:	fa 81       	ldd	r31, Y+2	; 0x02
    2704:	80 81       	ld	r24, Z
    2706:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_vidDisplyChar>
		str++;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    2714:	e9 81       	ldd	r30, Y+1	; 0x01
    2716:	fa 81       	ldd	r31, Y+2	; 0x02
    2718:	80 81       	ld	r24, Z
    271a:	88 23       	and	r24, r24
    271c:	89 f7       	brne	.-30     	; 0x2700 <lcd_vidDisplyStr+0x10>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <lcd_vidDisplyNum>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : num	-> number to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	c9 56       	subi	r28, 0x69	; 105
    2736:	d0 40       	sbci	r29, 0x00	; 0
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	fe 01       	movw	r30, r28
    2744:	ea 59       	subi	r30, 0x9A	; 154
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 83       	st	Z, r22
    274a:	71 83       	std	Z+1, r23	; 0x01
    274c:	82 83       	std	Z+2, r24	; 0x02
    274e:	93 83       	std	Z+3, r25	; 0x03
	u8 num_to_char_array[100], iterator = 0;
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	37 c0       	rjmp	.+110    	; 0x27c2 <lcd_vidDisplyNum+0x9a>
	while(num != 0)
	{
		num_to_char_array[iterator] = (u8)(num % 10);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	08 2f       	mov	r16, r24
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	fe 01       	movw	r30, r28
    275c:	ea 59       	subi	r30, 0x9A	; 154
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	a2 81       	ldd	r26, Z+2	; 0x02
    2766:	b3 81       	ldd	r27, Z+3	; 0x03
    2768:	2a e0       	ldi	r18, 0x0A	; 10
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	28 2f       	mov	r18, r24
    277e:	ce 01       	movw	r24, r28
    2780:	02 96       	adiw	r24, 0x02	; 2
    2782:	fc 01       	movw	r30, r24
    2784:	e0 0f       	add	r30, r16
    2786:	f1 1f       	adc	r31, r17
    2788:	20 83       	st	Z, r18
		num /= 10;
    278a:	8e 01       	movw	r16, r28
    278c:	0a 59       	subi	r16, 0x9A	; 154
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	fe 01       	movw	r30, r28
    2792:	ea 59       	subi	r30, 0x9A	; 154
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	a2 81       	ldd	r26, Z+2	; 0x02
    279c:	b3 81       	ldd	r27, Z+3	; 0x03
    279e:	2a e0       	ldi	r18, 0x0A	; 10
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    27ae:	da 01       	movw	r26, r20
    27b0:	c9 01       	movw	r24, r18
    27b2:	f8 01       	movw	r30, r16
    27b4:	80 83       	st	Z, r24
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	a2 83       	std	Z+2, r26	; 0x02
    27ba:	b3 83       	std	Z+3, r27	; 0x03
		iterator++;
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	89 83       	std	Y+1, r24	; 0x01
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyNum(u32 num)
{
	u8 num_to_char_array[100], iterator = 0;
	while(num != 0)
    27c2:	fe 01       	movw	r30, r28
    27c4:	ea 59       	subi	r30, 0x9A	; 154
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	a2 81       	ldd	r26, Z+2	; 0x02
    27ce:	b3 81       	ldd	r27, Z+3	; 0x03
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	a1 05       	cpc	r26, r1
    27d4:	b1 05       	cpc	r27, r1
    27d6:	09 f0       	breq	.+2      	; 0x27da <lcd_vidDisplyNum+0xb2>
    27d8:	bd cf       	rjmp	.-134    	; 0x2754 <lcd_vidDisplyNum+0x2c>
    27da:	12 c0       	rjmp	.+36     	; 0x2800 <lcd_vidDisplyNum+0xd8>
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	88 2f       	mov	r24, r24
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9c 01       	movw	r18, r24
    27e4:	21 50       	subi	r18, 0x01	; 1
    27e6:	30 40       	sbci	r19, 0x00	; 0
    27e8:	ce 01       	movw	r24, r28
    27ea:	02 96       	adiw	r24, 0x02	; 2
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	0e 94 bb 12 	call	0x2576	; 0x2576 <lcd_vidSendData>
	{
		num_to_char_array[iterator] = (u8)(num % 10);
		num /= 10;
		iterator++;
	}
	for(;iterator > 0; iterator--)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	81 50       	subi	r24, 0x01	; 1
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	88 23       	and	r24, r24
    2804:	59 f7       	brne	.-42     	; 0x27dc <lcd_vidDisplyNum+0xb4>
	{
		lcd_vidSendData('0' + (num_to_char_array[iterator-1]));
	}
}
    2806:	c7 59       	subi	r28, 0x97	; 151
    2808:	df 4f       	sbci	r29, 0xFF	; 255
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	08 95       	ret

0000281e <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <lcd_vidCustomWrite+0x6>
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    2828:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    282a:	19 82       	std	Y+1, r1	; 0x01
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    282c:	19 82       	std	Y+1, r1	; 0x01
    282e:	2c c0       	rjmp	.+88     	; 0x2888 <lcd_vidCustomWrite+0x6a>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	08 96       	adiw	r24, 0x08	; 8
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2848:	1a 82       	std	Y+2, r1	; 0x02
    284a:	18 c0       	rjmp	.+48     	; 0x287c <lcd_vidCustomWrite+0x5e>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	48 2f       	mov	r20, r24
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	ca 01       	movw	r24, r20
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	82 0f       	add	r24, r18
    2868:	93 1f       	adc	r25, r19
    286a:	fc 01       	movw	r30, r24
    286c:	e8 59       	subi	r30, 0x98	; 152
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	88 30       	cpi	r24, 0x08	; 8
    2880:	28 f3       	brcs	.-54     	; 0x284c <lcd_vidCustomWrite+0x2e>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	88 30       	cpi	r24, 0x08	; 8
    288c:	88 f2       	brcs	.-94     	; 0x2830 <lcd_vidCustomWrite+0x12>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_XPos, u8 Copy_YPos)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	27 97       	sbiw	r28, 0x07	; 7
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
    28b0:	6d 83       	std	Y+5, r22	; 0x05
    28b2:	4e 83       	std	Y+6, r20	; 0x06
    28b4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

//	1- Calculate the required address of CGRAM
	Local_u8Address = Copy_u8PatternNumber * 8;
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	8a 83       	std	Y+2, r24	; 0x02

//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	80 64       	ori	r24, 0x40	; 64
    28ce:	8a 83       	std	Y+2, r24	; 0x02
	lcd_vidSendCmd(Local_u8Address);
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    28d6:	19 82       	std	Y+1, r1	; 0x01
    28d8:	0e c0       	rjmp	.+28     	; 0x28f6 <LCD_voidWriteSpecialCharacter+0x5e>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	80 81       	ld	r24, Z
    28ec:	0e 94 bb 12 	call	0x2576	; 0x2576 <lcd_vidSendData>
//	2- Set CGRAM Address the 7th bit 1 for the command (Datasheet)
	SET_BIT(Local_u8Address, 6);
	lcd_vidSendCmd(Local_u8Address);

//	3- Write the required pattern inside the CGRAM
	for(Local_u8PatternCounter = 0; Local_u8PatternCounter < 8; Local_u8PatternCounter++)
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	88 30       	cpi	r24, 0x08	; 8
    28fa:	78 f3       	brcs	.-34     	; 0x28da <LCD_voidWriteSpecialCharacter+0x42>
	{
		lcd_vidSendData(Copy_u8Pattern[Local_u8PatternCounter]);
	}

//	4- Shift the address counter to the DDRAM
	LCD_voidGotoXY(Copy_XPos, Copy_YPos);
    28fc:	8e 81       	ldd	r24, Y+6	; 0x06
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidGotoXY>

//	5- Display the CGRAM pattern on the LCD
	lcd_vidSendData(Copy_u8PatternNumber);
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	0e 94 bb 12 	call	0x2576	; 0x2576 <lcd_vidSendData>
}
    290a:	27 96       	adiw	r28, 0x07	; 7
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <led_init>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_init(void)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	dio_vidConfigChannel(LED_RED_PORT,LED_RED_CHANNEL,OUTPUT);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	67 e0       	ldi	r22, 0x07	; 7
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,OUTPUT);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	64 e0       	ldi	r22, 0x04	; 4
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,OUTPUT);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	65 e0       	ldi	r22, 0x05	; 5
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
	dio_vidConfigChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,OUTPUT);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	66 e0       	ldi	r22, 0x06	; 6
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 aa 0a 	call	0x1554	; 0x1554 <dio_vidConfigChannel>
}
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <led_on>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_on(led_id_t ledId)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <led_on+0x6>
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	3b 83       	std	Y+3, r19	; 0x03
    2968:	2a 83       	std	Y+2, r18	; 0x02
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	91 05       	cpc	r25, r1
    2972:	d9 f0       	breq	.+54     	; 0x29aa <led_on+0x58>
    2974:	2a 81       	ldd	r18, Y+2	; 0x02
    2976:	3b 81       	ldd	r19, Y+3	; 0x03
    2978:	22 30       	cpi	r18, 0x02	; 2
    297a:	31 05       	cpc	r19, r1
    297c:	2c f4       	brge	.+10     	; 0x2988 <led_on+0x36>
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	61 f0       	breq	.+24     	; 0x299e <led_on+0x4c>
    2986:	22 c0       	rjmp	.+68     	; 0x29cc <led_on+0x7a>
    2988:	2a 81       	ldd	r18, Y+2	; 0x02
    298a:	3b 81       	ldd	r19, Y+3	; 0x03
    298c:	22 30       	cpi	r18, 0x02	; 2
    298e:	31 05       	cpc	r19, r1
    2990:	91 f0       	breq	.+36     	; 0x29b6 <led_on+0x64>
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	9b 81       	ldd	r25, Y+3	; 0x03
    2996:	83 30       	cpi	r24, 0x03	; 3
    2998:	91 05       	cpc	r25, r1
    299a:	99 f0       	breq	.+38     	; 0x29c2 <led_on+0x70>
    299c:	17 c0       	rjmp	.+46     	; 0x29cc <led_on+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_HIGH);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	67 e0       	ldi	r22, 0x07	; 7
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    29a8:	11 c0       	rjmp	.+34     	; 0x29cc <led_on+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_HIGH);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	64 e0       	ldi	r22, 0x04	; 4
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    29b4:	0b c0       	rjmp	.+22     	; 0x29cc <led_on+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_HIGH);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	65 e0       	ldi	r22, 0x05	; 5
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <led_on+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	66 e0       	ldi	r22, 0x06	; 6
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
		#endif
		break;
	}
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <led_off>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_off(led_id_t ledId)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	00 d0       	rcall	.+0      	; 0x29de <led_off+0x6>
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	3b 83       	std	Y+3, r19	; 0x03
    29ee:	2a 83       	std	Y+2, r18	; 0x02
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	91 05       	cpc	r25, r1
    29f8:	d9 f0       	breq	.+54     	; 0x2a30 <led_off+0x58>
    29fa:	2a 81       	ldd	r18, Y+2	; 0x02
    29fc:	3b 81       	ldd	r19, Y+3	; 0x03
    29fe:	22 30       	cpi	r18, 0x02	; 2
    2a00:	31 05       	cpc	r19, r1
    2a02:	2c f4       	brge	.+10     	; 0x2a0e <led_off+0x36>
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	61 f0       	breq	.+24     	; 0x2a24 <led_off+0x4c>
    2a0c:	22 c0       	rjmp	.+68     	; 0x2a52 <led_off+0x7a>
    2a0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a10:	3b 81       	ldd	r19, Y+3	; 0x03
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	91 f0       	breq	.+36     	; 0x2a3c <led_off+0x64>
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	83 30       	cpi	r24, 0x03	; 3
    2a1e:	91 05       	cpc	r25, r1
    2a20:	99 f0       	breq	.+38     	; 0x2a48 <led_off+0x70>
    2a22:	17 c0       	rjmp	.+46     	; 0x2a52 <led_off+0x7a>
	{
		case LED_RED:
		
		#if (LED_RED_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_RED_PORT,LED_RED_CHANNEL,STD_LOW);
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	67 e0       	ldi	r22, 0x07	; 7
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    2a2e:	11 c0       	rjmp	.+34     	; 0x2a52 <led_off+0x7a>
		#endif		
		break;
		
		case LED_GREEN:
		#if (LED_GREEN_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL,STD_LOW);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	64 e0       	ldi	r22, 0x04	; 4
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    2a3a:	0b c0       	rjmp	.+22     	; 0x2a52 <led_off+0x7a>
		#endif
		break;
		
		case LED_BLUE:
		#if (LED_BLUE_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL,STD_LOW);
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	65 e0       	ldi	r22, 0x05	; 5
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <led_off+0x7a>
		#endif
		break;
		
		case LED_YELLOW:
		#if (LED_YELLOW_CONNECTION == SOURCE)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_LOW);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	66 e0       	ldi	r22, 0x06	; 6
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 8d 0b 	call	0x171a	; 0x171a <dio_vidWriteChannel>
		#elif (LED_RED_CONNECTION == SINK)
			dio_vidWriteChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL,STD_HIGH);
		#endif
		break;
	}
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <led_toggle>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : ledId	-> LED id                                                                            
* \Return value:   : None                                                                      
*******************************************************************************/
void led_toggle(led_id_t ledId)
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <led_toggle+0x6>
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	switch(ledId)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	3b 83       	std	Y+3, r19	; 0x03
    2a74:	2a 83       	std	Y+2, r18	; 0x02
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	d1 f0       	breq	.+52     	; 0x2ab4 <led_toggle+0x56>
    2a80:	2a 81       	ldd	r18, Y+2	; 0x02
    2a82:	3b 81       	ldd	r19, Y+3	; 0x03
    2a84:	22 30       	cpi	r18, 0x02	; 2
    2a86:	31 05       	cpc	r19, r1
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <led_toggle+0x36>
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	61 f0       	breq	.+24     	; 0x2aaa <led_toggle+0x4c>
    2a92:	1e c0       	rjmp	.+60     	; 0x2ad0 <led_toggle+0x72>
    2a94:	2a 81       	ldd	r18, Y+2	; 0x02
    2a96:	3b 81       	ldd	r19, Y+3	; 0x03
    2a98:	22 30       	cpi	r18, 0x02	; 2
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	81 f0       	breq	.+32     	; 0x2abe <led_toggle+0x60>
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	83 30       	cpi	r24, 0x03	; 3
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	81 f0       	breq	.+32     	; 0x2ac8 <led_toggle+0x6a>
    2aa8:	13 c0       	rjmp	.+38     	; 0x2ad0 <led_toggle+0x72>
	{
		case LED_RED:
		
			dio_vidFlipChannel(LED_RED_PORT,LED_RED_CHANNEL);	
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	67 e0       	ldi	r22, 0x07	; 7
    2aae:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <dio_vidFlipChannel>
    2ab2:	0e c0       	rjmp	.+28     	; 0x2ad0 <led_toggle+0x72>
		break;
		
		case LED_GREEN:
			dio_vidFlipChannel(LED_GREEN_PORT,LED_GREEN_CHANNEL);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	64 e0       	ldi	r22, 0x04	; 4
    2ab8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <dio_vidFlipChannel>
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <led_toggle+0x72>
		break;
		
		case LED_BLUE:
			dio_vidFlipChannel(LED_BLUE_PORT,LED_BLUE_CHANNEL);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	65 e0       	ldi	r22, 0x05	; 5
    2ac2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <dio_vidFlipChannel>
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <led_toggle+0x72>

		break;
		
		case LED_YELLOW:
			dio_vidFlipChannel(LED_YELLOW_PORT,LED_YELLOW_CHANNEL);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	66 e0       	ldi	r22, 0x06	; 6
    2acc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <dio_vidFlipChannel>
		break;
	}
}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <main>:

extern u16 ADC_u16ReadADC(u8 channel);


int main(void)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62

	led_init();
    2ae4:	0e 94 8e 14 	call	0x291c	; 0x291c <led_init>
	lcd_vidInit();
    2ae8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <lcd_vidInit>

	dio_vidSetPortDir(DIO_PORTA, INPUT);
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <dio_vidSetPortDir>

	ADC_voidInit();
    2af4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	ADC_voidEnable();
    2af8:	0e 94 87 06 	call	0xd0e	; 0xd0e <ADC_voidEnable>
	EXT0_voidInit();
    2afc:	0e 94 30 08 	call	0x1060	; 0x1060 <EXT0_voidInit>
	EXT_voidEnableGlobalInt();
    2b00:	0e 94 14 08 	call	0x1028	; 0x1028 <EXT_voidEnableGlobalInt>

	adc.size = ADC_CHANNELS_SIZE;
    2b04:	88 e0       	ldi	r24, 0x08	; 8
    2b06:	80 93 c4 00 	sts	0x00C4, r24
	adc.channelArr = arr;
    2b0a:	89 ea       	ldi	r24, 0xA9	; 169
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	90 93 c6 00 	sts	0x00C6, r25
    2b12:	80 93 c5 00 	sts	0x00C5, r24
	adc.resultArr = resultsArr;
    2b16:	8b ec       	ldi	r24, 0xCB	; 203
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	90 93 c8 00 	sts	0x00C8, r25
    2b1e:	80 93 c7 00 	sts	0x00C7, r24
	adc.callBackFunc = display_ADC_Arr_values;
    2b22:	84 e0       	ldi	r24, 0x04	; 4
    2b24:	97 e1       	ldi	r25, 0x17	; 23
    2b26:	90 93 ca 00 	sts	0x00CA, r25
    2b2a:	80 93 c9 00 	sts	0x00C9, r24

	ADC_voidCallArrayBack(adc);
    2b2e:	20 91 c4 00 	lds	r18, 0x00C4
    2b32:	30 91 c5 00 	lds	r19, 0x00C5
    2b36:	40 91 c6 00 	lds	r20, 0x00C6
    2b3a:	50 91 c7 00 	lds	r21, 0x00C7
    2b3e:	60 91 c8 00 	lds	r22, 0x00C8
    2b42:	70 91 c9 00 	lds	r23, 0x00C9
    2b46:	80 91 ca 00 	lds	r24, 0x00CA
    2b4a:	0e 94 63 07 	call	0xec6	; 0xec6 <ADC_voidCallArrayBack>
    2b4e:	ff cf       	rjmp	.-2      	; 0x2b4e <main+0x72>

00002b50 <readADC_polling>:
/****************************************************************/
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/
void readADC_polling(u8 channel)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <readADC_polling+0x6>
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	u16 reading = ADC_u16ReadADCInMV(0u);
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ADC_u16ReadADCInMV>
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01
	lcd_vidDisplyNum(reading);
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	cc 01       	movw	r24, r24
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 94 13 	call	0x2728	; 0x2728 <lcd_vidDisplyNum>
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <readADC_Interrupt>:
/****************************************************************/
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/
void readADC_Interrupt(u8 channel)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidCallBack(display_ISR, 0u, &result);
    2b92:	87 ed       	ldi	r24, 0xD7	; 215
    2b94:	95 e1       	ldi	r25, 0x15	; 21
    2b96:	2b ed       	ldi	r18, 0xDB	; 219
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	a9 01       	movw	r20, r18
    2b9e:	0e 94 30 07 	call	0xe60	; 0xe60 <ADC_voidCallBack>

	/* start conversion */
	ADC_voidStartConversion();
    2ba2:	0e 94 b1 06 	call	0xd62	; 0xd62 <ADC_voidStartConversion>
}
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <display_ISR>:
/*					on LCD screen								*/
/*					Inputs : void								*/
/*					Return : void								*/
/****************************************************************/
void display_ISR(void)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
	lcd_vidSendCmd(_LCD_CLEAR);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
	lcd_vidDisplyNum(result);
    2bc8:	80 91 db 00 	lds	r24, 0x00DB
    2bcc:	90 91 dc 00 	lds	r25, 0x00DC
    2bd0:	cc 01       	movw	r24, r24
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 94 13 	call	0x2728	; 0x2728 <lcd_vidDisplyNum>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	aa ef       	ldi	r26, 0xFA	; 250
    2be4:	b3 e4       	ldi	r27, 0x43	; 67
    2be6:	8b 87       	std	Y+11, r24	; 0x0b
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	ad 87       	std	Y+13, r26	; 0x0d
    2bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a e7       	ldi	r20, 0x7A	; 122
    2bfc:	55 e4       	ldi	r21, 0x45	; 69
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	8f 83       	std	Y+7, r24	; 0x07
    2c08:	98 87       	std	Y+8, r25	; 0x08
    2c0a:	a9 87       	std	Y+9, r26	; 0x09
    2c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <display_ISR+0x82>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <display_ISR+0x100>
	else if (__tmp > 65535)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	3f ef       	ldi	r19, 0xFF	; 255
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	57 e4       	ldi	r21, 0x47	; 71
    2c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	4c f5       	brge	.+82     	; 0x2c9a <display_ISR+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e2       	ldi	r20, 0x20	; 32
    2c56:	51 e4       	ldi	r21, 0x41	; 65
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <display_ISR+0xe2>
    2c72:	80 e9       	ldi	r24, 0x90	; 144
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <display_ISR+0xd0>
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <display_ISR+0xc4>
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <display_ISR+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <display_ISR+0x10c>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2cc2:	2e 96       	adiw	r28, 0x0e	; 14
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <display_AutoTrigger>:

void display_AutoTrigger()
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	2e 97       	sbiw	r28, 0x0e	; 14
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
	result = ADC_u16ReadADC(0u);
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	0e 94 13 07 	call	0xe26	; 0xe26 <ADC_u16ReadADC>
    2cee:	90 93 dc 00 	sts	0x00DC, r25
    2cf2:	80 93 db 00 	sts	0x00DB, r24
	lcd_vidDisplyNum(result);
    2cf6:	80 91 db 00 	lds	r24, 0x00DB
    2cfa:	90 91 dc 00 	lds	r25, 0x00DC
    2cfe:	cc 01       	movw	r24, r24
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 94 13 	call	0x2728	; 0x2728 <lcd_vidDisplyNum>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	aa ef       	ldi	r26, 0xFA	; 250
    2d12:	b3 e4       	ldi	r27, 0x43	; 67
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a e7       	ldi	r20, 0x7A	; 122
    2d2a:	55 e4       	ldi	r21, 0x45	; 69
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <display_AutoTrigger+0x8a>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <display_AutoTrigger+0x108>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <display_AutoTrigger+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <display_AutoTrigger+0xea>
    2da0:	80 e9       	ldi	r24, 0x90	; 144
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <display_AutoTrigger+0xd8>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <display_AutoTrigger+0xcc>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <display_AutoTrigger+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <display_AutoTrigger+0x114>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	lcd_vidSendCmd(_LCD_CLEAR);
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <lcd_vidSendCmd>
}
    2df6:	2e 96       	adiw	r28, 0x0e	; 14
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <display_ADC_Arr_values>:

void display_ADC_Arr_values(void)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0; i < size; i++)
    2e12:	19 82       	std	Y+1, r1	; 0x01
    2e14:	1e c0       	rjmp	.+60     	; 0x2e52 <display_ADC_Arr_values+0x4a>
	{
		if(i == 4)
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	84 30       	cpi	r24, 0x04	; 4
    2e1a:	21 f4       	brne	.+8      	; 0x2e24 <display_ADC_Arr_values+0x1c>
		{
			LCD_voidGotoXY(1, 0);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidGotoXY>
		}
		lcd_vidDisplyNum(resultsArr[i]);
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e5 53       	subi	r30, 0x35	; 53
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	cc 01       	movw	r24, r24
    2e3a:	a0 e0       	ldi	r26, 0x00	; 0
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 94 13 	call	0x2728	; 0x2728 <lcd_vidDisplyNum>
		lcd_vidDisplyChar(' ');
    2e46:	80 e2       	ldi	r24, 0x20	; 32
    2e48:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_vidDisplyChar>
	lcd_vidSendCmd(_LCD_CLEAR);
}

void display_ADC_Arr_values(void)
{
	for(u8 i = 0; i < size; i++)
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	90 91 a8 00 	lds	r25, 0x00A8
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	89 17       	cp	r24, r25
    2e5a:	e8 f2       	brcs	.-70     	; 0x2e16 <display_ADC_Arr_values+0xe>
			LCD_voidGotoXY(1, 0);
		}
		lcd_vidDisplyNum(resultsArr[i]);
		lcd_vidDisplyChar(' ');
	}
}
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <__udivmodsi4>:
    2e64:	a1 e2       	ldi	r26, 0x21	; 33
    2e66:	1a 2e       	mov	r1, r26
    2e68:	aa 1b       	sub	r26, r26
    2e6a:	bb 1b       	sub	r27, r27
    2e6c:	fd 01       	movw	r30, r26
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <__udivmodsi4_ep>

00002e70 <__udivmodsi4_loop>:
    2e70:	aa 1f       	adc	r26, r26
    2e72:	bb 1f       	adc	r27, r27
    2e74:	ee 1f       	adc	r30, r30
    2e76:	ff 1f       	adc	r31, r31
    2e78:	a2 17       	cp	r26, r18
    2e7a:	b3 07       	cpc	r27, r19
    2e7c:	e4 07       	cpc	r30, r20
    2e7e:	f5 07       	cpc	r31, r21
    2e80:	20 f0       	brcs	.+8      	; 0x2e8a <__udivmodsi4_ep>
    2e82:	a2 1b       	sub	r26, r18
    2e84:	b3 0b       	sbc	r27, r19
    2e86:	e4 0b       	sbc	r30, r20
    2e88:	f5 0b       	sbc	r31, r21

00002e8a <__udivmodsi4_ep>:
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	88 1f       	adc	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	1a 94       	dec	r1
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <__udivmodsi4_loop>
    2e96:	60 95       	com	r22
    2e98:	70 95       	com	r23
    2e9a:	80 95       	com	r24
    2e9c:	90 95       	com	r25
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	bd 01       	movw	r22, r26
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	08 95       	ret

00002ea8 <__prologue_saves__>:
    2ea8:	2f 92       	push	r2
    2eaa:	3f 92       	push	r3
    2eac:	4f 92       	push	r4
    2eae:	5f 92       	push	r5
    2eb0:	6f 92       	push	r6
    2eb2:	7f 92       	push	r7
    2eb4:	8f 92       	push	r8
    2eb6:	9f 92       	push	r9
    2eb8:	af 92       	push	r10
    2eba:	bf 92       	push	r11
    2ebc:	cf 92       	push	r12
    2ebe:	df 92       	push	r13
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	ca 1b       	sub	r28, r26
    2ed2:	db 0b       	sbc	r29, r27
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	09 94       	ijmp

00002ee0 <__epilogue_restores__>:
    2ee0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ee2:	39 88       	ldd	r3, Y+17	; 0x11
    2ee4:	48 88       	ldd	r4, Y+16	; 0x10
    2ee6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ee8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eea:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eec:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eee:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ef2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef6:	df 80       	ldd	r13, Y+7	; 0x07
    2ef8:	ee 80       	ldd	r14, Y+6	; 0x06
    2efa:	fd 80       	ldd	r15, Y+5	; 0x05
    2efc:	0c 81       	ldd	r16, Y+4	; 0x04
    2efe:	1b 81       	ldd	r17, Y+3	; 0x03
    2f00:	aa 81       	ldd	r26, Y+2	; 0x02
    2f02:	b9 81       	ldd	r27, Y+1	; 0x01
    2f04:	ce 0f       	add	r28, r30
    2f06:	d1 1d       	adc	r29, r1
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	ed 01       	movw	r28, r26
    2f14:	08 95       	ret

00002f16 <_exit>:
    2f16:	f8 94       	cli

00002f18 <__stop_program>:
    2f18:	ff cf       	rjmp	.-2      	; 0x2f18 <__stop_program>
